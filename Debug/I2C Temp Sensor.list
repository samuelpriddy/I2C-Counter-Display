
I2C Temp Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800ad48  0800ad48  0001ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb8  0800adb8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adc0  0800adc0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adc4  0800adc4  0001adc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800adc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000a08  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a94  20000a94  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001679a  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e41  00000000  00000000  00036899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d0  00000000  00000000  0003a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e4b  00000000  00000000  0003b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002427e  00000000  00000000  0003c7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019827  00000000  00000000  00060a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb8d1  00000000  00000000  0007a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052a8  00000000  00000000  00145b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0014ae1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad30 	.word	0x0800ad30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800ad30 	.word	0x0800ad30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000576:	4a38      	ldr	r2, [pc, #224]	; (8000658 <HD44780_Init+0xec>)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800057c:	4b37      	ldr	r3, [pc, #220]	; (800065c <HD44780_Init+0xf0>)
 800057e:	2208      	movs	r2, #8
 8000580:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000582:	4b37      	ldr	r3, [pc, #220]	; (8000660 <HD44780_Init+0xf4>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000588:	4b33      	ldr	r3, [pc, #204]	; (8000658 <HD44780_Init+0xec>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d907      	bls.n	80005a0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000590:	4b33      	ldr	r3, [pc, #204]	; (8000660 <HD44780_Init+0xf4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <HD44780_Init+0xf4>)
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	e006      	b.n	80005ae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005a0:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <HD44780_Init+0xf4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <HD44780_Init+0xf4>)
 80005ac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005ae:	f000 f985 	bl	80008bc <DelayInit>
  HAL_Delay(50);
 80005b2:	2032      	movs	r0, #50	; 0x32
 80005b4:	f000 ff26 	bl	8001404 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <HD44780_Init+0xf0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f943 	bl	8000848 <ExpanderWrite>
  HAL_Delay(1000);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f000 ff1d 	bl	8001404 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005ca:	2030      	movs	r0, #48	; 0x30
 80005cc:	f000 f92b 	bl	8000826 <Write4Bits>
  DelayUS(4500);
 80005d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005d4:	f000 f99c 	bl	8000910 <DelayUS>

  Write4Bits(0x03 << 4);
 80005d8:	2030      	movs	r0, #48	; 0x30
 80005da:	f000 f924 	bl	8000826 <Write4Bits>
  DelayUS(4500);
 80005de:	f241 1094 	movw	r0, #4500	; 0x1194
 80005e2:	f000 f995 	bl	8000910 <DelayUS>

  Write4Bits(0x03 << 4);
 80005e6:	2030      	movs	r0, #48	; 0x30
 80005e8:	f000 f91d 	bl	8000826 <Write4Bits>
  DelayUS(4500);
 80005ec:	f241 1094 	movw	r0, #4500	; 0x1194
 80005f0:	f000 f98e 	bl	8000910 <DelayUS>

  Write4Bits(0x02 << 4);
 80005f4:	2020      	movs	r0, #32
 80005f6:	f000 f916 	bl	8000826 <Write4Bits>
  DelayUS(100);
 80005fa:	2064      	movs	r0, #100	; 0x64
 80005fc:	f000 f988 	bl	8000910 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HD44780_Init+0xf4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f043 0320 	orr.w	r3, r3, #32
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f8ce 	bl	80007ac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HD44780_Init+0xf8>)
 8000612:	2204      	movs	r2, #4
 8000614:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000616:	f000 f875 	bl	8000704 <HD44780_Display>
  HD44780_Clear();
 800061a:	f000 f82b 	bl	8000674 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HD44780_Init+0xfc>)
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HD44780_Init+0xfc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f8bc 	bl	80007ac <SendCommand>
  DelayUS(4500);
 8000634:	f241 1094 	movw	r0, #4500	; 0x1194
 8000638:	f000 f96a 	bl	8000910 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800063c:	490b      	ldr	r1, [pc, #44]	; (800066c <HD44780_Init+0x100>)
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f876 	bl	8000730 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000644:	490a      	ldr	r1, [pc, #40]	; (8000670 <HD44780_Init+0x104>)
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f872 	bl	8000730 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800064c:	f000 f81d 	bl	800068a <HD44780_Home>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000ab 	.word	0x200000ab
 800065c:	200000ac 	.word	0x200000ac
 8000660:	200000a8 	.word	0x200000a8
 8000664:	200000a9 	.word	0x200000a9
 8000668:	200000aa 	.word	0x200000aa
 800066c:	20000000 	.word	0x20000000
 8000670:	20000008 	.word	0x20000008

08000674 <HD44780_Clear>:

void HD44780_Clear()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f897 	bl	80007ac <SendCommand>
  DelayUS(2000);
 800067e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000682:	f000 f945 	bl	8000910 <DelayUS>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}

0800068a <HD44780_Home>:

void HD44780_Home()
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800068e:	2002      	movs	r0, #2
 8000690:	f000 f88c 	bl	80007ac <SendCommand>
  DelayUS(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f000 f93a 	bl	8000910 <DelayUS>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	460a      	mov	r2, r1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HD44780_SetCursor+0x5c>)
 80006b2:	f107 0408 	add.w	r4, r7, #8
 80006b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HD44780_SetCursor+0x60>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	79ba      	ldrb	r2, [r7, #6]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d303      	bcc.n	80006ce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HD44780_SetCursor+0x60>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	3318      	adds	r3, #24
 80006d4:	443b      	add	r3, r7
 80006d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4413      	add	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f85d 	bl	80007ac <SendCommand>
}
 80006f2:	bf00      	nop
 80006f4:	371c      	adds	r7, #28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	0800ad48 	.word	0x0800ad48
 8000700:	200000ab 	.word	0x200000ab

08000704 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <HD44780_Display+0x28>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HD44780_Display+0x28>)
 8000714:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HD44780_Display+0x28>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f843 	bl	80007ac <SendCommand>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000a9 	.word	0x200000a9

08000730 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	b25b      	sxtb	r3, r3
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	b25b      	sxtb	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f82a 	bl	80007ac <SendCommand>
  for (int i=0; i<8; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e009      	b.n	8000772 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f82e 	bl	80007c8 <SendChar>
  for (int i=0; i<8; i++)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b07      	cmp	r3, #7
 8000776:	ddf2      	ble.n	800075e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800078a:	e006      	b.n	800079a <HD44780_PrintStr+0x18>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f817 	bl	80007c8 <SendChar>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f4      	bne.n	800078c <HD44780_PrintStr+0xa>
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f812 	bl	80007e4 <Send>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f804 	bl	80007e4 <Send>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f023 030f 	bic.w	r3, r3, #15
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	4313      	orrs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f80b 	bl	8000826 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000810:	7bba      	ldrb	r2, [r7, #14]
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	4313      	orrs	r3, r2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f804 	bl	8000826 <Write4Bits>
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f808 	bl	8000848 <ExpanderWrite>
  PulseEnable(value);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f820 	bl	8000880 <PulseEnable>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <ExpanderWrite+0x30>)
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4313      	orrs	r3, r2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800085e:	f107 020f 	add.w	r2, r7, #15
 8000862:	230a      	movs	r3, #10
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	214e      	movs	r1, #78	; 0x4e
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <ExpanderWrite+0x34>)
 800086c:	f003 f936 	bl	8003adc <HAL_I2C_Master_Transmit>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000ac 	.word	0x200000ac
 800087c:	200000b0 	.word	0x200000b0

08000880 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffd8 	bl	8000848 <ExpanderWrite>
  DelayUS(20);
 8000898:	2014      	movs	r0, #20
 800089a:	f000 f839 	bl	8000910 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f023 0304 	bic.w	r3, r3, #4
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffce 	bl	8000848 <ExpanderWrite>
  DelayUS(20);
 80008ac:	2014      	movs	r0, #20
 80008ae:	f000 f82f 	bl	8000910 <DelayUS>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <DelayInit>:

static void DelayInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <DelayInit+0x4c>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a10      	ldr	r2, [pc, #64]	; (8000908 <DelayInit+0x4c>)
 80008c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008ca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <DelayInit+0x4c>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <DelayInit+0x4c>)
 80008d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <DelayInit+0x50>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <DelayInit+0x50>)
 80008de:	f023 0301 	bic.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <DelayInit+0x50>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <DelayInit+0x50>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <DelayInit+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008f6:	bf00      	nop
  __ASM volatile ("NOP");
 80008f8:	bf00      	nop
  __ASM volatile ("NOP");
 80008fa:	bf00      	nop
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000edf0 	.word	0xe000edf0
 800090c:	e0001000 	.word	0xe0001000

08000910 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <DelayUS+0x44>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <DelayUS+0x48>)
 800091e:	fba2 2303 	umull	r2, r3, r2, r3
 8000922:	0c9a      	lsrs	r2, r3, #18
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	fb02 f303 	mul.w	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <DelayUS+0x4c>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <DelayUS+0x4c>)
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	429a      	cmp	r2, r3
 8000942:	d8f6      	bhi.n	8000932 <DelayUS+0x22>
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	371c      	adds	r7, #28
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000010 	.word	0x20000010
 8000958:	431bde83 	.word	0x431bde83
 800095c:	e0001000 	.word	0xe0001000

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f000 fcdb 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f847 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 f96b 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000972:	f000 f941 	bl	8000bf8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000976:	f000 f8ab 	bl	8000ad0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800097a:	f000 f8d7 	bl	8000b2c <MX_I2S3_Init>
  MX_SPI1_Init();
 800097e:	f000 f905 	bl	8000b8c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000982:	f009 fa19 	bl	8009db8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fdf0 	bl	800056c <HD44780_Init>
  HD44780_Clear();
 800098c:	f7ff fe72 	bl	8000674 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff fe84 	bl	80006a0 <HD44780_SetCursor>
  HD44780_PrintStr("0");
 8000998:	4815      	ldr	r0, [pc, #84]	; (80009f0 <main+0x90>)
 800099a:	f7ff fef2 	bl	8000782 <HD44780_PrintStr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int timesPressed = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  int buttonToggled = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  char display[32];
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009a6:	f009 fa2d 	bl	8009e04 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80009aa:	2101      	movs	r1, #1
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <main+0x94>)
 80009ae:	f001 fb15 	bl	8001fdc <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d018      	beq.n	80009ea <main+0x8a>
    	if(!buttonToggled) {
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f3      	bne.n	80009a6 <main+0x46>
    		timesPressed++;
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	3301      	adds	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    		buttonToggled = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
    		sprintf(display, "%d", timesPressed);
 80009c8:	463b      	mov	r3, r7
 80009ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009cc:	490a      	ldr	r1, [pc, #40]	; (80009f8 <main+0x98>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f009 fdb6 	bl	800a540 <siprintf>
    		HD44780_Clear();
 80009d4:	f7ff fe4e 	bl	8000674 <HD44780_Clear>
    		HD44780_SetCursor(0,0);
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fe60 	bl	80006a0 <HD44780_SetCursor>
    		HD44780_PrintStr(display);
 80009e0:	463b      	mov	r3, r7
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fecd 	bl	8000782 <HD44780_PrintStr>
 80009e8:	e7dd      	b.n	80009a6 <main+0x46>
    	}
    }
    else{buttonToggled = 0;}
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
    MX_USB_HOST_Process();
 80009ee:	e7da      	b.n	80009a6 <main+0x46>
 80009f0:	0800ad58 	.word	0x0800ad58
 80009f4:	40020000 	.word	0x40020000
 80009f8:	0800ad5c 	.word	0x0800ad5c

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f009 fdb8 	bl	800a580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <SystemClock_Config+0xd0>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 fb76 	bl	8006174 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a8e:	f000 f9d9 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2105      	movs	r1, #5
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 fdd7 	bl	8006664 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000abc:	f000 f9c2 	bl	8000e44 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_I2C1_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b0e:	f002 fea1 	bl	8003854 <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 f994 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000b0 	.word	0x200000b0
 8000b24:	40005400 	.word	0x40005400
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <MX_I2S3_Init+0x58>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b50:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <MX_I2S3_Init+0x5c>)
 8000b56:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_I2S3_Init+0x54>)
 8000b6c:	f004 fe62 	bl	8005834 <HAL_I2S_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b76:	f000 f965 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001c4 	.word	0x200001c4
 8000b84:	40003c00 	.word	0x40003c00
 8000b88:	00017700 	.word	0x00017700

08000b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bd8:	220a      	movs	r2, #10
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_SPI1_Init+0x64>)
 8000bde:	f006 f88d 	bl	8006cfc <HAL_SPI_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be8:	f000 f92c 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000020c 	.word	0x2000020c
 8000bf4:	40013000 	.word	0x40013000

08000bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_DMA_Init+0x4c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <MX_DMA_Init+0x4c>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_DMA_Init+0x4c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f000 fcef 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c24:	2010      	movs	r0, #16
 8000c26:	f000 fd08 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2011      	movs	r0, #17
 8000c30:	f000 fce7 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c34:	2011      	movs	r0, #17
 8000c36:	f000 fd00 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a71      	ldr	r2, [pc, #452]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b6f      	ldr	r3, [pc, #444]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	4b6b      	ldr	r3, [pc, #428]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b64      	ldr	r3, [pc, #400]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a63      	ldr	r2, [pc, #396]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b61      	ldr	r3, [pc, #388]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b5d      	ldr	r3, [pc, #372]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a5c      	ldr	r2, [pc, #368]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b5a      	ldr	r3, [pc, #360]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a55      	ldr	r2, [pc, #340]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <MX_GPIO_Init+0x1e4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4849      	ldr	r0, [pc, #292]	; (8000e30 <MX_GPIO_Init+0x1e8>)
 8000d0c:	f001 f97e 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	4847      	ldr	r0, [pc, #284]	; (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d16:	f001 f979 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d20:	4845      	ldr	r0, [pc, #276]	; (8000e38 <MX_GPIO_Init+0x1f0>)
 8000d22:	f001 f973 	bl	800200c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d26:	2308      	movs	r3, #8
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	483c      	ldr	r0, [pc, #240]	; (8000e30 <MX_GPIO_Init+0x1e8>)
 8000d3e:	f000 ffb1 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4836      	ldr	r0, [pc, #216]	; (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d5a:	f000 ffa3 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	482e      	ldr	r0, [pc, #184]	; (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d7a:	f000 ff93 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d82:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000d94:	f000 ff86 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4825      	ldr	r0, [pc, #148]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000dac:	f000 ff7a 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481c      	ldr	r0, [pc, #112]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000dce:	f000 ff69 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dd2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dd6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MX_GPIO_Init+0x1f0>)
 8000dec:	f000 ff5a 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000df0:	2320      	movs	r3, #32
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_GPIO_Init+0x1f0>)
 8000e04:	f000 ff4e 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_GPIO_Init+0x1e8>)
 8000e1e:	f000 ff41 	bl	8001ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020400 	.word	0x40020400

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f000 fbac 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <HAL_I2C_MspInit+0x14c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	f040 8090 	bne.w	8000fe4 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <HAL_I2C_MspInit+0x150>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_I2C_MspInit+0x150>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b46      	ldr	r3, [pc, #280]	; (8000ff0 <HAL_I2C_MspInit+0x150>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ee0:	23c0      	movs	r3, #192	; 0xc0
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee4:	2312      	movs	r3, #18
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	483e      	ldr	r0, [pc, #248]	; (8000ff4 <HAL_I2C_MspInit+0x154>)
 8000efc:	f000 fed2 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_I2C_MspInit+0x150>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <HAL_I2C_MspInit+0x150>)
 8000f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_I2C_MspInit+0x150>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f1e:	4a37      	ldr	r2, [pc, #220]	; (8000ffc <HAL_I2C_MspInit+0x15c>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f28:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f5e:	f000 fb87 	bl	8001670 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000f68:	f7ff ff6c 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <HAL_I2C_MspInit+0x158>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000f7a:	4a22      	ldr	r2, [pc, #136]	; (8001004 <HAL_I2C_MspInit+0x164>)
 8000f7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fb8:	4811      	ldr	r0, [pc, #68]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fba:	f000 fb59 	bl	8001670 <HAL_DMA_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8000fc4:	f7ff ff3e 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <HAL_I2C_MspInit+0x160>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	201f      	movs	r0, #31
 8000fda:	f000 fb12 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fde:	201f      	movs	r0, #31
 8000fe0:	f000 fb2b 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	20000104 	.word	0x20000104
 8000ffc:	400260a0 	.word	0x400260a0
 8001000:	20000164 	.word	0x20000164
 8001004:	40026088 	.word	0x40026088

08001008 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_I2S_MspInit+0xf0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15a      	bne.n	80010ee <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800103c:	23c0      	movs	r3, #192	; 0xc0
 800103e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4618      	mov	r0, r3
 800104a:	f005 fd17 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001054:	f7ff fef6 	bl	8000e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 8001062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_I2S_MspInit+0xf4>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010ac:	2310      	movs	r3, #16
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <HAL_I2S_MspInit+0xf8>)
 80010c8:	f000 fdec 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010de:	2306      	movs	r3, #6
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_I2S_MspInit+0xfc>)
 80010ea:	f000 fddb 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3738      	adds	r7, #56	; 0x38
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40003c00 	.word	0x40003c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020800 	.word	0x40020800

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_SPI_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001162:	23e0      	movs	r3, #224	; 0xe0
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001172:	2305      	movs	r3, #5
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 800117e:	f000 fd91 	bl	8001ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40013000 	.word	0x40013000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f8ee 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA1_Stream5_IRQHandler+0x10>)
 80011f2:	f000 fb0d 	bl	8001810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000164 	.word	0x20000164

08001200 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <DMA1_Stream6_IRQHandler+0x10>)
 8001206:	f000 fb03 	bl	8001810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000104 	.word	0x20000104

08001214 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <I2C1_EV_IRQHandler+0x10>)
 800121a:	f002 fd5d 	bl	8003cd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000b0 	.word	0x200000b0

08001228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <OTG_FS_IRQHandler+0x10>)
 800122e:	f001 f971 	bl	8002514 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000648 	.word	0x20000648

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f009 f9a0 	bl	800a5b0 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20020000 	.word	0x20020000
 800129c:	00000400 	.word	0x00000400
 80012a0:	20000264 	.word	0x20000264
 80012a4:	20000a98 	.word	0x20000a98

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd7 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f009 f95f 	bl	800a5bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fb2f 	bl	8000960 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001310:	0800adc8 	.word	0x0800adc8
  ldr r2, =_sbss
 8001314:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001318:	20000a94 	.word	0x20000a94

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f94f 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fd7c 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f967 	bl	8001656 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f92f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000010 	.word	0x20000010
 80013bc:	20000018 	.word	0x20000018
 80013c0:	20000014 	.word	0x20000014

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000018 	.word	0x20000018
 80013e8:	20000268 	.word	0x20000268

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000268 	.word	0x20000268

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000018 	.word	0x20000018

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff3e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff31 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff feb6 	bl	80013ec <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e099      	b.n	80017c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ac:	e00f      	b.n	80016ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ae:	f7ff fe9d 	bl	80013ec <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d908      	bls.n	80016ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e078      	b.n	80017c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e8      	bne.n	80016ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_DMA_Init+0x158>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b04      	cmp	r3, #4
 8001726:	d107      	bne.n	8001738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4313      	orrs	r3, r2
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f023 0307 	bic.w	r3, r3, #7
 800174e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2b04      	cmp	r3, #4
 8001760:	d117      	bne.n	8001792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fa19 	bl	8001bac <DMA_CheckFifoParam>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800178e:	2301      	movs	r3, #1
 8001790:	e016      	b.n	80017c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f9d0 	bl	8001b40 <DMA_CalcBaseAndBitshift>
 80017a0:	4603      	mov	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	223f      	movs	r2, #63	; 0x3f
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	f010803f 	.word	0xf010803f

080017cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d004      	beq.n	80017ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00c      	b.n	8001804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800181c:	4b8e      	ldr	r3, [pc, #568]	; (8001a58 <HAL_DMA_IRQHandler+0x248>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a8e      	ldr	r2, [pc, #568]	; (8001a5c <HAL_DMA_IRQHandler+0x24c>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183a:	2208      	movs	r2, #8
 800183c:	409a      	lsls	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01a      	beq.n	800187c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0204 	bic.w	r2, r2, #4
 8001862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	2208      	movs	r2, #8
 800186a:	409a      	lsls	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	2201      	movs	r2, #1
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d012      	beq.n	80018b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2201      	movs	r2, #1
 80018a0:	409a      	lsls	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	f043 0202 	orr.w	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	2204      	movs	r2, #4
 80018b8:	409a      	lsls	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d012      	beq.n	80018e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2204      	movs	r2, #4
 80018d6:	409a      	lsls	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f043 0204 	orr.w	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2210      	movs	r2, #16
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d043      	beq.n	8001980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d03c      	beq.n	8001980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2210      	movs	r2, #16
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d018      	beq.n	8001952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d108      	bne.n	8001940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d024      	beq.n	8001980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
 800193e:	e01f      	b.n	8001980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01b      	beq.n	8001980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
 8001950:	e016      	b.n	8001980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0208 	bic.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2220      	movs	r2, #32
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 808f 	beq.w	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8087 	beq.w	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a6:	2220      	movs	r2, #32
 80019a8:	409a      	lsls	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d136      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0216 	bic.w	r2, r2, #22
 80019c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <HAL_DMA_IRQHandler+0x1da>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0208 	bic.w	r2, r2, #8
 80019f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fe:	223f      	movs	r2, #63	; 0x3f
 8001a00:	409a      	lsls	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d07e      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
        }
        return;
 8001a26:	e079      	b.n	8001b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01d      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d031      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e02c      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
 8001a56:	bf00      	nop
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d023      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
 8001a70:	e01e      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0210 	bic.w	r2, r2, #16
 8001a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d032      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d022      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d307      	bcc.n	8001af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f2      	bne.n	8001adc <HAL_DMA_IRQHandler+0x2cc>
 8001af6:	e000      	b.n	8001afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
 8001b1a:	e000      	b.n	8001b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b1c:	bf00      	nop
    }
  }
}
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b32:	b2db      	uxtb	r3, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3b10      	subs	r3, #16
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <DMA_CalcBaseAndBitshift+0x64>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d909      	bls.n	8001b82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	1d1a      	adds	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b80:	e007      	b.n	8001b92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b8a:	f023 0303 	bic.w	r3, r3, #3
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	aaaaaaab 	.word	0xaaaaaaab
 8001ba8:	0800ad7c 	.word	0x0800ad7c

08001bac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d11f      	bne.n	8001c06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d856      	bhi.n	8001c7a <DMA_CheckFifoParam+0xce>
 8001bcc:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <DMA_CheckFifoParam+0x28>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001be5 	.word	0x08001be5
 8001bd8:	08001bf7 	.word	0x08001bf7
 8001bdc:	08001be5 	.word	0x08001be5
 8001be0:	08001c7b 	.word	0x08001c7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d046      	beq.n	8001c7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf4:	e043      	b.n	8001c7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bfe:	d140      	bne.n	8001c82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c04:	e03d      	b.n	8001c82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c0e:	d121      	bne.n	8001c54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d837      	bhi.n	8001c86 <DMA_CheckFifoParam+0xda>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <DMA_CheckFifoParam+0x70>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c33 	.word	0x08001c33
 8001c24:	08001c2d 	.word	0x08001c2d
 8001c28:	08001c45 	.word	0x08001c45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c30:	e030      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d025      	beq.n	8001c8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c42:	e022      	b.n	8001c8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c4c:	d11f      	bne.n	8001c8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c52:	e01c      	b.n	8001c8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d903      	bls.n	8001c62 <DMA_CheckFifoParam+0xb6>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d003      	beq.n	8001c68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c60:	e018      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
      break;
 8001c66:	e015      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      break;
 8001c78:	e00b      	b.n	8001c92 <DMA_CheckFifoParam+0xe6>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e00a      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      break;
 8001c7e:	bf00      	nop
 8001c80:	e008      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      break;
 8001c82:	bf00      	nop
 8001c84:	e006      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e004      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
 8001c8c:	e002      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c8e:	bf00      	nop
 8001c90:	e000      	b.n	8001c94 <DMA_CheckFifoParam+0xe8>
      break;
 8001c92:	bf00      	nop
    }
  } 
  
  return status; 
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e16b      	b.n	8001f98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 815a 	bne.w	8001f92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d017      	beq.n	8001d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d123      	bne.n	8001de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80b4 	beq.w	8001f92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a5f      	ldr	r2, [pc, #380]	; (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a5b      	ldr	r2, [pc, #364]	; (8001fb4 <HAL_GPIO_Init+0x310>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x314>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_GPIO_Init+0x318>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_GPIO_Init+0x31c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x320>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x21a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_GPIO_Init+0x324>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x216>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x328>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x212>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x32c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x20e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_GPIO_Init+0x330>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x20a>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e00e      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eae:	2308      	movs	r3, #8
 8001eb0:	e00c      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e00a      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x310>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0e:	4a32      	ldr	r2, [pc, #200]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f ae90 	bls.w	8001cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40021400 	.word	0x40021400
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40021c00 	.word	0x40021c00
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e001      	b.n	8001ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800203e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002040:	b08f      	sub	sp, #60	; 0x3c
 8002042:	af0a      	add	r7, sp, #40	; 0x28
 8002044:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e054      	b.n	80020fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f007 ff02 	bl	8009e74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2203      	movs	r2, #3
 8002074:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 ff2f 	bl	8006ef2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	687e      	ldr	r6, [r7, #4]
 800209c:	466d      	mov	r5, sp
 800209e:	f106 0410 	add.w	r4, r6, #16
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b2:	1d33      	adds	r3, r6, #4
 80020b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b6:	6838      	ldr	r0, [r7, #0]
 80020b8:	f004 fea9 	bl	8006e0e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 ff26 	bl	8006f14 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	687e      	ldr	r6, [r7, #4]
 80020d0:	466d      	mov	r5, sp
 80020d2:	f106 0410 	add.w	r4, r6, #16
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e6:	1d33      	adds	r3, r6, #4
 80020e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ea:	6838      	ldr	r0, [r7, #0]
 80020ec:	f005 f8ae 	bl	800724c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002102 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002102:	b590      	push	{r4, r7, lr}
 8002104:	b089      	sub	sp, #36	; 0x24
 8002106:	af04      	add	r7, sp, #16
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	4608      	mov	r0, r1
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
 8002110:	4603      	mov	r3, r0
 8002112:	70fb      	strb	r3, [r7, #3]
 8002114:	460b      	mov	r3, r1
 8002116:	70bb      	strb	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_HCD_HC_Init+0x28>
 8002126:	2302      	movs	r3, #2
 8002128:	e076      	b.n	8002218 <HAL_HCD_HC_Init+0x116>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	333d      	adds	r3, #61	; 0x3d
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	787a      	ldrb	r2, [r7, #1]
 8002154:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3340      	adds	r3, #64	; 0x40
 8002164:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002166:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3339      	adds	r3, #57	; 0x39
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	333f      	adds	r3, #63	; 0x3f
 8002188:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800218c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	78ba      	ldrb	r2, [r7, #2]
 8002192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002196:	b2d0      	uxtb	r0, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	333a      	adds	r3, #58	; 0x3a
 80021a4:	4602      	mov	r2, r0
 80021a6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da09      	bge.n	80021c4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	333b      	adds	r3, #59	; 0x3b
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e008      	b.n	80021d6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	333b      	adds	r3, #59	; 0x3b
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	333c      	adds	r3, #60	; 0x3c
 80021e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	787c      	ldrb	r4, [r7, #1]
 80021f0:	78ba      	ldrb	r2, [r7, #2]
 80021f2:	78f9      	ldrb	r1, [r7, #3]
 80021f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4623      	mov	r3, r4
 8002206:	f005 f9a7 	bl	8007558 <USB_HC_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}

08002220 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_HCD_HC_Halt+0x1e>
 800223a:	2302      	movs	r3, #2
 800223c:	e00f      	b.n	800225e <HAL_HCD_HC_Halt+0x3e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f005 fbf7 	bl	8007a42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	70fb      	strb	r3, [r7, #3]
 800227a:	460b      	mov	r3, r1
 800227c:	70bb      	strb	r3, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	333b      	adds	r3, #59	; 0x3b
 8002290:	78ba      	ldrb	r2, [r7, #2]
 8002292:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	333f      	adds	r3, #63	; 0x3f
 80022a2:	787a      	ldrb	r2, [r7, #1]
 80022a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022a6:	7c3b      	ldrb	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3342      	adds	r3, #66	; 0x42
 80022ba:	2203      	movs	r2, #3
 80022bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333d      	adds	r3, #61	; 0x3d
 80022cc:	7f3a      	ldrb	r2, [r7, #28]
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e008      	b.n	80022e4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3342      	adds	r3, #66	; 0x42
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	f200 80c6 	bhi.w	8002478 <HAL_HCD_HC_SubmitRequest+0x210>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002305 	.word	0x08002305
 80022f8:	08002465 	.word	0x08002465
 80022fc:	08002369 	.word	0x08002369
 8002300:	080023e7 	.word	0x080023e7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002304:	7c3b      	ldrb	r3, [r7, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 80b8 	bne.w	800247c <HAL_HCD_HC_SubmitRequest+0x214>
 800230c:	78bb      	ldrb	r3, [r7, #2]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 80b4 	bne.w	800247c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002314:	8b3b      	ldrh	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3355      	adds	r3, #85	; 0x55
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3355      	adds	r3, #85	; 0x55
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3342      	adds	r3, #66	; 0x42
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002352:	e093      	b.n	800247c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3342      	adds	r3, #66	; 0x42
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
      break;
 8002366:	e089      	b.n	800247c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002368:	78bb      	ldrb	r3, [r7, #2]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11d      	bne.n	80023aa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3355      	adds	r3, #85	; 0x55
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3342      	adds	r3, #66	; 0x42
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002394:	e073      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3342      	adds	r3, #66	; 0x42
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
      break;
 80023a8:	e069      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3354      	adds	r3, #84	; 0x54
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3342      	adds	r3, #66	; 0x42
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
      break;
 80023d0:	e055      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3342      	adds	r3, #66	; 0x42
 80023e0:	2202      	movs	r2, #2
 80023e2:	701a      	strb	r2, [r3, #0]
      break;
 80023e4:	e04b      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023e6:	78bb      	ldrb	r3, [r7, #2]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11d      	bne.n	8002428 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3355      	adds	r3, #85	; 0x55
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3342      	adds	r3, #66	; 0x42
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002412:	e034      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3342      	adds	r3, #66	; 0x42
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
      break;
 8002426:	e02a      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3354      	adds	r3, #84	; 0x54
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3342      	adds	r3, #66	; 0x42
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
      break;
 800244e:	e016      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	3342      	adds	r3, #66	; 0x42
 800245e:	2202      	movs	r2, #2
 8002460:	701a      	strb	r2, [r3, #0]
      break;
 8002462:	e00c      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3342      	adds	r3, #66	; 0x42
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      break;
 8002476:	e002      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002478:	bf00      	nop
 800247a:	e000      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800247c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3344      	adds	r3, #68	; 0x44
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	8b3a      	ldrh	r2, [r7, #24]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	202c      	movs	r0, #44	; 0x2c
 8002498:	fb00 f303 	mul.w	r3, r0, r3
 800249c:	440b      	add	r3, r1
 800249e:	334c      	adds	r3, #76	; 0x4c
 80024a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3360      	adds	r3, #96	; 0x60
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3350      	adds	r3, #80	; 0x50
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3339      	adds	r3, #57	; 0x39
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3361      	adds	r3, #97	; 0x61
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	222c      	movs	r2, #44	; 0x2c
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	3338      	adds	r3, #56	; 0x38
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	18d1      	adds	r1, r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	f005 f94a 	bl	800779c <USB_HC_StartXfer>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop

08002514 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fe4b 	bl	80071c6 <USB_GetMode>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 80f6 	bne.w	8002724 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fe2f 	bl	80071a0 <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80ec 	beq.w	8002722 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fe26 	bl	80071a0 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800255e:	d104      	bne.n	800256a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002568:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fe16 	bl	80071a0 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800257e:	d104      	bne.n	800258a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002588:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fe06 	bl	80071a0 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800259a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800259e:	d104      	bne.n	80025aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fdf6 	bl	80071a0 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d103      	bne.n	80025c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2202      	movs	r2, #2
 80025c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 fde8 	bl	80071a0 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025da:	d11c      	bne.n	8002616 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025e4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025f6:	2110      	movs	r1, #16
 80025f8:	6938      	ldr	r0, [r7, #16]
 80025fa:	f004 fcd7 	bl	8006fac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025fe:	6938      	ldr	r0, [r7, #16]
 8002600:	f004 fd08 	bl	8007014 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f004 fede 	bl	80073cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f007 fcad 	bl	8009f70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f004 fdc0 	bl	80071a0 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262a:	d102      	bne.n	8002632 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f001 f89e 	bl	800376e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 fdb2 	bl	80071a0 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b08      	cmp	r3, #8
 8002644:	d106      	bne.n	8002654 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f007 fc76 	bl	8009f38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2208      	movs	r2, #8
 8002652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fda1 	bl	80071a0 <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b10      	cmp	r3, #16
 8002666:	d101      	bne.n	800266c <HAL_HCD_IRQHandler+0x158>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_HCD_IRQHandler+0x15a>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0210 	bic.w	r2, r2, #16
 8002680:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 ffa1 	bl	80035ca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0210 	orr.w	r2, r2, #16
 8002696:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f004 fd7f 	bl	80071a0 <USB_ReadInterrupts>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ac:	d13a      	bne.n	8002724 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f005 f9b4 	bl	8007a20 <USB_HC_ReadInterrupt>
 80026b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e025      	b.n	800270c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ea:	d106      	bne.n	80026fa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8ab 	bl	800284e <HCD_HC_IN_IRQHandler>
 80026f8:	e005      	b.n	8002706 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fbf9 	bl	8002ef8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	429a      	cmp	r2, r3
 8002714:	d3d4      	bcc.n	80026c0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271e:	615a      	str	r2, [r3, #20]
 8002720:	e000      	b.n	8002724 <HAL_HCD_IRQHandler+0x210>
      return;
 8002722:	bf00      	nop
    }
  }
}
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_HCD_Start+0x16>
 800273c:	2302      	movs	r3, #2
 800273e:	e013      	b.n	8002768 <HAL_HCD_Start+0x3e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fea0 	bl	8007494 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fbb9 	bl	8006ed0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_HCD_Stop+0x16>
 8002782:	2302      	movs	r3, #2
 8002784:	e00d      	b.n	80027a2 <HAL_HCD_Stop+0x32>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f005 fa8e 	bl	8007cb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 fe42 	bl	8007440 <USB_ResetPort>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	781b      	ldrb	r3, [r3, #0]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3350      	adds	r3, #80	; 0x50
 8002808:	681b      	ldr	r3, [r3, #0]
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f004 fe86 	bl	8007534 <USB_GetCurrentFrame>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 fe61 	bl	8007506 <USB_GetHostSpeed>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d11a      	bne.n	80028b4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	2304      	movs	r3, #4
 800288e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3361      	adds	r3, #97	; 0x61
 800289e:	2206      	movs	r2, #6
 80028a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 f8c8 	bl	8007a42 <USB_HC_Halt>
 80028b2:	e0af      	b.n	8002a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ca:	d11b      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3361      	adds	r3, #97	; 0x61
 80028ee:	2207      	movs	r2, #7
 80028f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f005 f8a0 	bl	8007a42 <USB_HC_Halt>
 8002902:	e087      	b.n	8002a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	d109      	bne.n	800292e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2320      	movs	r3, #32
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	e072      	b.n	8002a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b08      	cmp	r3, #8
 8002942:	d11a      	bne.n	800297a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2308      	movs	r3, #8
 8002954:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3361      	adds	r3, #97	; 0x61
 8002964:	2205      	movs	r2, #5
 8002966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f005 f865 	bl	8007a42 <USB_HC_Halt>
 8002978:	e04c      	b.n	8002a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d11b      	bne.n	80029ca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3361      	adds	r3, #97	; 0x61
 80029b4:	2208      	movs	r2, #8
 80029b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f005 f83d 	bl	8007a42 <USB_HC_Halt>
 80029c8:	e024      	b.n	8002a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d119      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3361      	adds	r3, #97	; 0x61
 8002a00:	2206      	movs	r2, #6
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 f817 	bl	8007a42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2a:	d112      	bne.n	8002a52 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 f803 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a4e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a50:	e24e      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 80df 	bne.w	8002c28 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d019      	beq.n	8002aa6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3348      	adds	r3, #72	; 0x48
 8002a80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0159      	lsls	r1, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a94:	1ad2      	subs	r2, r2, r3
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	202c      	movs	r0, #44	; 0x2c
 8002a9c:	fb00 f303 	mul.w	r3, r0, r3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3350      	adds	r3, #80	; 0x50
 8002aa4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3361      	adds	r3, #97	; 0x61
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	335c      	adds	r3, #92	; 0x5c
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2301      	movs	r3, #1
 8002ada:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	333f      	adds	r3, #63	; 0x3f
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	333f      	adds	r3, #63	; 0x3f
 8002afe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d111      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 ff97 	bl	8007a42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2310      	movs	r3, #16
 8002b24:	6093      	str	r3, [r2, #8]
 8002b26:	e03a      	b.n	8002b9e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	333f      	adds	r3, #63	; 0x3f
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d009      	beq.n	8002b50 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	333f      	adds	r3, #63	; 0x3f
 8002b4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d126      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b6e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3360      	adds	r3, #96	; 0x60
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	b2d9      	uxtb	r1, r3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	202c      	movs	r0, #44	; 0x2c
 8002b8c:	fb00 f303 	mul.w	r3, r0, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3360      	adds	r3, #96	; 0x60
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f007 f9f7 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d12b      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3348      	adds	r3, #72	; 0x48
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	202c      	movs	r0, #44	; 0x2c
 8002bbc:	fb00 f202 	mul.w	r2, r0, r2
 8002bc0:	440a      	add	r2, r1
 8002bc2:	3240      	adds	r2, #64	; 0x40
 8002bc4:	8812      	ldrh	r2, [r2, #0]
 8002bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 818e 	beq.w	8002ef0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3354      	adds	r3, #84	; 0x54
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2d8      	uxtb	r0, r3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3354      	adds	r3, #84	; 0x54
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	701a      	strb	r2, [r3, #0]
}
 8002bfc:	e178      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3354      	adds	r3, #84	; 0x54
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	b2d8      	uxtb	r0, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3354      	adds	r3, #84	; 0x54
 8002c22:	4602      	mov	r2, r0
 8002c24:	701a      	strb	r2, [r3, #0]
}
 8002c26:	e163      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	f040 80f6 	bne.w	8002e2c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d109      	bne.n	8002c68 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e0c9      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3361      	adds	r3, #97	; 0x61
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d109      	bne.n	8002c90 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3360      	adds	r3, #96	; 0x60
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e0b5      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3361      	adds	r3, #97	; 0x61
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d009      	beq.n	8002cb8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3361      	adds	r3, #97	; 0x61
 8002cb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d150      	bne.n	8002d5a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	335c      	adds	r3, #92	; 0x5c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	202c      	movs	r0, #44	; 0x2c
 8002cd0:	fb00 f303 	mul.w	r3, r0, r3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	335c      	adds	r3, #92	; 0x5c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d912      	bls.n	8002d14 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	335c      	adds	r3, #92	; 0x5c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d12:	e073      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3360      	adds	r3, #96	; 0x60
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d3c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d44:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d58:	e050      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3361      	adds	r3, #97	; 0x61
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d122      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3360      	adds	r3, #96	; 0x60
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e023      	b.n	8002dfc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	d119      	bne.n	8002dfc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	335c      	adds	r3, #92	; 0x5c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	202c      	movs	r0, #44	; 0x2c
 8002de0:	fb00 f303 	mul.w	r3, r0, r3
 8002de4:	440b      	add	r3, r1
 8002de6:	335c      	adds	r3, #92	; 0x5c
 8002de8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3360      	adds	r3, #96	; 0x60
 8002df8:	2204      	movs	r2, #4
 8002dfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	b2d9      	uxtb	r1, r3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	202c      	movs	r0, #44	; 0x2c
 8002e18:	fb00 f303 	mul.w	r3, r0, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3360      	adds	r3, #96	; 0x60
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f007 f8b1 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e2a:	e061      	b.n	8002ef0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d156      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	333f      	adds	r3, #63	; 0x3f
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d111      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	335c      	adds	r3, #92	; 0x5c
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fde5 	bl	8007a42 <USB_HC_Halt>
 8002e78:	e031      	b.n	8002ede <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	333f      	adds	r3, #63	; 0x3f
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	333f      	adds	r3, #63	; 0x3f
 8002e9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d11d      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d110      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3361      	adds	r3, #97	; 0x61
 8002eca:	2203      	movs	r2, #3
 8002ecc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fdb2 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	2310      	movs	r3, #16
 8002eee:	6093      	str	r3, [r2, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d11a      	bne.n	8002f5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	2304      	movs	r3, #4
 8002f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3361      	adds	r3, #97	; 0x61
 8002f48:	2206      	movs	r2, #6
 8002f4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 fd73 	bl	8007a42 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f5c:	e331      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d12e      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	2320      	movs	r3, #32
 8002f84:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333d      	adds	r3, #61	; 0x3d
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	f040 8313 	bne.w	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	333d      	adds	r3, #61	; 0x3d
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 fd39 	bl	8007a42 <USB_HC_Halt>
}
 8002fd0:	e2f7      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe8:	d112      	bne.n	8003010 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ffc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f004 fd1a 	bl	8007a42 <USB_HC_Halt>
}
 800300e:	e2d8      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d140      	bne.n	80030a8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	335c      	adds	r3, #92	; 0x5c
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d111      	bne.n	8003072 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	333d      	adds	r3, #61	; 0x3d
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	461a      	mov	r2, r3
 800306e:	2340      	movs	r3, #64	; 0x40
 8003070:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	2301      	movs	r3, #1
 8003082:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3361      	adds	r3, #97	; 0x61
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 fcce 	bl	8007a42 <USB_HC_Halt>
}
 80030a6:	e28c      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d12c      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3361      	adds	r3, #97	; 0x61
 80030cc:	2204      	movs	r2, #4
 80030ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	333d      	adds	r3, #61	; 0x3d
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fc9f 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	6093      	str	r3, [r2, #8]
}
 8003116:	e254      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11a      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	2308      	movs	r3, #8
 800313e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	2205      	movs	r2, #5
 8003150:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f004 fc70 	bl	8007a42 <USB_HC_Halt>
}
 8003162:	e22e      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d140      	bne.n	80031fc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3361      	adds	r3, #97	; 0x61
 800319a:	2203      	movs	r2, #3
 800319c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	333d      	adds	r3, #61	; 0x3d
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d112      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	333c      	adds	r3, #60	; 0x3c
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	333d      	adds	r3, #61	; 0x3d
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fc2d 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	461a      	mov	r2, r3
 80031f6:	2310      	movs	r3, #16
 80031f8:	6093      	str	r3, [r2, #8]
}
 80031fa:	e1e2      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d164      	bne.n	80032dc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d111      	bne.n	800323e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3361      	adds	r3, #97	; 0x61
 8003228:	2206      	movs	r2, #6
 800322a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f004 fc03 	bl	8007a42 <USB_HC_Halt>
 800323c:	e044      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	335c      	adds	r3, #92	; 0x5c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	202c      	movs	r0, #44	; 0x2c
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	440b      	add	r3, r1
 800325c:	335c      	adds	r3, #92	; 0x5c
 800325e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	335c      	adds	r3, #92	; 0x5c
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d920      	bls.n	80032b6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	335c      	adds	r3, #92	; 0x5c
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3360      	adds	r3, #96	; 0x60
 8003294:	2204      	movs	r2, #4
 8003296:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	b2d9      	uxtb	r1, r3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	202c      	movs	r0, #44	; 0x2c
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3360      	adds	r3, #96	; 0x60
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f006 fe6c 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80032b4:	e008      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3360      	adds	r3, #96	; 0x60
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	6093      	str	r3, [r2, #8]
}
 80032da:	e172      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d11b      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3361      	adds	r3, #97	; 0x61
 8003302:	2208      	movs	r2, #8
 8003304:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f004 fb96 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	461a      	mov	r2, r3
 8003324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003328:	6093      	str	r3, [r2, #8]
}
 800332a:	e14a      	b.n	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	f040 813f 	bne.w	80035c2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3361      	adds	r3, #97	; 0x61
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d17d      	bne.n	8003454 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3360      	adds	r3, #96	; 0x60
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	333f      	adds	r3, #63	; 0x3f
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d00a      	beq.n	8003394 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	333f      	adds	r3, #63	; 0x3f
 800338c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800338e:	2b03      	cmp	r3, #3
 8003390:	f040 8100 	bne.w	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d113      	bne.n	80033c4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3355      	adds	r3, #85	; 0x55
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	f083 0301 	eor.w	r3, r3, #1
 80033b0:	b2d8      	uxtb	r0, r3
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3355      	adds	r3, #85	; 0x55
 80033c0:	4602      	mov	r2, r0
 80033c2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 80e3 	bne.w	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	334c      	adds	r3, #76	; 0x4c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80d8 	beq.w	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	334c      	adds	r3, #76	; 0x4c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	fb00 f202 	mul.w	r2, r0, r2
 80033fe:	440a      	add	r2, r1
 8003400:	3240      	adds	r2, #64	; 0x40
 8003402:	8812      	ldrh	r2, [r2, #0]
 8003404:	4413      	add	r3, r2
 8003406:	3b01      	subs	r3, #1
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	202c      	movs	r0, #44	; 0x2c
 800340e:	fb00 f202 	mul.w	r2, r0, r2
 8003412:	440a      	add	r2, r1
 8003414:	3240      	adds	r2, #64	; 0x40
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	fbb3 f3f2 	udiv	r3, r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80b5 	beq.w	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3355      	adds	r3, #85	; 0x55
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2d8      	uxtb	r0, r3
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3355      	adds	r3, #85	; 0x55
 800344e:	4602      	mov	r2, r0
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e09f      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3361      	adds	r3, #97	; 0x61
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d109      	bne.n	800347c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3360      	adds	r3, #96	; 0x60
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	e08b      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3361      	adds	r3, #97	; 0x61
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d109      	bne.n	80034a4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	2202      	movs	r2, #2
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e077      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3361      	adds	r3, #97	; 0x61
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d109      	bne.n	80034cc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3360      	adds	r3, #96	; 0x60
 80034c6:	2205      	movs	r2, #5
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e063      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3361      	adds	r3, #97	; 0x61
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d009      	beq.n	80034f4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3361      	adds	r3, #97	; 0x61
 80034ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d14f      	bne.n	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	335c      	adds	r3, #92	; 0x5c
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	202c      	movs	r0, #44	; 0x2c
 800350c:	fb00 f303 	mul.w	r3, r0, r3
 8003510:	440b      	add	r3, r1
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d912      	bls.n	8003550 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	335c      	adds	r3, #92	; 0x5c
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3360      	adds	r3, #96	; 0x60
 800354a:	2204      	movs	r2, #4
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e021      	b.n	8003594 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	3360      	adds	r3, #96	; 0x60
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003578:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003580:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	461a      	mov	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a0:	461a      	mov	r2, r3
 80035a2:	2302      	movs	r3, #2
 80035a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	b2d9      	uxtb	r1, r3
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	202c      	movs	r0, #44	; 0x2c
 80035b0:	fb00 f303 	mul.w	r3, r0, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3360      	adds	r3, #96	; 0x60
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f006 fce5 	bl	8009f8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035c2:	bf00      	nop
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b08a      	sub	sp, #40	; 0x28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	0c5b      	lsrs	r3, r3, #17
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d004      	beq.n	8003610 <HCD_RXQLVL_IRQHandler+0x46>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b05      	cmp	r3, #5
 800360a:	f000 80a9 	beq.w	8003760 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800360e:	e0aa      	b.n	8003766 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a6 	beq.w	8003764 <HCD_RXQLVL_IRQHandler+0x19a>
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3344      	adds	r3, #68	; 0x44
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 809b 	beq.w	8003764 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3350      	adds	r3, #80	; 0x50
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	441a      	add	r2, r3
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	202c      	movs	r0, #44	; 0x2c
 8003648:	fb00 f303 	mul.w	r3, r0, r3
 800364c:	440b      	add	r3, r1
 800364e:	334c      	adds	r3, #76	; 0x4c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d87a      	bhi.n	800374c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3344      	adds	r3, #68	; 0x44
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	b292      	uxth	r2, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f003 fd3e 	bl	80070f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3344      	adds	r3, #68	; 0x44
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	441a      	add	r2, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	202c      	movs	r0, #44	; 0x2c
 800368e:	fb00 f303 	mul.w	r3, r0, r3
 8003692:	440b      	add	r3, r1
 8003694:	3344      	adds	r3, #68	; 0x44
 8003696:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3350      	adds	r3, #80	; 0x50
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	441a      	add	r2, r3
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	202c      	movs	r0, #44	; 0x2c
 80036b2:	fb00 f303 	mul.w	r3, r0, r3
 80036b6:	440b      	add	r3, r1
 80036b8:	3350      	adds	r3, #80	; 0x50
 80036ba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	0cdb      	lsrs	r3, r3, #19
 80036cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3340      	adds	r3, #64	; 0x40
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d13c      	bne.n	8003764 <HCD_RXQLVL_IRQHandler+0x19a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d039      	beq.n	8003764 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003706:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800370e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	3354      	adds	r3, #84	; 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2d8      	uxtb	r0, r3
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3354      	adds	r3, #84	; 0x54
 8003746:	4602      	mov	r2, r0
 8003748:	701a      	strb	r2, [r3, #0]
      break;
 800374a:	e00b      	b.n	8003764 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	2204      	movs	r2, #4
 800375c:	701a      	strb	r2, [r3, #0]
      break;
 800375e:	e001      	b.n	8003764 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003764:	bf00      	nop
  }
}
 8003766:	bf00      	nop
 8003768:	3728      	adds	r7, #40	; 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800379a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d10b      	bne.n	80037be <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f006 fbcf 	bl	8009f54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d132      	bne.n	800382e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f043 0308 	orr.w	r3, r3, #8
 80037ce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d126      	bne.n	8003828 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d113      	bne.n	800380a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ec:	d106      	bne.n	80037fc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fde9 	bl	80073cc <USB_InitFSLSPClkSel>
 80037fa:	e011      	b.n	8003820 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f003 fde2 	bl	80073cc <USB_InitFSLSPClkSel>
 8003808:	e00a      	b.n	8003820 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d106      	bne.n	8003820 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003818:	461a      	mov	r2, r3
 800381a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800381e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f006 fbc1 	bl	8009fa8 <HAL_HCD_PortEnabled_Callback>
 8003826:	e002      	b.n	800382e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f006 fbcb 	bl	8009fc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b20      	cmp	r3, #32
 8003836:	d103      	bne.n	8003840 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f043 0320 	orr.w	r3, r3, #32
 800383e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003846:	461a      	mov	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e12b      	b.n	8003abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fb10 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b8:	f003 f8cc 	bl	8006a54 <HAL_RCC_GetPCLK1Freq>
 80038bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a81      	ldr	r2, [pc, #516]	; (8003ac8 <HAL_I2C_Init+0x274>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d807      	bhi.n	80038d8 <HAL_I2C_Init+0x84>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a80      	ldr	r2, [pc, #512]	; (8003acc <HAL_I2C_Init+0x278>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bf94      	ite	ls
 80038d0:	2301      	movls	r3, #1
 80038d2:	2300      	movhi	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e006      	b.n	80038e6 <HAL_I2C_Init+0x92>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a7d      	ldr	r2, [pc, #500]	; (8003ad0 <HAL_I2C_Init+0x27c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	bf94      	ite	ls
 80038e0:	2301      	movls	r3, #1
 80038e2:	2300      	movhi	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0e7      	b.n	8003abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a78      	ldr	r2, [pc, #480]	; (8003ad4 <HAL_I2C_Init+0x280>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a6a      	ldr	r2, [pc, #424]	; (8003ac8 <HAL_I2C_Init+0x274>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d802      	bhi.n	8003928 <HAL_I2C_Init+0xd4>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3301      	adds	r3, #1
 8003926:	e009      	b.n	800393c <HAL_I2C_Init+0xe8>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	4a69      	ldr	r2, [pc, #420]	; (8003ad8 <HAL_I2C_Init+0x284>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	3301      	adds	r3, #1
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	430b      	orrs	r3, r1
 8003942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800394e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	495c      	ldr	r1, [pc, #368]	; (8003ac8 <HAL_I2C_Init+0x274>)
 8003958:	428b      	cmp	r3, r1
 800395a:	d819      	bhi.n	8003990 <HAL_I2C_Init+0x13c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e59      	subs	r1, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fbb1 f3f3 	udiv	r3, r1, r3
 800396a:	1c59      	adds	r1, r3, #1
 800396c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003970:	400b      	ands	r3, r1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_I2C_Init+0x138>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1e59      	subs	r1, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fbb1 f3f3 	udiv	r3, r1, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398a:	e051      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 800398c:	2304      	movs	r3, #4
 800398e:	e04f      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d111      	bne.n	80039bc <HAL_I2C_Init+0x168>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e58      	subs	r0, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e012      	b.n	80039e2 <HAL_I2C_Init+0x18e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e58      	subs	r0, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	0099      	lsls	r1, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Init+0x196>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e022      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10e      	bne.n	8003a10 <HAL_I2C_Init+0x1bc>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1e58      	subs	r0, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	440b      	add	r3, r1
 8003a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0e:	e00f      	b.n	8003a30 <HAL_I2C_Init+0x1dc>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	0099      	lsls	r1, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	6809      	ldr	r1, [r1, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6911      	ldr	r1, [r2, #16]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68d2      	ldr	r2, [r2, #12]
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	000186a0 	.word	0x000186a0
 8003acc:	001e847f 	.word	0x001e847f
 8003ad0:	003d08ff 	.word	0x003d08ff
 8003ad4:	431bde83 	.word	0x431bde83
 8003ad8:	10624dd3 	.word	0x10624dd3

08003adc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	817b      	strh	r3, [r7, #10]
 8003aec:	4613      	mov	r3, r2
 8003aee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7fd fc7c 	bl	80013ec <HAL_GetTick>
 8003af4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	f040 80e0 	bne.w	8003cc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4970      	ldr	r1, [pc, #448]	; (8003cd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 fcbc 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0d3      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2C_Master_Transmit+0x50>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0cc      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d007      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a50      	ldr	r2, [pc, #320]	; (8003cd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b94:	8979      	ldrh	r1, [r7, #10]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f001 fb4c 	bl	8005238 <I2C_MasterRequestWrite>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e08d      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bc0:	e066      	b.n	8003c90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6a39      	ldr	r1, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f001 fd36 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d107      	bne.n	8003bea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06b      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11b      	bne.n	8003c64 <HAL_I2C_Master_Transmit+0x188>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d017      	beq.n	8003c64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f001 fd26 	bl	80056ba <I2C_WaitOnBTFFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d107      	bne.n	8003c8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e01a      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d194      	bne.n	8003bc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	00100002 	.word	0x00100002
 8003cd4:	ffff0000 	.word	0xffff0000

08003cd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d003      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x38>
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	f040 80b1 	bne.w	8003e72 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d30:	d003      	beq.n	8003d3a <HAL_I2C_EV_IRQHandler+0x62>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_EV_IRQHandler+0x66>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_EV_IRQHandler+0x68>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f000 8114 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_I2C_EV_IRQHandler+0x90>
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f001 fd4f 	bl	80057fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fcbf 	bl	80046e4 <I2C_Master_SB>
 8003d66:	e083      	b.n	8003e70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_I2C_EV_IRQHandler+0xac>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fd37 	bl	80047f0 <I2C_Master_ADD10>
 8003d82:	e075      	b.n	8003e70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0xc8>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fd53 	bl	8004844 <I2C_Master_ADDR>
 8003d9e:	e067      	b.n	8003e70 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d036      	beq.n	8003e18 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db8:	f000 80db 	beq.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f937 	bl	800404e <I2C_MasterTransmit_TXE>
 8003de0:	e046      	b.n	8003e70 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80c2 	beq.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80bc 	beq.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dfa:	7bbb      	ldrb	r3, [r7, #14]
 8003dfc:	2b21      	cmp	r3, #33	; 0x21
 8003dfe:	d103      	bne.n	8003e08 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f9c0 	bl	8004186 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e06:	e0b4      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	f040 80b1 	bne.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fa2e 	bl	8004272 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e16:	e0ac      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e26:	f000 80a4 	beq.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x178>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x178>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 faa6 	bl	800439a <I2C_MasterReceive_RXNE>
 8003e4e:	e00f      	b.n	8003e70 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 808b 	beq.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8085 	beq.w	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fb51 	bl	8004510 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e6e:	e080      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
 8003e70:	e07f      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e007      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 ff11 	bl	8004ce2 <I2C_Slave_ADDR>
 8003ec0:	e05a      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x206>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 ff4c 	bl	8004d74 <I2C_Slave_STOPF>
 8003edc:	e04c      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	2b21      	cmp	r3, #33	; 0x21
 8003ee2:	d002      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x212>
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	2b29      	cmp	r3, #41	; 0x29
 8003ee8:	d120      	bne.n	8003f2c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_I2C_EV_IRQHandler+0x238>
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_I2C_EV_IRQHandler+0x238>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fe2c 	bl	8004b66 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f0e:	e032      	b.n	8003f76 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02d      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x29e>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d028      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fe5b 	bl	8004be0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f2a:	e024      	b.n	8003f76 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_EV_IRQHandler+0x27a>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_I2C_EV_IRQHandler+0x27a>
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fe69 	bl	8004c22 <I2C_SlaveReceive_RXNE>
 8003f50:	e012      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fe99 	bl	8004c9e <I2C_SlaveReceive_BTF>
 8003f6c:	e004      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	70fb      	strb	r3, [r7, #3]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004064:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d150      	bne.n	8004116 <I2C_MasterTransmit_TXE+0xc8>
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b21      	cmp	r3, #33	; 0x21
 8004078:	d14d      	bne.n	8004116 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d01d      	beq.n	80040bc <I2C_MasterTransmit_TXE+0x6e>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b20      	cmp	r3, #32
 8004084:	d01a      	beq.n	80040bc <I2C_MasterTransmit_TXE+0x6e>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800408c:	d016      	beq.n	80040bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2211      	movs	r2, #17
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff62 	bl	8003f7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ba:	e060      	b.n	800417e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d107      	bne.n	8004106 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff7d 	bl	8003ffe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004104:	e03b      	b.n	800417e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff35 	bl	8003f7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004114:	e033      	b.n	800417e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b21      	cmp	r3, #33	; 0x21
 800411a:	d005      	beq.n	8004128 <I2C_MasterTransmit_TXE+0xda>
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d12d      	bne.n	800417e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b22      	cmp	r3, #34	; 0x22
 8004126:	d12a      	bne.n	800417e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d108      	bne.n	8004144 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004140:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004142:	e01c      	b.n	800417e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d103      	bne.n	8004158 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f88e 	bl	8004272 <I2C_MemoryTransmit_TXE_BTF>
}
 8004156:	e012      	b.n	800417e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800417c:	e7ff      	b.n	800417e <I2C_MasterTransmit_TXE+0x130>
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b21      	cmp	r3, #33	; 0x21
 800419e:	d164      	bne.n	800426a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d012      	beq.n	80041d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041ce:	e04c      	b.n	800426a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d01d      	beq.n	8004212 <I2C_MasterTransmit_BTF+0x8c>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d01a      	beq.n	8004212 <I2C_MasterTransmit_BTF+0x8c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e2:	d016      	beq.n	8004212 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2211      	movs	r2, #17
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff feb7 	bl	8003f7e <HAL_I2C_MasterTxCpltCallback>
}
 8004210:	e02b      	b.n	800426a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004220:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004230:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d107      	bne.n	800425c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fed2 	bl	8003ffe <HAL_I2C_MemTxCpltCallback>
}
 800425a:	e006      	b.n	800426a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fe8a 	bl	8003f7e <HAL_I2C_MasterTxCpltCallback>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11d      	bne.n	80042c6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10b      	bne.n	80042aa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004296:	b2da      	uxtb	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042a8:	e073      	b.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	121b      	asrs	r3, r3, #8
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042c4:	e065      	b.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10b      	bne.n	80042e6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042e4:	e055      	b.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d151      	bne.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b22      	cmp	r3, #34	; 0x22
 80042f2:	d10d      	bne.n	8004310 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004302:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800430e:	e040      	b.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d015      	beq.n	8004346 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b21      	cmp	r3, #33	; 0x21
 800431e:	d112      	bne.n	8004346 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004344:	e025      	b.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d120      	bne.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b21      	cmp	r3, #33	; 0x21
 8004354:	d11d      	bne.n	8004392 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004364:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fe36 	bl	8003ffe <HAL_I2C_MemTxCpltCallback>
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b22      	cmp	r3, #34	; 0x22
 80043ac:	f040 80ac 	bne.w	8004508 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d921      	bls.n	8004402 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	f040 808c 	bne.w	8004508 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004400:	e082      	b.n	8004508 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	2b02      	cmp	r3, #2
 8004408:	d075      	beq.n	80044f6 <I2C_MasterReceive_RXNE+0x15c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <I2C_MasterReceive_RXNE+0x7c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d16f      	bne.n	80044f6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f990 	bl	800573c <I2C_WaitOnSTOPRequestThroughIT>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d142      	bne.n	80044a8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004430:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004440:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d10a      	bne.n	8004492 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fdc1 	bl	8004012 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004490:	e03a      	b.n	8004508 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2212      	movs	r2, #18
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fd76 	bl	8003f92 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044a6:	e02f      	b.n	8004508 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fd99 	bl	8004026 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044f4:	e008      	b.n	8004508 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004504:	605a      	str	r2, [r3, #4]
}
 8004506:	e7ff      	b.n	8004508 <I2C_MasterReceive_RXNE+0x16e>
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b04      	cmp	r3, #4
 8004526:	d11b      	bne.n	8004560 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004536:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800455e:	e0bd      	b.n	80046dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d129      	bne.n	80045be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d00a      	beq.n	8004596 <I2C_MasterReceive_BTF+0x86>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d007      	beq.n	8004596 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045bc:	e08e      	b.n	80046dc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d176      	bne.n	80046b6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d002      	beq.n	80045d4 <I2C_MasterReceive_BTF+0xc4>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d108      	bne.n	80045e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e019      	b.n	800461a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d002      	beq.n	80045f2 <I2C_MasterReceive_BTF+0xe2>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d108      	bne.n	8004604 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e00a      	b.n	800461a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b10      	cmp	r3, #16
 8004608:	d007      	beq.n	800461a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004674:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d10a      	bne.n	80046a0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fcba 	bl	8004012 <HAL_I2C_MemRxCpltCallback>
}
 800469e:	e01d      	b.n	80046dc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2212      	movs	r2, #18
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fc6f 	bl	8003f92 <HAL_I2C_MasterRxCpltCallback>
}
 80046b4:	e012      	b.n	80046dc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d117      	bne.n	8004728 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004710:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004712:	e067      	b.n	80047e4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	611a      	str	r2, [r3, #16]
}
 8004726:	e05d      	b.n	80047e4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004730:	d133      	bne.n	800479a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b21      	cmp	r3, #33	; 0x21
 800473c:	d109      	bne.n	8004752 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800474e:	611a      	str	r2, [r3, #16]
 8004750:	e008      	b.n	8004764 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <I2C_Master_SB+0x92>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d032      	beq.n	80047e4 <I2C_Master_SB+0x100>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d02d      	beq.n	80047e4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004796:	605a      	str	r2, [r3, #4]
}
 8004798:	e024      	b.n	80047e4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10e      	bne.n	80047c0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	11db      	asrs	r3, r3, #7
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f003 0306 	and.w	r3, r3, #6
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f063 030f 	orn	r3, r3, #15
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]
}
 80047be:	e011      	b.n	80047e4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10d      	bne.n	80047e4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	11db      	asrs	r3, r3, #7
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 0306 	and.w	r3, r3, #6
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f063 030e 	orn	r3, r3, #14
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d004      	beq.n	8004816 <I2C_Master_ADD10+0x26>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d108      	bne.n	8004828 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <I2C_Master_ADD10+0x48>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004836:	605a      	str	r2, [r3, #4]
  }
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004844:	b480      	push	{r7}
 8004846:	b091      	sub	sp, #68	; 0x44
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b22      	cmp	r3, #34	; 0x22
 800486c:	f040 8169 	bne.w	8004b42 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <I2C_Master_ADDR+0x54>
 8004878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d10b      	bne.n	8004898 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2300      	movs	r3, #0
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	e160      	b.n	8004b5a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <I2C_Master_ADDR+0x98>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048a8:	d118      	bne.n	80048dc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ce:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50
 80048da:	e13e      	b.n	8004b5a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d113      	bne.n	800490e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e6:	2300      	movs	r3, #0
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e115      	b.n	8004b3a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	f040 808a 	bne.w	8004a2e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004920:	d137      	bne.n	8004992 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004930:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004940:	d113      	bne.n	800496a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	e0e7      	b.n	8004b3a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	623b      	str	r3, [r7, #32]
 800497e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e0d3      	b.n	8004b3a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2b08      	cmp	r3, #8
 8004996:	d02e      	beq.n	80049f6 <I2C_Master_ADDR+0x1b2>
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	2b20      	cmp	r3, #32
 800499c:	d02b      	beq.n	80049f6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	2b12      	cmp	r3, #18
 80049a2:	d102      	bne.n	80049aa <I2C_Master_ADDR+0x166>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d125      	bne.n	80049f6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d00e      	beq.n	80049ce <I2C_Master_ADDR+0x18a>
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d00b      	beq.n	80049ce <I2C_Master_ADDR+0x18a>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d008      	beq.n	80049ce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e007      	b.n	80049de <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	e0a1      	b.n	8004b3a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e085      	b.n	8004b3a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d14d      	bne.n	8004ad4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d016      	beq.n	8004a6c <I2C_Master_ADDR+0x228>
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d013      	beq.n	8004a6c <I2C_Master_ADDR+0x228>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d010      	beq.n	8004a6c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a58:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e007      	b.n	8004a7c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a7a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8a:	d117      	bne.n	8004abc <I2C_Master_ADDR+0x278>
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a92:	d00b      	beq.n	8004aac <I2C_Master_ADDR+0x268>
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d008      	beq.n	8004aac <I2C_Master_ADDR+0x268>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d005      	beq.n	8004aac <I2C_Master_ADDR+0x268>
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d002      	beq.n	8004aac <I2C_Master_ADDR+0x268>
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d107      	bne.n	8004abc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	e032      	b.n	8004b3a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af2:	d117      	bne.n	8004b24 <I2C_Master_ADDR+0x2e0>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004afa:	d00b      	beq.n	8004b14 <I2C_Master_ADDR+0x2d0>
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d008      	beq.n	8004b14 <I2C_Master_ADDR+0x2d0>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d005      	beq.n	8004b14 <I2C_Master_ADDR+0x2d0>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d002      	beq.n	8004b14 <I2C_Master_ADDR+0x2d0>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d107      	bne.n	8004b24 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b40:	e00b      	b.n	8004b5a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	e7ff      	b.n	8004b5a <I2C_Master_ADDR+0x316>
 8004b5a:	bf00      	nop
 8004b5c:	3744      	adds	r7, #68	; 0x44
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02b      	beq.n	8004bd8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d114      	bne.n	8004bd8 <I2C_SlaveTransmit_TXE+0x72>
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b29      	cmp	r3, #41	; 0x29
 8004bb2:	d111      	bne.n	8004bd8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2221      	movs	r2, #33	; 0x21
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2228      	movs	r2, #40	; 0x28
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff f9e7 	bl	8003fa6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d011      	beq.n	8004c16 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d02c      	beq.n	8004c96 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d114      	bne.n	8004c96 <I2C_SlaveReceive_RXNE+0x74>
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c70:	d111      	bne.n	8004c96 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2222      	movs	r2, #34	; 0x22
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2228      	movs	r2, #40	; 0x28
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff f992 	bl	8003fba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cfc:	2b28      	cmp	r3, #40	; 0x28
 8004cfe:	d125      	bne.n	8004d4c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	81bb      	strh	r3, [r7, #12]
 8004d2e:	e002      	b.n	8004d36 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d3e:	89ba      	ldrh	r2, [r7, #12]
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff f942 	bl	8003fce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d4a:	e00e      	b.n	8004d6a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd0:	d172      	bne.n	8004eb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b22      	cmp	r3, #34	; 0x22
 8004dd6:	d002      	beq.n	8004dde <I2C_Slave_STOPF+0x6a>
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b2a      	cmp	r3, #42	; 0x2a
 8004ddc:	d135      	bne.n	8004e4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fc fe84 	bl	8001b24 <HAL_DMA_GetState>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d049      	beq.n	8004eb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4a69      	ldr	r2, [pc, #420]	; (8004fcc <I2C_Slave_STOPF+0x258>)
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fc fccc 	bl	80017cc <HAL_DMA_Abort_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03d      	beq.n	8004eb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e44:	4610      	mov	r0, r2
 8004e46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e48:	e035      	b.n	8004eb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0204 	orr.w	r2, r3, #4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fc fe4e 	bl	8001b24 <HAL_DMA_GetState>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d014      	beq.n	8004eb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	4a4e      	ldr	r2, [pc, #312]	; (8004fcc <I2C_Slave_STOPF+0x258>)
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fc fc96 	bl	80017cc <HAL_DMA_Abort_IT>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4798      	blx	r3
 8004eb4:	e000      	b.n	8004eb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d03e      	beq.n	8004f40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d112      	bne.n	8004ef6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d112      	bne.n	8004f2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f043 0204 	orr.w	r2, r3, #4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f843 	bl	8004fd4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f4e:	e039      	b.n	8004fc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b2a      	cmp	r3, #42	; 0x2a
 8004f54:	d109      	bne.n	8004f6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2228      	movs	r2, #40	; 0x28
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff f828 	bl	8003fba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b28      	cmp	r3, #40	; 0x28
 8004f74:	d111      	bne.n	8004f9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <I2C_Slave_STOPF+0x25c>)
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff f829 	bl	8003fea <HAL_I2C_ListenCpltCallback>
}
 8004f98:	e014      	b.n	8004fc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	2b22      	cmp	r3, #34	; 0x22
 8004fa0:	d002      	beq.n	8004fa8 <I2C_Slave_STOPF+0x234>
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d10d      	bne.n	8004fc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fe fffb 	bl	8003fba <HAL_I2C_SlaveRxCpltCallback>
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	0800533d 	.word	0x0800533d
 8004fd0:	ffff0000 	.word	0xffff0000

08004fd4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d002      	beq.n	8004ff8 <I2C_ITError+0x24>
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d10a      	bne.n	800500e <I2C_ITError+0x3a>
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b22      	cmp	r3, #34	; 0x22
 8004ffc:	d107      	bne.n	800500e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005014:	2b28      	cmp	r3, #40	; 0x28
 8005016:	d107      	bne.n	8005028 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2228      	movs	r2, #40	; 0x28
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005026:	e015      	b.n	8005054 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005036:	d00a      	beq.n	800504e <I2C_ITError+0x7a>
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b60      	cmp	r3, #96	; 0x60
 800503c:	d007      	beq.n	800504e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d162      	bne.n	800512a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005072:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d020      	beq.n	80050c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	4a6a      	ldr	r2, [pc, #424]	; (8005230 <I2C_ITError+0x25c>)
 8005088:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	4618      	mov	r0, r3
 8005090:	f7fc fb9c 	bl	80017cc <HAL_DMA_Abort_IT>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8089 	beq.w	80051ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050be:	4610      	mov	r0, r2
 80050c0:	4798      	blx	r3
 80050c2:	e074      	b.n	80051ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	4a59      	ldr	r2, [pc, #356]	; (8005230 <I2C_ITError+0x25c>)
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fc fb7b 	bl	80017cc <HAL_DMA_Abort_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d068      	beq.n	80051ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d10b      	bne.n	8005102 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
 8005128:	e041      	b.n	80051ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d125      	bne.n	8005182 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d10b      	bne.n	800516a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fe ff5d 	bl	800403a <HAL_I2C_AbortCpltCallback>
 8005180:	e015      	b.n	80051ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d10b      	bne.n	80051a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fe ff3c 	bl	8004026 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10e      	bne.n	80051dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d113      	bne.n	8005228 <I2C_ITError+0x254>
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b28      	cmp	r3, #40	; 0x28
 8005204:	d110      	bne.n	8005228 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <I2C_ITError+0x260>)
 800520a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fe fee1 	bl	8003fea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	0800533d 	.word	0x0800533d
 8005234:	ffff0000 	.word	0xffff0000

08005238 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	460b      	mov	r3, r1
 8005246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d006      	beq.n	8005262 <I2C_MasterRequestWrite+0x2a>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d003      	beq.n	8005262 <I2C_MasterRequestWrite+0x2a>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005260:	d108      	bne.n	8005274 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e00b      	b.n	800528c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	2b12      	cmp	r3, #18
 800527a:	d107      	bne.n	800528c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f8f7 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b2:	d103      	bne.n	80052bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e035      	b.n	800532c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c8:	d108      	bne.n	80052dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ca:	897b      	ldrh	r3, [r7, #10]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d8:	611a      	str	r2, [r3, #16]
 80052da:	e01b      	b.n	8005314 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052dc:	897b      	ldrh	r3, [r7, #10]
 80052de:	11db      	asrs	r3, r3, #7
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 0306 	and.w	r3, r3, #6
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f063 030f 	orn	r3, r3, #15
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	490e      	ldr	r1, [pc, #56]	; (8005334 <I2C_MasterRequestWrite+0xfc>)
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f91d 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e010      	b.n	800532c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4907      	ldr	r1, [pc, #28]	; (8005338 <I2C_MasterRequestWrite+0x100>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f90d 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	00010008 	.word	0x00010008
 8005338:	00010002 	.word	0x00010002

0800533c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005356:	4b4b      	ldr	r3, [pc, #300]	; (8005484 <I2C_DMAAbort+0x148>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	4a4a      	ldr	r2, [pc, #296]	; (8005488 <I2C_DMAAbort+0x14c>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	0a1a      	lsrs	r2, r3, #8
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	00da      	lsls	r2, r3, #3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005382:	e00a      	b.n	800539a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b01      	subs	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d0ea      	beq.n	8005370 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	2200      	movs	r2, #0
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	2200      	movs	r2, #0
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	2200      	movs	r2, #0
 80053de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	2200      	movs	r2, #0
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d10e      	bne.n	800542a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005422:	6978      	ldr	r0, [r7, #20]
 8005424:	f7fe fe09 	bl	800403a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005428:	e027      	b.n	800547a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005430:	2b28      	cmp	r3, #40	; 0x28
 8005432:	d117      	bne.n	8005464 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005452:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2228      	movs	r2, #40	; 0x28
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005462:	e007      	b.n	8005474 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f7fe fdd6 	bl	8004026 <HAL_I2C_ErrorCallback>
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000010 	.word	0x20000010
 8005488:	14f8b589 	.word	0x14f8b589

0800548c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549c:	e025      	b.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d021      	beq.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a6:	f7fb ffa1 	bl	80013ec <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d116      	bne.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e023      	b.n	8005532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	43da      	mvns	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	e00c      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0b6      	beq.n	800549e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005548:	e051      	b.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d123      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e046      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d021      	beq.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fb ff1f 	bl	80013ec <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e020      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e00b      	b.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	43da      	mvns	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d18d      	bne.n	800554a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005644:	e02d      	b.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f8aa 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e02d      	b.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d021      	beq.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	f7fb fec5 	bl	80013ec <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d302      	bcc.n	8005674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d116      	bne.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e007      	b.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d1ca      	bne.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c6:	e02d      	b.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f869 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e02d      	b.n	8005734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d021      	beq.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e0:	f7fb fe84 	bl	80013ec <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e007      	b.n	8005734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d1ca      	bne.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005750:	fba2 2303 	umull	r2, r3, r2, r3
 8005754:	0a1a      	lsrs	r2, r3, #8
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3b01      	subs	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e008      	b.n	800578c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d0e9      	beq.n	800575e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000010 	.word	0x20000010
 800579c:	14f8b589 	.word	0x14f8b589

080057a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d11b      	bne.n	80057f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800580e:	d103      	bne.n	8005818 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005816:	e007      	b.n	8005828 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005820:	d102      	bne.n	8005828 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e128      	b.n	8005a98 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a90      	ldr	r2, [pc, #576]	; (8005aa0 <HAL_I2S_Init+0x26c>)
 800585e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7fb fbd1 	bl	8001008 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800587c:	f023 030f 	bic.w	r3, r3, #15
 8005880:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2202      	movs	r2, #2
 8005888:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d060      	beq.n	8005954 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800589a:	2310      	movs	r3, #16
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e001      	b.n	80058a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058a0:	2320      	movs	r3, #32
 80058a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d802      	bhi.n	80058b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058b2:	2001      	movs	r0, #1
 80058b4:	f001 f9c4 	bl	8006c40 <HAL_RCCEx_GetPeriphCLKFreq>
 80058b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c2:	d125      	bne.n	8005910 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d010      	beq.n	80058ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	3305      	adds	r3, #5
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	e01f      	b.n	800592e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	3305      	adds	r3, #5
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	e00e      	b.n	800592e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	fbb2 f2f3 	udiv	r2, r2, r3
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	461a      	mov	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	3305      	adds	r3, #5
 800592c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4a5c      	ldr	r2, [pc, #368]	; (8005aa4 <HAL_I2S_Init+0x270>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	08db      	lsrs	r3, r3, #3
 8005938:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	e003      	b.n	800595c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005954:	2302      	movs	r3, #2
 8005956:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d902      	bls.n	8005968 <HAL_I2S_Init+0x134>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2bff      	cmp	r3, #255	; 0xff
 8005966:	d907      	bls.n	8005978 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f043 0210 	orr.w	r2, r3, #16
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e08f      	b.n	8005a98 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	ea42 0103 	orr.w	r1, r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	430a      	orrs	r2, r1
 800598a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005996:	f023 030f 	bic.w	r3, r3, #15
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6851      	ldr	r1, [r2, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6892      	ldr	r2, [r2, #8]
 80059a2:	4311      	orrs	r1, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	68d2      	ldr	r2, [r2, #12]
 80059a8:	4311      	orrs	r1, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6992      	ldr	r2, [r2, #24]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d161      	bne.n	8005a88 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a38      	ldr	r2, [pc, #224]	; (8005aa8 <HAL_I2S_Init+0x274>)
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a37      	ldr	r2, [pc, #220]	; (8005aac <HAL_I2S_Init+0x278>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d101      	bne.n	80059d8 <HAL_I2S_Init+0x1a4>
 80059d4:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <HAL_I2S_Init+0x27c>)
 80059d6:	e001      	b.n	80059dc <HAL_I2S_Init+0x1a8>
 80059d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	4932      	ldr	r1, [pc, #200]	; (8005aac <HAL_I2S_Init+0x278>)
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d101      	bne.n	80059ec <HAL_I2S_Init+0x1b8>
 80059e8:	4a31      	ldr	r2, [pc, #196]	; (8005ab0 <HAL_I2S_Init+0x27c>)
 80059ea:	e001      	b.n	80059f0 <HAL_I2S_Init+0x1bc>
 80059ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059f4:	f023 030f 	bic.w	r3, r3, #15
 80059f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <HAL_I2S_Init+0x278>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_I2S_Init+0x1d4>
 8005a04:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <HAL_I2S_Init+0x27c>)
 8005a06:	e001      	b.n	8005a0c <HAL_I2S_Init+0x1d8>
 8005a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <HAL_I2S_Init+0x278>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d101      	bne.n	8005a1e <HAL_I2S_Init+0x1ea>
 8005a1a:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <HAL_I2S_Init+0x27c>)
 8005a1c:	e001      	b.n	8005a22 <HAL_I2S_Init+0x1ee>
 8005a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2e:	d003      	beq.n	8005a38 <HAL_I2S_Init+0x204>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e001      	b.n	8005a44 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a40:	2300      	movs	r3, #0
 8005a42:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	897b      	ldrh	r3, [r7, #10]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a70:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <HAL_I2S_Init+0x278>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2S_Init+0x24c>
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <HAL_I2S_Init+0x27c>)
 8005a7e:	e001      	b.n	8005a84 <HAL_I2S_Init+0x250>
 8005a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a84:	897a      	ldrh	r2, [r7, #10]
 8005a86:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	08005bab 	.word	0x08005bab
 8005aa4:	cccccccd 	.word	0xcccccccd
 8005aa8:	08005cc1 	.word	0x08005cc1
 8005aac:	40003800 	.word	0x40003800
 8005ab0:	40003400 	.word	0x40003400

08005ab4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10e      	bne.n	8005b44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ffb8 	bl	8005ab4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	b292      	uxth	r2, r2
 8005b60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	1c9a      	adds	r2, r3, #2
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10e      	bne.n	8005ba2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ff93 	bl	8005ac8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d13a      	bne.n	8005c3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d109      	bne.n	8005be4 <I2S_IRQHandler+0x3a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d102      	bne.n	8005be4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ffb4 	bl	8005b4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d126      	bne.n	8005c3c <I2S_IRQHandler+0x92>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d11f      	bne.n	8005c3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f043 0202 	orr.w	r2, r3, #2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff50 	bl	8005adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d136      	bne.n	8005cb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d109      	bne.n	8005c66 <I2S_IRQHandler+0xbc>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d102      	bne.n	8005c66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ff45 	bl	8005af0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d122      	bne.n	8005cb6 <I2S_IRQHandler+0x10c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d11b      	bne.n	8005cb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	f043 0204 	orr.w	r2, r3, #4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ff13 	bl	8005adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a92      	ldr	r2, [pc, #584]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d101      	bne.n	8005cde <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005cda:	4b92      	ldr	r3, [pc, #584]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cdc:	e001      	b.n	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a8b      	ldr	r2, [pc, #556]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005cf8:	4b8a      	ldr	r3, [pc, #552]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cfa:	e001      	b.n	8005d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d004      	beq.n	8005d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 8099 	bne.w	8005e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d107      	bne.n	8005d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f925 	bl	8005f7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9c8 	bl	80060dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d13a      	bne.n	8005dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d035      	beq.n	8005dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a6e      	ldr	r2, [pc, #440]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d6a:	4b6e      	ldr	r3, [pc, #440]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d6c:	e001      	b.n	8005d72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4969      	ldr	r1, [pc, #420]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d7a:	428b      	cmp	r3, r1
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d7e:	4b69      	ldr	r3, [pc, #420]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d80:	e001      	b.n	8005d86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f043 0202 	orr.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fe88 	bl	8005adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	f040 80c3 	bne.w	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80bd 	beq.w	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005df2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a49      	ldr	r2, [pc, #292]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005dfe:	4b49      	ldr	r3, [pc, #292]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e00:	e001      	b.n	8005e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4944      	ldr	r1, [pc, #272]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e0e:	428b      	cmp	r3, r1
 8005e10:	d101      	bne.n	8005e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e12:	4b44      	ldr	r3, [pc, #272]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e14:	e001      	b.n	8005e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e1e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e20:	2300      	movs	r3, #0
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fe4a 	bl	8005adc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e48:	e089      	b.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d107      	bne.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8be 	bl	8005fe0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d107      	bne.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8fd 	bl	8006078 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d12f      	bne.n	8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02a      	beq.n	8005ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ea0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eae:	e001      	b.n	8005eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4919      	ldr	r1, [pc, #100]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ec2:	e001      	b.n	8005ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ecc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f043 0202 	orr.w	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fdfa 	bl	8005adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d136      	bne.n	8005f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d031      	beq.n	8005f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d101      	bne.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f08:	e001      	b.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4902      	ldr	r1, [pc, #8]	; (8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f16:	428b      	cmp	r3, r1
 8005f18:	d106      	bne.n	8005f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f1a:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f1c:	e006      	b.n	8005f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f1e:	bf00      	nop
 8005f20:	40003800 	.word	0x40003800
 8005f24:	40003400 	.word	0x40003400
 8005f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f30:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	f043 0204 	orr.w	r2, r3, #4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fdc0 	bl	8005adc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f5c:	e000      	b.n	8005f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f5e:	bf00      	nop
}
 8005f60:	bf00      	nop
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	1c99      	adds	r1, r3, #2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6251      	str	r1, [r2, #36]	; 0x24
 8005f8e:	881a      	ldrh	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d113      	bne.n	8005fd6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ffc9 	bl	8005f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	1c99      	adds	r1, r3, #2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6251      	str	r1, [r2, #36]	; 0x24
 8005ff2:	8819      	ldrh	r1, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	; (8006070 <I2SEx_TxISR_I2SExt+0x90>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <I2SEx_TxISR_I2SExt+0x22>
 8005ffe:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <I2SEx_TxISR_I2SExt+0x94>)
 8006000:	e001      	b.n	8006006 <I2SEx_TxISR_I2SExt+0x26>
 8006002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006006:	460a      	mov	r2, r1
 8006008:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d121      	bne.n	8006066 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <I2SEx_TxISR_I2SExt+0x90>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d101      	bne.n	8006030 <I2SEx_TxISR_I2SExt+0x50>
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <I2SEx_TxISR_I2SExt+0x94>)
 800602e:	e001      	b.n	8006034 <I2SEx_TxISR_I2SExt+0x54>
 8006030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	490d      	ldr	r1, [pc, #52]	; (8006070 <I2SEx_TxISR_I2SExt+0x90>)
 800603c:	428b      	cmp	r3, r1
 800603e:	d101      	bne.n	8006044 <I2SEx_TxISR_I2SExt+0x64>
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <I2SEx_TxISR_I2SExt+0x94>)
 8006042:	e001      	b.n	8006048 <I2SEx_TxISR_I2SExt+0x68>
 8006044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006048:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800604c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ff81 	bl	8005f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40003800 	.word	0x40003800
 8006074:	40003400 	.word	0x40003400

08006078 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68d8      	ldr	r0, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	1c99      	adds	r1, r3, #2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006090:	b282      	uxth	r2, r0
 8006092:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d113      	bne.n	80060d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff ff4a 	bl	8005f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a20      	ldr	r2, [pc, #128]	; (800616c <I2SEx_RxISR_I2SExt+0x90>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <I2SEx_RxISR_I2SExt+0x16>
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <I2SEx_RxISR_I2SExt+0x94>)
 80060f0:	e001      	b.n	80060f6 <I2SEx_RxISR_I2SExt+0x1a>
 80060f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f6:	68d8      	ldr	r0, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	1c99      	adds	r1, r3, #2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006102:	b282      	uxth	r2, r0
 8006104:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d121      	bne.n	8006162 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a12      	ldr	r2, [pc, #72]	; (800616c <I2SEx_RxISR_I2SExt+0x90>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d101      	bne.n	800612c <I2SEx_RxISR_I2SExt+0x50>
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <I2SEx_RxISR_I2SExt+0x94>)
 800612a:	e001      	b.n	8006130 <I2SEx_RxISR_I2SExt+0x54>
 800612c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	490d      	ldr	r1, [pc, #52]	; (800616c <I2SEx_RxISR_I2SExt+0x90>)
 8006138:	428b      	cmp	r3, r1
 800613a:	d101      	bne.n	8006140 <I2SEx_RxISR_I2SExt+0x64>
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <I2SEx_RxISR_I2SExt+0x94>)
 800613e:	e001      	b.n	8006144 <I2SEx_RxISR_I2SExt+0x68>
 8006140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006144:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006148:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff03 	bl	8005f68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40003800 	.word	0x40003800
 8006170:	40003400 	.word	0x40003400

08006174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e267      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d075      	beq.n	800627e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006192:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b04      	cmp	r3, #4
 800619c:	d00c      	beq.n	80061b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619e:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d112      	bne.n	80061d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061aa:	4b82      	ldr	r3, [pc, #520]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b6:	d10b      	bne.n	80061d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b8:	4b7e      	ldr	r3, [pc, #504]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d05b      	beq.n	800627c <HAL_RCC_OscConfig+0x108>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d157      	bne.n	800627c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e242      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d8:	d106      	bne.n	80061e8 <HAL_RCC_OscConfig+0x74>
 80061da:	4b76      	ldr	r3, [pc, #472]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a75      	ldr	r2, [pc, #468]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e01d      	b.n	8006224 <HAL_RCC_OscConfig+0xb0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f0:	d10c      	bne.n	800620c <HAL_RCC_OscConfig+0x98>
 80061f2:	4b70      	ldr	r3, [pc, #448]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a6f      	ldr	r2, [pc, #444]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80061f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6c      	ldr	r2, [pc, #432]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0xb0>
 800620c:	4b69      	ldr	r3, [pc, #420]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a68      	ldr	r2, [pc, #416]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	4b66      	ldr	r3, [pc, #408]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800621e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d013      	beq.n	8006254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7fb f8de 	bl	80013ec <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006234:	f7fb f8da 	bl	80013ec <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	; 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e207      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	4b5b      	ldr	r3, [pc, #364]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0xc0>
 8006252:	e014      	b.n	800627e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fb f8ca 	bl	80013ec <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800625c:	f7fb f8c6 	bl	80013ec <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e1f3      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626e:	4b51      	ldr	r3, [pc, #324]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0xe8>
 800627a:	e000      	b.n	800627e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800627c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d063      	beq.n	8006352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800628a:	4b4a      	ldr	r3, [pc, #296]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006296:	4b47      	ldr	r3, [pc, #284]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d11c      	bne.n	80062dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062a2:	4b44      	ldr	r3, [pc, #272]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d116      	bne.n	80062dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ae:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_RCC_OscConfig+0x152>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d001      	beq.n	80062c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e1c7      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c6:	4b3b      	ldr	r3, [pc, #236]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4937      	ldr	r1, [pc, #220]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062da:	e03a      	b.n	8006352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e4:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <HAL_RCC_OscConfig+0x244>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fb f87f 	bl	80013ec <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f2:	f7fb f87b 	bl	80013ec <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e1a8      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006304:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b28      	ldr	r3, [pc, #160]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4925      	ldr	r1, [pc, #148]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006320:	4313      	orrs	r3, r2
 8006322:	600b      	str	r3, [r1, #0]
 8006324:	e015      	b.n	8006352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006326:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <HAL_RCC_OscConfig+0x244>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fb f85e 	bl	80013ec <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006334:	f7fb f85a 	bl	80013ec <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e187      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d036      	beq.n	80063cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006366:	4b15      	ldr	r3, [pc, #84]	; (80063bc <HAL_RCC_OscConfig+0x248>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fb f83e 	bl	80013ec <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006374:	f7fb f83a 	bl	80013ec <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e167      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_OscConfig+0x240>)
 8006388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x200>
 8006392:	e01b      	b.n	80063cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_OscConfig+0x248>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800639a:	f7fb f827 	bl	80013ec <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a0:	e00e      	b.n	80063c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a2:	f7fb f823 	bl	80013ec <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d907      	bls.n	80063c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e150      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
 80063b4:	40023800 	.word	0x40023800
 80063b8:	42470000 	.word	0x42470000
 80063bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c0:	4b88      	ldr	r3, [pc, #544]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ea      	bne.n	80063a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8097 	beq.w	8006508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063de:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	4b7d      	ldr	r3, [pc, #500]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	4a7c      	ldr	r2, [pc, #496]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6413      	str	r3, [r2, #64]	; 0x40
 80063fa:	4b7a      	ldr	r3, [pc, #488]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640a:	4b77      	ldr	r3, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d118      	bne.n	8006448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006416:	4b74      	ldr	r3, [pc, #464]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a73      	ldr	r2, [pc, #460]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006422:	f7fa ffe3 	bl	80013ec <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642a:	f7fa ffdf 	bl	80013ec <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e10c      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643c:	4b6a      	ldr	r3, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x474>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d106      	bne.n	800645e <HAL_RCC_OscConfig+0x2ea>
 8006450:	4b64      	ldr	r3, [pc, #400]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006454:	4a63      	ldr	r2, [pc, #396]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	6713      	str	r3, [r2, #112]	; 0x70
 800645c:	e01c      	b.n	8006498 <HAL_RCC_OscConfig+0x324>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b05      	cmp	r3, #5
 8006464:	d10c      	bne.n	8006480 <HAL_RCC_OscConfig+0x30c>
 8006466:	4b5f      	ldr	r3, [pc, #380]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	4a5e      	ldr	r2, [pc, #376]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 800646c:	f043 0304 	orr.w	r3, r3, #4
 8006470:	6713      	str	r3, [r2, #112]	; 0x70
 8006472:	4b5c      	ldr	r3, [pc, #368]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6713      	str	r3, [r2, #112]	; 0x70
 800647e:	e00b      	b.n	8006498 <HAL_RCC_OscConfig+0x324>
 8006480:	4b58      	ldr	r3, [pc, #352]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006484:	4a57      	ldr	r2, [pc, #348]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	6713      	str	r3, [r2, #112]	; 0x70
 800648c:	4b55      	ldr	r3, [pc, #340]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006492:	f023 0304 	bic.w	r3, r3, #4
 8006496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d015      	beq.n	80064cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fa ffa4 	bl	80013ec <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a6:	e00a      	b.n	80064be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064a8:	f7fa ffa0 	bl	80013ec <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e0cb      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064be:	4b49      	ldr	r3, [pc, #292]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0ee      	beq.n	80064a8 <HAL_RCC_OscConfig+0x334>
 80064ca:	e014      	b.n	80064f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064cc:	f7fa ff8e 	bl	80013ec <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d4:	f7fa ff8a 	bl	80013ec <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e0b5      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ea:	4b3e      	ldr	r3, [pc, #248]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ee      	bne.n	80064d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d105      	bne.n	8006508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	4a38      	ldr	r2, [pc, #224]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a1 	beq.w	8006654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006512:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
 800651a:	2b08      	cmp	r3, #8
 800651c:	d05c      	beq.n	80065d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d141      	bne.n	80065aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006526:	4b31      	ldr	r3, [pc, #196]	; (80065ec <HAL_RCC_OscConfig+0x478>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fa ff5e 	bl	80013ec <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006534:	f7fa ff5a 	bl	80013ec <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e087      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	019b      	lsls	r3, r3, #6
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	3b01      	subs	r3, #1
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	491b      	ldr	r1, [pc, #108]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <HAL_RCC_OscConfig+0x478>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006582:	f7fa ff33 	bl	80013ec <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658a:	f7fa ff2f 	bl	80013ec <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e05c      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659c:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0f0      	beq.n	800658a <HAL_RCC_OscConfig+0x416>
 80065a8:	e054      	b.n	8006654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <HAL_RCC_OscConfig+0x478>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b0:	f7fa ff1c 	bl	80013ec <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b8:	f7fa ff18 	bl	80013ec <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e045      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <HAL_RCC_OscConfig+0x470>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x444>
 80065d6:	e03d      	b.n	8006654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d107      	bne.n	80065f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e038      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40007000 	.word	0x40007000
 80065ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x4ec>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d028      	beq.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d121      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006616:	429a      	cmp	r2, r3
 8006618:	d11a      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006628:	4293      	cmp	r3, r2
 800662a:	d111      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	3b01      	subs	r3, #1
 800663a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d107      	bne.n	8006650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800

08006664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0cc      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006678:	4b68      	ldr	r3, [pc, #416]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d90c      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006686:	4b65      	ldr	r3, [pc, #404]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668e:	4b63      	ldr	r3, [pc, #396]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0b8      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d020      	beq.n	80066ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b8:	4b59      	ldr	r3, [pc, #356]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4a58      	ldr	r2, [pc, #352]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066d0:	4b53      	ldr	r3, [pc, #332]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a52      	ldr	r2, [pc, #328]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066dc:	4b50      	ldr	r3, [pc, #320]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	494d      	ldr	r1, [pc, #308]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d044      	beq.n	8006784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d107      	bne.n	8006712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006702:	4b47      	ldr	r3, [pc, #284]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d119      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e07f      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d003      	beq.n	8006722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671e:	2b03      	cmp	r3, #3
 8006720:	d107      	bne.n	8006732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	4b3f      	ldr	r3, [pc, #252]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e06f      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006732:	4b3b      	ldr	r3, [pc, #236]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e067      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006742:	4b37      	ldr	r3, [pc, #220]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f023 0203 	bic.w	r2, r3, #3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	4934      	ldr	r1, [pc, #208]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	4313      	orrs	r3, r2
 8006752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006754:	f7fa fe4a 	bl	80013ec <HAL_GetTick>
 8006758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675a:	e00a      	b.n	8006772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675c:	f7fa fe46 	bl	80013ec <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	; 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e04f      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006772:	4b2b      	ldr	r3, [pc, #172]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 020c 	and.w	r2, r3, #12
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	429a      	cmp	r2, r3
 8006782:	d1eb      	bne.n	800675c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d20c      	bcs.n	80067ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b22      	ldr	r3, [pc, #136]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800679a:	4b20      	ldr	r3, [pc, #128]	; (800681c <HAL_RCC_ClockConfig+0x1b8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e032      	b.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b8:	4b19      	ldr	r3, [pc, #100]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4916      	ldr	r1, [pc, #88]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	490e      	ldr	r1, [pc, #56]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067ea:	f000 f821 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	490a      	ldr	r1, [pc, #40]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 80067fc:	5ccb      	ldrb	r3, [r1, r3]
 80067fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCC_ClockConfig+0x1c8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7fa fdaa 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40023c00 	.word	0x40023c00
 8006820:	40023800 	.word	0x40023800
 8006824:	0800ad64 	.word	0x0800ad64
 8006828:	20000010 	.word	0x20000010
 800682c:	20000014 	.word	0x20000014

08006830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006834:	b094      	sub	sp, #80	; 0x50
 8006836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	647b      	str	r3, [r7, #68]	; 0x44
 800683c:	2300      	movs	r3, #0
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006840:	2300      	movs	r3, #0
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006848:	4b79      	ldr	r3, [pc, #484]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b08      	cmp	r3, #8
 8006852:	d00d      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0x40>
 8006854:	2b08      	cmp	r3, #8
 8006856:	f200 80e1 	bhi.w	8006a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x34>
 800685e:	2b04      	cmp	r3, #4
 8006860:	d003      	beq.n	800686a <HAL_RCC_GetSysClockFreq+0x3a>
 8006862:	e0db      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006864:	4b73      	ldr	r3, [pc, #460]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006866:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006868:	e0db      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800686a:	4b73      	ldr	r3, [pc, #460]	; (8006a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800686c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800686e:	e0d8      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006870:	4b6f      	ldr	r3, [pc, #444]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006878:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800687a:	4b6d      	ldr	r3, [pc, #436]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d063      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006886:	4b6a      	ldr	r3, [pc, #424]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	099b      	lsrs	r3, r3, #6
 800688c:	2200      	movs	r2, #0
 800688e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
 800689a:	2300      	movs	r3, #0
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
 800689e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068a2:	4622      	mov	r2, r4
 80068a4:	462b      	mov	r3, r5
 80068a6:	f04f 0000 	mov.w	r0, #0
 80068aa:	f04f 0100 	mov.w	r1, #0
 80068ae:	0159      	lsls	r1, r3, #5
 80068b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068b4:	0150      	lsls	r0, r2, #5
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4621      	mov	r1, r4
 80068bc:	1a51      	subs	r1, r2, r1
 80068be:	6139      	str	r1, [r7, #16]
 80068c0:	4629      	mov	r1, r5
 80068c2:	eb63 0301 	sbc.w	r3, r3, r1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068d4:	4659      	mov	r1, fp
 80068d6:	018b      	lsls	r3, r1, #6
 80068d8:	4651      	mov	r1, sl
 80068da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068de:	4651      	mov	r1, sl
 80068e0:	018a      	lsls	r2, r1, #6
 80068e2:	4651      	mov	r1, sl
 80068e4:	ebb2 0801 	subs.w	r8, r2, r1
 80068e8:	4659      	mov	r1, fp
 80068ea:	eb63 0901 	sbc.w	r9, r3, r1
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006902:	4690      	mov	r8, r2
 8006904:	4699      	mov	r9, r3
 8006906:	4623      	mov	r3, r4
 8006908:	eb18 0303 	adds.w	r3, r8, r3
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	462b      	mov	r3, r5
 8006910:	eb49 0303 	adc.w	r3, r9, r3
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006922:	4629      	mov	r1, r5
 8006924:	024b      	lsls	r3, r1, #9
 8006926:	4621      	mov	r1, r4
 8006928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800692c:	4621      	mov	r1, r4
 800692e:	024a      	lsls	r2, r1, #9
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006936:	2200      	movs	r2, #0
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
 800693a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006940:	f7f9 fc96 	bl	8000270 <__aeabi_uldivmod>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4613      	mov	r3, r2
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694c:	e058      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800694e:	4b38      	ldr	r3, [pc, #224]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	099b      	lsrs	r3, r3, #6
 8006954:	2200      	movs	r2, #0
 8006956:	4618      	mov	r0, r3
 8006958:	4611      	mov	r1, r2
 800695a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800695e:	623b      	str	r3, [r7, #32]
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	f04f 0000 	mov.w	r0, #0
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	0159      	lsls	r1, r3, #5
 8006976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800697a:	0150      	lsls	r0, r2, #5
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4641      	mov	r1, r8
 8006982:	ebb2 0a01 	subs.w	sl, r2, r1
 8006986:	4649      	mov	r1, r9
 8006988:	eb63 0b01 	sbc.w	fp, r3, r1
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800699c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069a0:	ebb2 040a 	subs.w	r4, r2, sl
 80069a4:	eb63 050b 	sbc.w	r5, r3, fp
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	00eb      	lsls	r3, r5, #3
 80069b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b6:	00e2      	lsls	r2, r4, #3
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	18e3      	adds	r3, r4, r3
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	464b      	mov	r3, r9
 80069c4:	eb45 0303 	adc.w	r3, r5, r3
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069d6:	4629      	mov	r1, r5
 80069d8:	028b      	lsls	r3, r1, #10
 80069da:	4621      	mov	r1, r4
 80069dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069e0:	4621      	mov	r1, r4
 80069e2:	028a      	lsls	r2, r1, #10
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ea:	2200      	movs	r2, #0
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	61fa      	str	r2, [r7, #28]
 80069f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f4:	f7f9 fc3c 	bl	8000270 <__aeabi_uldivmod>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4613      	mov	r3, r2
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3750      	adds	r7, #80	; 0x50
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800
 8006a34:	00f42400 	.word	0x00f42400
 8006a38:	007a1200 	.word	0x007a1200

08006a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a42:	681b      	ldr	r3, [r3, #0]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000010 	.word	0x20000010

08006a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a58:	f7ff fff0 	bl	8006a3c <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	0a9b      	lsrs	r3, r3, #10
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4903      	ldr	r1, [pc, #12]	; (8006a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40023800 	.word	0x40023800
 8006a78:	0800ad74 	.word	0x0800ad74

08006a7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d035      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa4:	4b62      	ldr	r3, [pc, #392]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aaa:	f7fa fc9f 	bl	80013ec <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ab2:	f7fa fc9b 	bl	80013ec <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e0b0      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ac4:	4b5b      	ldr	r3, [pc, #364]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f0      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	019a      	lsls	r2, r3, #6
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	071b      	lsls	r3, r3, #28
 8006adc:	4955      	ldr	r1, [pc, #340]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ae4:	4b52      	ldr	r3, [pc, #328]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aea:	f7fa fc7f 	bl	80013ec <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006af2:	f7fa fc7b 	bl	80013ec <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e090      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b04:	4b4b      	ldr	r3, [pc, #300]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8083 	beq.w	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	4b44      	ldr	r3, [pc, #272]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	4a43      	ldr	r2, [pc, #268]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2e:	4b41      	ldr	r3, [pc, #260]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b3a:	4b3f      	ldr	r3, [pc, #252]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a3e      	ldr	r2, [pc, #248]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b46:	f7fa fc51 	bl	80013ec <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b4e:	f7fa fc4d 	bl	80013ec <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e062      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b60:	4b35      	ldr	r3, [pc, #212]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0f0      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b6c:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d02f      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d028      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b9a:	4b28      	ldr	r3, [pc, #160]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ba0:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ba6:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d114      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bb2:	f7fa fc1b 	bl	80013ec <HAL_GetTick>
 8006bb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bba:	f7fa fc17 	bl	80013ec <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e02a      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd0:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0ee      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be8:	d10d      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfe:	490d      	ldr	r1, [pc, #52]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	608b      	str	r3, [r1, #8]
 8006c04:	e005      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c10:	6093      	str	r3, [r2, #8]
 8006c12:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c1e:	4905      	ldr	r1, [pc, #20]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	42470068 	.word	0x42470068
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40007000 	.word	0x40007000
 8006c3c:	42470e40 	.word	0x42470e40

08006c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d13e      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c5e:	4b23      	ldr	r3, [pc, #140]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d12f      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c74:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c76:	617b      	str	r3, [r7, #20]
          break;
 8006c78:	e02f      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c86:	d108      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c88:	4b18      	ldr	r3, [pc, #96]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	e007      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca2:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006caa:	4b10      	ldr	r3, [pc, #64]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb0:	099b      	lsrs	r3, r3, #6
 8006cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	fb02 f303 	mul.w	r3, r2, r3
 8006cbc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc4:	0f1b      	lsrs	r3, r3, #28
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd0:	617b      	str	r3, [r7, #20]
          break;
 8006cd2:	e002      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
          break;
 8006cd8:	bf00      	nop
        }
      }
      break;
 8006cda:	bf00      	nop
    }
  }
  return frequency;
 8006cdc:	697b      	ldr	r3, [r7, #20]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	00bb8000 	.word	0x00bb8000
 8006cf4:	007a1200 	.word	0x007a1200
 8006cf8:	00f42400 	.word	0x00f42400

08006cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e07b      	b.n	8006e06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d108      	bne.n	8006d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d1e:	d009      	beq.n	8006d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	61da      	str	r2, [r3, #28]
 8006d26:	e005      	b.n	8006d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa f9da 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	ea42 0103 	orr.w	r1, r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	0c1b      	lsrs	r3, r3, #16
 8006dd2:	f003 0104 	and.w	r1, r3, #4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0210 	and.w	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e0e:	b084      	sub	sp, #16
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	f107 001c 	add.w	r0, r7, #28
 8006e1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d122      	bne.n	8006e6c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d105      	bne.n	8006e60 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f9bf 	bl	80071e4 <USB_CoreReset>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e01a      	b.n	8006ea2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f9b3 	bl	80071e4 <USB_CoreReset>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
 8006e94:	e005      	b.n	8006ea2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10b      	bne.n	8006ec0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f043 0206 	orr.w	r2, r3, #6
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ecc:	b004      	add	sp, #16
 8006ece:	4770      	bx	lr

08006ed0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f043 0201 	orr.w	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f023 0201 	bic.w	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d115      	bne.n	8006f62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f42:	2001      	movs	r0, #1
 8006f44:	f7fa fa5e 	bl	8001404 <HAL_Delay>
      ms++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f939 	bl	80071c6 <USB_GetMode>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d01e      	beq.n	8006f98 <USB_SetCurrentMode+0x84>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b31      	cmp	r3, #49	; 0x31
 8006f5e:	d9f0      	bls.n	8006f42 <USB_SetCurrentMode+0x2e>
 8006f60:	e01a      	b.n	8006f98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d115      	bne.n	8006f94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7fa fa45 	bl	8001404 <HAL_Delay>
      ms++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f920 	bl	80071c6 <USB_GetMode>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <USB_SetCurrentMode+0x84>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b31      	cmp	r3, #49	; 0x31
 8006f90:	d9f0      	bls.n	8006f74 <USB_SetCurrentMode+0x60>
 8006f92:	e001      	b.n	8006f98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e005      	b.n	8006fa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b32      	cmp	r3, #50	; 0x32
 8006f9c:	d101      	bne.n	8006fa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a13      	ldr	r2, [pc, #76]	; (8007010 <USB_FlushTxFifo+0x64>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e01b      	b.n	8007004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	daf2      	bge.n	8006fba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	019b      	lsls	r3, r3, #6
 8006fdc:	f043 0220 	orr.w	r2, r3, #32
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4a08      	ldr	r2, [pc, #32]	; (8007010 <USB_FlushTxFifo+0x64>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e006      	b.n	8007004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d0f0      	beq.n	8006fe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	00030d40 	.word	0x00030d40

08007014 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <USB_FlushRxFifo+0x5c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e018      	b.n	8007064 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	daf2      	bge.n	8007020 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2210      	movs	r2, #16
 8007042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4a08      	ldr	r2, [pc, #32]	; (8007070 <USB_FlushRxFifo+0x5c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e006      	b.n	8007064 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0310 	and.w	r3, r3, #16
 800705e:	2b10      	cmp	r3, #16
 8007060:	d0f0      	beq.n	8007044 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	00030d40 	.word	0x00030d40

08007074 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4611      	mov	r1, r2
 8007080:	461a      	mov	r2, r3
 8007082:	460b      	mov	r3, r1
 8007084:	71fb      	strb	r3, [r7, #7]
 8007086:	4613      	mov	r3, r2
 8007088:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d123      	bne.n	80070e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800709a:	88bb      	ldrh	r3, [r7, #4]
 800709c:	3303      	adds	r3, #3
 800709e:	089b      	lsrs	r3, r3, #2
 80070a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e018      	b.n	80070da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	031a      	lsls	r2, r3, #12
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b4:	461a      	mov	r2, r3
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	3301      	adds	r3, #1
 80070c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3301      	adds	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3301      	adds	r3, #1
 80070d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3e2      	bcc.n	80070a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3724      	adds	r7, #36	; 0x24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b08b      	sub	sp, #44	; 0x2c
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	089b      	lsrs	r3, r3, #2
 800710a:	b29b      	uxth	r3, r3
 800710c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007116:	2300      	movs	r3, #0
 8007118:	623b      	str	r3, [r7, #32]
 800711a:	e014      	b.n	8007146 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	601a      	str	r2, [r3, #0]
    pDest++;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	3301      	adds	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	3301      	adds	r3, #1
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	3301      	adds	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	3301      	adds	r3, #1
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	3301      	adds	r3, #1
 8007144:	623b      	str	r3, [r7, #32]
 8007146:	6a3a      	ldr	r2, [r7, #32]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	429a      	cmp	r2, r3
 800714c:	d3e6      	bcc.n	800711c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800714e:	8bfb      	ldrh	r3, [r7, #30]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01e      	beq.n	8007192 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	461a      	mov	r2, r3
 8007160:	f107 0310 	add.w	r3, r7, #16
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	fa22 f303 	lsr.w	r3, r2, r3
 8007174:	b2da      	uxtb	r2, r3
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	701a      	strb	r2, [r3, #0]
      i++;
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	3301      	adds	r3, #1
 800717e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	3301      	adds	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007186:	8bfb      	ldrh	r3, [r7, #30]
 8007188:	3b01      	subs	r3, #1
 800718a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800718c:	8bfb      	ldrh	r3, [r7, #30]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1ea      	bne.n	8007168 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007194:	4618      	mov	r0, r3
 8007196:	372c      	adds	r7, #44	; 0x2c
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4013      	ands	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071b8:	68fb      	ldr	r3, [r7, #12]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f003 0301 	and.w	r3, r3, #1
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a13      	ldr	r2, [pc, #76]	; (8007248 <USB_CoreReset+0x64>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e01b      	b.n	800723a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	daf2      	bge.n	80071f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f043 0201 	orr.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a09      	ldr	r2, [pc, #36]	; (8007248 <USB_CoreReset+0x64>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e006      	b.n	800723a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d0f0      	beq.n	800721a <USB_CoreReset+0x36>

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	00030d40 	.word	0x00030d40

0800724c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800724c:	b084      	sub	sp, #16
 800724e:	b580      	push	{r7, lr}
 8007250:	b086      	sub	sp, #24
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800725a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d018      	beq.n	80072d4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10a      	bne.n	80072be <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	e014      	b.n	80072e8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072cc:	f023 0304 	bic.w	r3, r3, #4
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e009      	b.n	80072e8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072e2:	f023 0304 	bic.w	r3, r3, #4
 80072e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072e8:	2110      	movs	r1, #16
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fe5e 	bl	8006fac <USB_FlushTxFifo>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fe8a 	bl	8007014 <USB_FlushRxFifo>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	e015      	b.n	800733c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731c:	461a      	mov	r2, r3
 800731e:	f04f 33ff 	mov.w	r3, #4294967295
 8007322:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3301      	adds	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d3e5      	bcc.n	8007310 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f04f 32ff 	mov.w	r2, #4294967295
 8007350:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007364:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <USB_HostInit+0x16c>)
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <USB_HostInit+0x170>)
 8007370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007374:	e009      	b.n	800738a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2280      	movs	r2, #128	; 0x80
 800737a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a10      	ldr	r2, [pc, #64]	; (80073c0 <USB_HostInit+0x174>)
 8007380:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a0f      	ldr	r2, [pc, #60]	; (80073c4 <USB_HostInit+0x178>)
 8007386:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f043 0210 	orr.w	r2, r3, #16
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <USB_HostInit+0x17c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b4:	b004      	add	sp, #16
 80073b6:	4770      	bx	lr
 80073b8:	01000200 	.word	0x01000200
 80073bc:	00e00300 	.word	0x00e00300
 80073c0:	00600080 	.word	0x00600080
 80073c4:	004000e0 	.word	0x004000e0
 80073c8:	a3200008 	.word	0xa3200008

080073cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007404:	4313      	orrs	r3, r2
 8007406:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d107      	bne.n	800741e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007414:	461a      	mov	r2, r3
 8007416:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800741a:	6053      	str	r3, [r2, #4]
 800741c:	e009      	b.n	8007432 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d106      	bne.n	8007432 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742a:	461a      	mov	r2, r3
 800742c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007430:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007460:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800746a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007470:	2064      	movs	r0, #100	; 0x64
 8007472:	f7f9 ffc7 	bl	8001404 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800747e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007482:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007484:	200a      	movs	r0, #10
 8007486:	f7f9 ffbd 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d109      	bne.n	80074d8 <USB_DriveVbus+0x44>
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d106      	bne.n	80074d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e2:	d109      	bne.n	80074f8 <USB_DriveVbus+0x64>
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	0c5b      	lsrs	r3, r3, #17
 8007524:	f003 0303 	and.w	r3, r3, #3
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	b29b      	uxth	r3, r3
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	461a      	mov	r2, r3
 8007566:	4603      	mov	r3, r0
 8007568:	70fb      	strb	r3, [r7, #3]
 800756a:	460b      	mov	r3, r1
 800756c:	70bb      	strb	r3, [r7, #2]
 800756e:	4613      	mov	r3, r2
 8007570:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4413      	add	r3, r2
 8007582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007586:	461a      	mov	r2, r3
 8007588:	f04f 33ff 	mov.w	r3, #4294967295
 800758c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800758e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007592:	2b03      	cmp	r3, #3
 8007594:	d87e      	bhi.n	8007694 <USB_HC_Init+0x13c>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <USB_HC_Init+0x44>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	08007657 	.word	0x08007657
 80075a4:	080075ad 	.word	0x080075ad
 80075a8:	08007619 	.word	0x08007619
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b8:	461a      	mov	r2, r3
 80075ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80075be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80075c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	da10      	bge.n	80075ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80075e8:	e057      	b.n	800769a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d051      	beq.n	800769a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	440a      	add	r2, r1
 800760c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007610:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007614:	60d3      	str	r3, [r2, #12]
      break;
 8007616:	e040      	b.n	800769a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007624:	461a      	mov	r2, r3
 8007626:	f240 639d 	movw	r3, #1693	; 0x69d
 800762a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800762c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007630:	2b00      	cmp	r3, #0
 8007632:	da34      	bge.n	800769e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	4413      	add	r3, r2
 800763c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	440a      	add	r2, r1
 800764a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007652:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007654:	e023      	b.n	800769e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007662:	461a      	mov	r2, r3
 8007664:	f240 2325 	movw	r3, #549	; 0x225
 8007668:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800766a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800766e:	2b00      	cmp	r3, #0
 8007670:	da17      	bge.n	80076a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800768c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007690:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007692:	e006      	b.n	80076a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	77fb      	strb	r3, [r7, #31]
      break;
 8007698:	e004      	b.n	80076a4 <USB_HC_Init+0x14c>
      break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <USB_HC_Init+0x14c>
      break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <USB_HC_Init+0x14c>
      break;
 80076a2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076be:	f043 0302 	orr.w	r3, r3, #2
 80076c2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	2101      	movs	r1, #1
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	6939      	ldr	r1, [r7, #16]
 80076da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076de:	4313      	orrs	r3, r2
 80076e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80076ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da03      	bge.n	80076fe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80076f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e001      	b.n	8007702 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff feff 	bl	8007506 <USB_GetHostSpeed>
 8007708:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800770a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800770e:	2b02      	cmp	r3, #2
 8007710:	d106      	bne.n	8007720 <USB_HC_Init+0x1c8>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d003      	beq.n	8007720 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e001      	b.n	8007724 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007724:	787b      	ldrb	r3, [r7, #1]
 8007726:	059b      	lsls	r3, r3, #22
 8007728:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800772c:	78bb      	ldrb	r3, [r7, #2]
 800772e:	02db      	lsls	r3, r3, #11
 8007730:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007734:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007736:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800773a:	049b      	lsls	r3, r3, #18
 800773c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007740:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007742:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007744:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007748:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	0159      	lsls	r1, r3, #5
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	440b      	add	r3, r1
 8007756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007760:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007762:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007766:	2b03      	cmp	r3, #3
 8007768:	d003      	beq.n	8007772 <USB_HC_Init+0x21a>
 800776a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10f      	bne.n	8007792 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	440a      	add	r2, r1
 8007788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800778c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007790:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007792:	7ffb      	ldrb	r3, [r7, #31]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08c      	sub	sp, #48	; 0x30
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80077b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d02d      	beq.n	8007822 <USB_HC_StartXfer+0x86>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	791b      	ldrb	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d129      	bne.n	8007822 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d117      	bne.n	8007804 <USB_HC_StartXfer+0x68>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	79db      	ldrb	r3, [r3, #7]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <USB_HC_StartXfer+0x48>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	79db      	ldrb	r3, [r3, #7]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d10f      	bne.n	8007804 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	6a3a      	ldr	r2, [r7, #32]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <USB_HC_StartXfer+0x86>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	795b      	ldrb	r3, [r3, #5]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d107      	bne.n	8007822 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	4619      	mov	r1, r3
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 fa0f 	bl	8007c3c <USB_DoPing>
      return HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	e0f8      	b.n	8007a14 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d018      	beq.n	800785c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	8912      	ldrh	r2, [r2, #8]
 8007832:	4413      	add	r3, r2
 8007834:	3b01      	subs	r3, #1
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	8912      	ldrh	r2, [r2, #8]
 800783a:	fbb3 f3f2 	udiv	r3, r3, r2
 800783e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007840:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007842:	8b7b      	ldrh	r3, [r7, #26]
 8007844:	429a      	cmp	r2, r3
 8007846:	d90b      	bls.n	8007860 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007848:	8b7b      	ldrh	r3, [r7, #26]
 800784a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800784c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	8912      	ldrh	r2, [r2, #8]
 8007852:	fb03 f202 	mul.w	r2, r3, r2
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	611a      	str	r2, [r3, #16]
 800785a:	e001      	b.n	8007860 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800785c:	2301      	movs	r3, #1
 800785e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	78db      	ldrb	r3, [r3, #3]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	8912      	ldrh	r2, [r2, #8]
 800786e:	fb03 f202 	mul.w	r2, r3, r2
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	e003      	b.n	8007880 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800788a:	04d9      	lsls	r1, r3, #19
 800788c:	4b63      	ldr	r3, [pc, #396]	; (8007a1c <USB_HC_StartXfer+0x280>)
 800788e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007890:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	7a9b      	ldrb	r3, [r3, #10]
 8007896:	075b      	lsls	r3, r3, #29
 8007898:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800789c:	69f9      	ldr	r1, [r7, #28]
 800789e:	0148      	lsls	r0, r1, #5
 80078a0:	6a39      	ldr	r1, [r7, #32]
 80078a2:	4401      	add	r1, r0
 80078a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	68d9      	ldr	r1, [r3, #12]
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c2:	460a      	mov	r2, r1
 80078c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bf0c      	ite	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	2300      	movne	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	4413      	add	r3, r2
 8007906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	7e7b      	ldrb	r3, [r7, #25]
 800790e:	075b      	lsls	r3, r3, #29
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	0148      	lsls	r0, r1, #5
 8007914:	6a39      	ldr	r1, [r7, #32]
 8007916:	4401      	add	r1, r0
 8007918:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800791c:	4313      	orrs	r3, r2
 800791e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	4413      	add	r3, r2
 8007928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007936:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	78db      	ldrb	r3, [r3, #3]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	e003      	b.n	8007952 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007950:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007958:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007966:	461a      	mov	r2, r3
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	e04e      	b.n	8007a14 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	78db      	ldrb	r3, [r3, #3]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d149      	bne.n	8007a12 <USB_HC_StartXfer+0x276>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d045      	beq.n	8007a12 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	79db      	ldrb	r3, [r3, #7]
 800798a:	2b03      	cmp	r3, #3
 800798c:	d830      	bhi.n	80079f0 <USB_HC_StartXfer+0x254>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <USB_HC_StartXfer+0x1f8>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079c9 	.word	0x080079c9
 800799c:	080079a5 	.word	0x080079a5
 80079a0:	080079c9 	.word	0x080079c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	3303      	adds	r3, #3
 80079aa:	089b      	lsrs	r3, r3, #2
 80079ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079ae:	8afa      	ldrh	r2, [r7, #22]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d91c      	bls.n	80079f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f043 0220 	orr.w	r2, r3, #32
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80079c6:	e015      	b.n	80079f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	3303      	adds	r3, #3
 80079ce:	089b      	lsrs	r3, r3, #2
 80079d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079d2:	8afa      	ldrh	r2, [r7, #22]
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	429a      	cmp	r2, r3
 80079e0:	d90a      	bls.n	80079f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80079ee:	e003      	b.n	80079f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80079f0:	bf00      	nop
 80079f2:	e002      	b.n	80079fa <USB_HC_StartXfer+0x25e>
        break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <USB_HC_StartXfer+0x25e>
        break;
 80079f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	68d9      	ldr	r1, [r3, #12]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	785a      	ldrb	r2, [r3, #1]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2000      	movs	r0, #0
 8007a0a:	9000      	str	r0, [sp, #0]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff fb31 	bl	8007074 <USB_WritePacket>
  }

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3728      	adds	r7, #40	; 0x28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	1ff80000 	.word	0x1ff80000

08007a20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	b29b      	uxth	r3, r3
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b089      	sub	sp, #36	; 0x24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	0c9b      	lsrs	r3, r3, #18
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	0fdb      	lsrs	r3, r3, #31
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d104      	bne.n	8007a9c <USB_HC_Halt+0x5a>
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e0c8      	b.n	8007c2e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <USB_HC_Halt+0x66>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d163      	bne.n	8007b70 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 80ab 	bne.w	8007c2c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d133      	bne.n	8007b4a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b20:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b2e:	d81d      	bhi.n	8007b6c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b46:	d0ec      	beq.n	8007b22 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b48:	e070      	b.n	8007c2c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	0151      	lsls	r1, r2, #5
 8007b5c:	69fa      	ldr	r2, [r7, #28]
 8007b5e:	440a      	add	r2, r1
 8007b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b6a:	e05f      	b.n	8007c2c <USB_HC_Halt+0x1ea>
            break;
 8007b6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b6e:	e05d      	b.n	8007c2c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d133      	bne.n	8007c08 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bbe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bde:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bec:	d81d      	bhi.n	8007c2a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c04:	d0ec      	beq.n	8007be0 <USB_HC_Halt+0x19e>
 8007c06:	e011      	b.n	8007c2c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	e000      	b.n	8007c2c <USB_HC_Halt+0x1ea>
          break;
 8007c2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3724      	adds	r7, #36	; 0x24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007c50:	2301      	movs	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	04da      	lsls	r2, r3, #19
 8007c58:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <USB_DoPing+0x74>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	1ff80000 	.word	0x1ff80000

08007cb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff f912 	bl	8006ef2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cce:	2110      	movs	r1, #16
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff f96b 	bl	8006fac <USB_FlushTxFifo>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff f997 	bl	8007014 <USB_FlushRxFifo>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e01f      	b.n	8007d36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	3301      	adds	r3, #1
 8007d34:	61bb      	str	r3, [r7, #24]
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2b0f      	cmp	r3, #15
 8007d3a:	d9dc      	bls.n	8007cf6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	e034      	b.n	8007dac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d76:	461a      	mov	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d88:	d80c      	bhi.n	8007da4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da0:	d0ec      	beq.n	8007d7c <USB_StopHost+0xc8>
 8007da2:	e000      	b.n	8007da6 <USB_StopHost+0xf2>
        break;
 8007da4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	3301      	adds	r3, #1
 8007daa:	61bb      	str	r3, [r7, #24]
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2b0f      	cmp	r3, #15
 8007db0:	d9c7      	bls.n	8007d42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db8:	461a      	mov	r2, r3
 8007dba:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff f881 	bl	8006ed0 <USB_EnableGlobalInt>

  return ret;
 8007dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007dd8:	b590      	push	{r4, r7, lr}
 8007dda:	b089      	sub	sp, #36	; 0x24
 8007ddc:	af04      	add	r7, sp, #16
 8007dde:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007de0:	2301      	movs	r3, #1
 8007de2:	2202      	movs	r2, #2
 8007de4:	2102      	movs	r1, #2
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fc66 	bl	80086b8 <USBH_FindInterface>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2bff      	cmp	r3, #255	; 0xff
 8007df4:	d002      	beq.n	8007dfc <USBH_CDC_InterfaceInit+0x24>
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d901      	bls.n	8007e00 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e13d      	b.n	800807c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc3b 	bl	8008680 <USBH_SelectInterface>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e14:	2302      	movs	r3, #2
 8007e16:	e131      	b.n	800807c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007e1e:	2050      	movs	r0, #80	; 0x50
 8007e20:	f002 fad2 	bl	800a3c8 <malloc>
 8007e24:	4603      	mov	r3, r0
 8007e26:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e11f      	b.n	800807c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007e3c:	2250      	movs	r2, #80	; 0x50
 8007e3e:	2100      	movs	r1, #0
 8007e40:	68b8      	ldr	r0, [r7, #8]
 8007e42:	f002 fb9d 	bl	800a580 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	211a      	movs	r1, #26
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	b25b      	sxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da15      	bge.n	8007e8a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	211a      	movs	r1, #26
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e6e:	781a      	ldrb	r2, [r3, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	211a      	movs	r1, #26
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e84:	881a      	ldrh	r2, [r3, #0]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 ff2e 	bl	8009cf2 <USBH_AllocPipe>
 8007e96:	4603      	mov	r3, r0
 8007e98:	461a      	mov	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	7819      	ldrb	r1, [r3, #0]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	7858      	ldrb	r0, [r3, #1]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	8952      	ldrh	r2, [r2, #10]
 8007eb6:	9202      	str	r2, [sp, #8]
 8007eb8:	2203      	movs	r2, #3
 8007eba:	9201      	str	r2, [sp, #4]
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f001 fee6 	bl	8009c94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 f9f5 	bl	800a2c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	210a      	movs	r1, #10
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fbeb 	bl	80086b8 <USBH_FindInterface>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2bff      	cmp	r3, #255	; 0xff
 8007eea:	d002      	beq.n	8007ef2 <USBH_CDC_InterfaceInit+0x11a>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d901      	bls.n	8007ef6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e0c2      	b.n	800807c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	211a      	movs	r1, #26
 8007efc:	fb01 f303 	mul.w	r3, r1, r3
 8007f00:	4413      	add	r3, r2
 8007f02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b25b      	sxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da16      	bge.n	8007f3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	211a      	movs	r1, #26
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	4413      	add	r3, r2
 8007f1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	211a      	movs	r1, #26
 8007f2a:	fb01 f303 	mul.w	r3, r1, r3
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f34:	881a      	ldrh	r2, [r3, #0]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	835a      	strh	r2, [r3, #26]
 8007f3a:	e015      	b.n	8007f68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	211a      	movs	r1, #26
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	211a      	movs	r1, #26
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f62:	881a      	ldrh	r2, [r3, #0]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	211a      	movs	r1, #26
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	4413      	add	r3, r2
 8007f74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da16      	bge.n	8007fae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	211a      	movs	r1, #26
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	211a      	movs	r1, #26
 8007f9c:	fb01 f303 	mul.w	r3, r1, r3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007fa6:	881a      	ldrh	r2, [r3, #0]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	835a      	strh	r2, [r3, #26]
 8007fac:	e015      	b.n	8007fda <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	211a      	movs	r1, #26
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007fbe:	781a      	ldrb	r2, [r3, #0]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	211a      	movs	r1, #26
 8007fca:	fb01 f303 	mul.w	r3, r1, r3
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007fd4:	881a      	ldrh	r2, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	7b9b      	ldrb	r3, [r3, #14]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fe86 	bl	8009cf2 <USBH_AllocPipe>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	7bdb      	ldrb	r3, [r3, #15]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 fe7c 	bl	8009cf2 <USBH_AllocPipe>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	7b59      	ldrb	r1, [r3, #13]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	7b98      	ldrb	r0, [r3, #14]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	8b12      	ldrh	r2, [r2, #24]
 800801a:	9202      	str	r2, [sp, #8]
 800801c:	2202      	movs	r2, #2
 800801e:	9201      	str	r2, [sp, #4]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	4623      	mov	r3, r4
 8008024:	4602      	mov	r2, r0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fe34 	bl	8009c94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	7b19      	ldrb	r1, [r3, #12]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	7bd8      	ldrb	r0, [r3, #15]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	8b52      	ldrh	r2, [r2, #26]
 8008044:	9202      	str	r2, [sp, #8]
 8008046:	2202      	movs	r2, #2
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4623      	mov	r3, r4
 800804e:	4602      	mov	r2, r0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fe1f 	bl	8009c94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	7b5b      	ldrb	r3, [r3, #13]
 8008062:	2200      	movs	r2, #0
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f002 f92a 	bl	800a2c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	7b1b      	ldrb	r3, [r3, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f002 f923 	bl	800a2c0 <USBH_LL_SetToggle>

  return USBH_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	bd90      	pop	{r4, r7, pc}

08008084 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fe14 	bl	8009cd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 fe3f 	bl	8009d34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	7b1b      	ldrb	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00e      	beq.n	80080e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	7b1b      	ldrb	r3, [r3, #12]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fe01 	bl	8009cd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	7b1b      	ldrb	r3, [r3, #12]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fe2c 	bl	8009d34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	7b5b      	ldrb	r3, [r3, #13]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00e      	beq.n	8008108 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	7b5b      	ldrb	r3, [r3, #13]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fdee 	bl	8009cd2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	7b5b      	ldrb	r3, [r3, #13]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fe19 	bl	8009d34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	4618      	mov	r0, r3
 800811e:	f002 f95b 	bl	800a3d8 <free>
    phost->pActiveClass->pData = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008128:	2200      	movs	r2, #0
 800812a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3340      	adds	r3, #64	; 0x40
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8b1 	bl	80082b6 <GetLineCoding>
 8008154:	4603      	mov	r3, r0
 8008156:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008158:	7afb      	ldrb	r3, [r7, #11]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008164:	2102      	movs	r1, #2
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800816a:	7afb      	ldrb	r3, [r7, #11]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008194:	2b04      	cmp	r3, #4
 8008196:	d877      	bhi.n	8008288 <USBH_CDC_Process+0x114>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <USBH_CDC_Process+0x2c>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081b5 	.word	0x080081b5
 80081a4:	080081bb 	.word	0x080081bb
 80081a8:	080081eb 	.word	0x080081eb
 80081ac:	0800825f 	.word	0x0800825f
 80081b0:	0800826d 	.word	0x0800826d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	e06d      	b.n	8008296 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f897 	bl	80082f4 <SetLineCoding>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80081d8:	e058      	b.n	800828c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d055      	beq.n	800828c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2204      	movs	r2, #4
 80081e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80081e8:	e050      	b.n	800828c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3340      	adds	r3, #64	; 0x40
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f860 	bl	80082b6 <GetLineCoding>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d126      	bne.n	800824e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008212:	791b      	ldrb	r3, [r3, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	d13b      	bne.n	8008290 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008222:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008224:	429a      	cmp	r2, r3
 8008226:	d133      	bne.n	8008290 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008232:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008234:	429a      	cmp	r2, r3
 8008236:	d12b      	bne.n	8008290 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008240:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008242:	429a      	cmp	r2, r3
 8008244:	d124      	bne.n	8008290 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f958 	bl	80084fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800824c:	e020      	b.n	8008290 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d01d      	beq.n	8008290 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2204      	movs	r2, #4
 8008258:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800825c:	e018      	b.n	8008290 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f867 	bl	8008332 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f8da 	bl	800841e <CDC_ProcessReception>
      break;
 800826a:	e014      	b.n	8008296 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 ffef 	bl	8009252 <USBH_ClrFeature>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008286:	e005      	b.n	8008294 <USBH_CDC_Process+0x120>

    default:
      break;
 8008288:	bf00      	nop
 800828a:	e004      	b.n	8008296 <USBH_CDC_Process+0x122>
      break;
 800828c:	bf00      	nop
 800828e:	e002      	b.n	8008296 <USBH_CDC_Process+0x122>
      break;
 8008290:	bf00      	nop
 8008292:	e000      	b.n	8008296 <USBH_CDC_Process+0x122>
      break;
 8008294:	bf00      	nop

  }

  return status;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	22a1      	movs	r2, #161	; 0xa1
 80082c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2221      	movs	r2, #33	; 0x21
 80082ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2207      	movs	r2, #7
 80082dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2207      	movs	r2, #7
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fa83 	bl	80097f0 <USBH_CtlReq>
 80082ea:	4603      	mov	r3, r0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2221      	movs	r2, #33	; 0x21
 8008302:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2207      	movs	r2, #7
 800831a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2207      	movs	r2, #7
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fa64 	bl	80097f0 <USBH_CtlReq>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b086      	sub	sp, #24
 8008336:	af02      	add	r7, sp, #8
 8008338:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008344:	2300      	movs	r3, #0
 8008346:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800834e:	2b01      	cmp	r3, #1
 8008350:	d002      	beq.n	8008358 <CDC_ProcessTransmission+0x26>
 8008352:	2b02      	cmp	r3, #2
 8008354:	d023      	beq.n	800839e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008356:	e05e      	b.n	8008416 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	8b12      	ldrh	r2, [r2, #24]
 8008360:	4293      	cmp	r3, r2
 8008362:	d90b      	bls.n	800837c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	69d9      	ldr	r1, [r3, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8b1a      	ldrh	r2, [r3, #24]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	7b5b      	ldrb	r3, [r3, #13]
 8008370:	2001      	movs	r0, #1
 8008372:	9000      	str	r0, [sp, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fc4a 	bl	8009c0e <USBH_BulkSendData>
 800837a:	e00b      	b.n	8008394 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	7b5b      	ldrb	r3, [r3, #13]
 800838a:	2001      	movs	r0, #1
 800838c:	9000      	str	r0, [sp, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fc3d 	bl	8009c0e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800839c:	e03b      	b.n	8008416 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	7b5b      	ldrb	r3, [r3, #13]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 ff61 	bl	800a26c <USBH_LL_GetURBState>
 80083aa:	4603      	mov	r3, r0
 80083ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80083ae:	7afb      	ldrb	r3, [r7, #11]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d128      	bne.n	8008406 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	8b12      	ldrh	r2, [r2, #24]
 80083bc:	4293      	cmp	r3, r2
 80083be:	d90e      	bls.n	80083de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	8b12      	ldrh	r2, [r2, #24]
 80083c8:	1a9a      	subs	r2, r3, r2
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	8b12      	ldrh	r2, [r2, #24]
 80083d6:	441a      	add	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	61da      	str	r2, [r3, #28]
 80083dc:	e002      	b.n	80083e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80083f4:	e00e      	b.n	8008414 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f868 	bl	80084d4 <USBH_CDC_TransmitCallback>
      break;
 8008404:	e006      	b.n	8008414 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d103      	bne.n	8008414 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008414:	bf00      	nop
  }
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b086      	sub	sp, #24
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008430:	2300      	movs	r3, #0
 8008432:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800843a:	2b03      	cmp	r3, #3
 800843c:	d002      	beq.n	8008444 <CDC_ProcessReception+0x26>
 800843e:	2b04      	cmp	r3, #4
 8008440:	d00e      	beq.n	8008460 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008442:	e043      	b.n	80084cc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6a19      	ldr	r1, [r3, #32]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	8b5a      	ldrh	r2, [r3, #26]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	7b1b      	ldrb	r3, [r3, #12]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fc01 	bl	8009c58 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2204      	movs	r2, #4
 800845a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800845e:	e035      	b.n	80084cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	7b1b      	ldrb	r3, [r3, #12]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 ff00 	bl	800a26c <USBH_LL_GetURBState>
 800846c:	4603      	mov	r3, r0
 800846e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008470:	7cfb      	ldrb	r3, [r7, #19]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d129      	bne.n	80084ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	7b1b      	ldrb	r3, [r3, #12]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 fe63 	bl	800a148 <USBH_LL_GetLastXferSize>
 8008482:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	429a      	cmp	r2, r3
 800848c:	d016      	beq.n	80084bc <CDC_ProcessReception+0x9e>
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	8b5b      	ldrh	r3, [r3, #26]
 8008492:	461a      	mov	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4293      	cmp	r3, r2
 8008498:	d910      	bls.n	80084bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1ad2      	subs	r2, r2, r3
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	6a1a      	ldr	r2, [r3, #32]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	441a      	add	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2203      	movs	r2, #3
 80084b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80084ba:	e006      	b.n	80084ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f80f 	bl	80084e8 <USBH_CDC_ReceiveCallback>
      break;
 80084ca:	bf00      	nop
  }
}
 80084cc:	bf00      	nop
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008524:	2302      	movs	r3, #2
 8008526:	e029      	b.n	800857c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	79fa      	ldrb	r2, [r7, #7]
 800852c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f81f 	bl	8008584 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f001 fd33 	bl	8009fe0 <USBH_LL_Init>

  return USBH_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e009      	b.n	80085aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	33e0      	adds	r3, #224	; 0xe0
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	2200      	movs	r2, #0
 80085a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b0f      	cmp	r3, #15
 80085ae:	d9f2      	bls.n	8008596 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e009      	b.n	80085ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	3301      	adds	r3, #1
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d0:	d3f1      	bcc.n	80085b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2240      	movs	r2, #64	; 0x40
 80085f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d016      	beq.n	800866e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10e      	bne.n	8008668 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008650:	1c59      	adds	r1, r3, #1
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	33de      	adds	r3, #222	; 0xde
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73fb      	strb	r3, [r7, #15]
 8008666:	e004      	b.n	8008672 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	73fb      	strb	r3, [r7, #15]
 800866c:	e001      	b.n	8008672 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800866e:	2302      	movs	r3, #2
 8008670:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	429a      	cmp	r2, r3
 800869a:	d204      	bcs.n	80086a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80086a4:	e001      	b.n	80086aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80086a6:	2302      	movs	r3, #2
 80086a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	70fb      	strb	r3, [r7, #3]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70bb      	strb	r3, [r7, #2]
 80086ce:	4613      	mov	r3, r2
 80086d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80086e2:	e025      	b.n	8008730 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	221a      	movs	r2, #26
 80086e8:	fb02 f303 	mul.w	r3, r2, r3
 80086ec:	3308      	adds	r3, #8
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	3302      	adds	r3, #2
 80086f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	795b      	ldrb	r3, [r3, #5]
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d002      	beq.n	8008706 <USBH_FindInterface+0x4e>
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	2bff      	cmp	r3, #255	; 0xff
 8008704:	d111      	bne.n	800872a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800870a:	78ba      	ldrb	r2, [r7, #2]
 800870c:	429a      	cmp	r2, r3
 800870e:	d002      	beq.n	8008716 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008710:	78bb      	ldrb	r3, [r7, #2]
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d109      	bne.n	800872a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800871a:	787a      	ldrb	r2, [r7, #1]
 800871c:	429a      	cmp	r2, r3
 800871e:	d002      	beq.n	8008726 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008720:	787b      	ldrb	r3, [r7, #1]
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d101      	bne.n	800872a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	e006      	b.n	8008738 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	3301      	adds	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d9d6      	bls.n	80086e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008736:	23ff      	movs	r3, #255	; 0xff
}
 8008738:	4618      	mov	r0, r3
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fc83 	bl	800a058 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008752:	2101      	movs	r1, #1
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 fd9c 	bl	800a292 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af04      	add	r7, sp, #16
 800876a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800876c:	2302      	movs	r3, #2
 800876e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b01      	cmp	r3, #1
 800877e:	d102      	bne.n	8008786 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2203      	movs	r2, #3
 8008784:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b0b      	cmp	r3, #11
 800878e:	f200 81be 	bhi.w	8008b0e <USBH_Process+0x3aa>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBH_Process+0x34>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087c9 	.word	0x080087c9
 800879c:	080087fb 	.word	0x080087fb
 80087a0:	08008863 	.word	0x08008863
 80087a4:	08008aa9 	.word	0x08008aa9
 80087a8:	08008b0f 	.word	0x08008b0f
 80087ac:	08008907 	.word	0x08008907
 80087b0:	08008a4f 	.word	0x08008a4f
 80087b4:	0800893d 	.word	0x0800893d
 80087b8:	0800895d 	.word	0x0800895d
 80087bc:	0800897d 	.word	0x0800897d
 80087c0:	080089c1 	.word	0x080089c1
 80087c4:	08008a91 	.word	0x08008a91
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 819e 	beq.w	8008b12 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80087dc:	20c8      	movs	r0, #200	; 0xc8
 80087de:	f001 fd9f 	bl	800a320 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 fc95 	bl	800a112 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087f8:	e18b      	b.n	8008b12 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008800:	2b01      	cmp	r3, #1
 8008802:	d107      	bne.n	8008814 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008812:	e18d      	b.n	8008b30 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800881a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800881e:	d914      	bls.n	800884a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008826:	3301      	adds	r3, #1
 8008828:	b2da      	uxtb	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008836:	2b03      	cmp	r3, #3
 8008838:	d903      	bls.n	8008842 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	220d      	movs	r2, #13
 800883e:	701a      	strb	r2, [r3, #0]
      break;
 8008840:	e176      	b.n	8008b30 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]
      break;
 8008848:	e172      	b.n	8008b30 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008850:	f103 020a 	add.w	r2, r3, #10
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800885a:	200a      	movs	r0, #10
 800885c:	f001 fd60 	bl	800a320 <USBH_Delay>
      break;
 8008860:	e166      	b.n	8008b30 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008872:	2104      	movs	r1, #4
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008878:	2064      	movs	r0, #100	; 0x64
 800887a:	f001 fd51 	bl	800a320 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fc20 	bl	800a0c4 <USBH_LL_GetSpeed>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2205      	movs	r2, #5
 8008892:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008894:	2100      	movs	r1, #0
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 fa2b 	bl	8009cf2 <USBH_AllocPipe>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 fa23 	bl	8009cf2 <USBH_AllocPipe>
 80088ac:	4603      	mov	r3, r0
 80088ae:	461a      	mov	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7919      	ldrb	r1, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80088c8:	b292      	uxth	r2, r2
 80088ca:	9202      	str	r2, [sp, #8]
 80088cc:	2200      	movs	r2, #0
 80088ce:	9201      	str	r2, [sp, #4]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4603      	mov	r3, r0
 80088d4:	2280      	movs	r2, #128	; 0x80
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f9dc 	bl	8009c94 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7959      	ldrb	r1, [r3, #5]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80088f0:	b292      	uxth	r2, r2
 80088f2:	9202      	str	r2, [sp, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	9201      	str	r2, [sp, #4]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	4603      	mov	r3, r0
 80088fc:	2200      	movs	r2, #0
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 f9c8 	bl	8009c94 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008904:	e114      	b.n	8008b30 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f918 	bl	8008b3c <USBH_HandleEnum>
 800890c:	4603      	mov	r3, r0
 800890e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	f040 80fe 	bne.w	8008b16 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008928:	2b01      	cmp	r3, #1
 800892a:	d103      	bne.n	8008934 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2208      	movs	r2, #8
 8008930:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008932:	e0f0      	b.n	8008b16 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2207      	movs	r2, #7
 8008938:	701a      	strb	r2, [r3, #0]
      break;
 800893a:	e0ec      	b.n	8008b16 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80e9 	beq.w	8008b1a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800894e:	2101      	movs	r1, #1
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2208      	movs	r2, #8
 8008958:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800895a:	e0de      	b.n	8008b1a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008962:	b29b      	uxth	r3, r3
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fc2c 	bl	80091c4 <USBH_SetCfg>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 80d5 	bne.w	8008b1e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2209      	movs	r2, #9
 8008978:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800897a:	e0d0      	b.n	8008b1e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008982:	f003 0320 	and.w	r3, r3, #32
 8008986:	2b00      	cmp	r3, #0
 8008988:	d016      	beq.n	80089b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800898a:	2101      	movs	r1, #1
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc3c 	bl	800920a <USBH_SetFeature>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	220a      	movs	r2, #10
 80089a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089a4:	e0bd      	b.n	8008b22 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	f040 80b9 	bne.w	8008b22 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	220a      	movs	r2, #10
 80089b4:	701a      	strb	r2, [r3, #0]
      break;
 80089b6:	e0b4      	b.n	8008b22 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	220a      	movs	r2, #10
 80089bc:	701a      	strb	r2, [r3, #0]
      break;
 80089be:	e0b0      	b.n	8008b22 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80ad 	beq.w	8008b26 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
 80089d8:	e016      	b.n	8008a08 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	32de      	adds	r2, #222	; 0xde
 80089e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e4:	791a      	ldrb	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d108      	bne.n	8008a02 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80089f0:	7bfa      	ldrb	r2, [r7, #15]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	32de      	adds	r2, #222	; 0xde
 80089f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008a00:	e005      	b.n	8008a0e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	3301      	adds	r3, #1
 8008a06:	73fb      	strb	r3, [r7, #15]
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0e5      	beq.n	80089da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d016      	beq.n	8008a46 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	4798      	blx	r3
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2206      	movs	r2, #6
 8008a2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a36:	2103      	movs	r1, #3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a3c:	e073      	b.n	8008b26 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	220d      	movs	r2, #13
 8008a42:	701a      	strb	r2, [r3, #0]
      break;
 8008a44:	e06f      	b.n	8008b26 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	220d      	movs	r2, #13
 8008a4a:	701a      	strb	r2, [r3, #0]
      break;
 8008a4c:	e06b      	b.n	8008b26 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d017      	beq.n	8008a88 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	4798      	blx	r3
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	220b      	movs	r2, #11
 8008a74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a76:	e058      	b.n	8008b2a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d154      	bne.n	8008b2a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	220d      	movs	r2, #13
 8008a84:	701a      	strb	r2, [r3, #0]
      break;
 8008a86:	e050      	b.n	8008b2a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	220d      	movs	r2, #13
 8008a8c:	701a      	strb	r2, [r3, #0]
      break;
 8008a8e:	e04c      	b.n	8008b2a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d049      	beq.n	8008b2e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
      }
      break;
 8008aa6:	e042      	b.n	8008b2e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fd67 	bl	8008584 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ae4:	2105      	movs	r1, #5
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d107      	bne.n	8008b06 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff fe20 	bl	8008744 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b04:	e014      	b.n	8008b30 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 faa6 	bl	800a058 <USBH_LL_Start>
      break;
 8008b0c:	e010      	b.n	8008b30 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008b0e:	bf00      	nop
 8008b10:	e00e      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b12:	bf00      	nop
 8008b14:	e00c      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b16:	bf00      	nop
 8008b18:	e00a      	b.n	8008b30 <USBH_Process+0x3cc>
    break;
 8008b1a:	bf00      	nop
 8008b1c:	e008      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b1e:	bf00      	nop
 8008b20:	e006      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b22:	bf00      	nop
 8008b24:	e004      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <USBH_Process+0x3cc>
      break;
 8008b2e:	bf00      	nop
  }
  return USBH_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	2b07      	cmp	r3, #7
 8008b52:	f200 81c1 	bhi.w	8008ed8 <USBH_HandleEnum+0x39c>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBH_HandleEnum+0x20>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008c3b 	.word	0x08008c3b
 8008b64:	08008ca5 	.word	0x08008ca5
 8008b68:	08008d33 	.word	0x08008d33
 8008b6c:	08008d9d 	.word	0x08008d9d
 8008b70:	08008e0d 	.word	0x08008e0d
 8008b74:	08008e53 	.word	0x08008e53
 8008b78:	08008e99 	.word	0x08008e99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008b7c:	2108      	movs	r1, #8
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa50 	bl	8009024 <USBH_Get_DevDesc>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d130      	bne.n	8008bf0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7919      	ldrb	r1, [r3, #4]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008bb2:	b292      	uxth	r2, r2
 8008bb4:	9202      	str	r2, [sp, #8]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	9201      	str	r2, [sp, #4]
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2280      	movs	r2, #128	; 0x80
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f867 	bl	8009c94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7959      	ldrb	r1, [r3, #5]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bda:	b292      	uxth	r2, r2
 8008bdc:	9202      	str	r2, [sp, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	9201      	str	r2, [sp, #4]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	4603      	mov	r3, r0
 8008be6:	2200      	movs	r2, #0
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f853 	bl	8009c94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008bee:	e175      	b.n	8008edc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	f040 8172 	bne.w	8008edc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bfe:	3301      	adds	r3, #1
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d903      	bls.n	8008c1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	220d      	movs	r2, #13
 8008c16:	701a      	strb	r2, [r3, #0]
      break;
 8008c18:	e160      	b.n	8008edc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	795b      	ldrb	r3, [r3, #5]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f887 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	791b      	ldrb	r3, [r3, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f881 	bl	8009d34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
      break;
 8008c38:	e150      	b.n	8008edc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008c3a:	2112      	movs	r1, #18
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f9f1 	bl	8009024 <USBH_Get_DevDesc>
 8008c42:	4603      	mov	r3, r0
 8008c44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c52:	e145      	b.n	8008ee0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	f040 8142 	bne.w	8008ee0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c62:	3301      	adds	r3, #1
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d903      	bls.n	8008c7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	220d      	movs	r2, #13
 8008c7a:	701a      	strb	r2, [r3, #0]
      break;
 8008c7c:	e130      	b.n	8008ee0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	795b      	ldrb	r3, [r3, #5]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 f855 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	791b      	ldrb	r3, [r3, #4]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f84f 	bl	8009d34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
      break;
 8008ca2:	e11d      	b.n	8008ee0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa68 	bl	800917c <USBH_SetAddress>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d132      	bne.n	8008d1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008cb6:	2002      	movs	r0, #2
 8008cb8:	f001 fb32 	bl	800a320 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7919      	ldrb	r1, [r3, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008cde:	b292      	uxth	r2, r2
 8008ce0:	9202      	str	r2, [sp, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	9201      	str	r2, [sp, #4]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2280      	movs	r2, #128	; 0x80
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 ffd1 	bl	8009c94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	7959      	ldrb	r1, [r3, #5]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d06:	b292      	uxth	r2, r2
 8008d08:	9202      	str	r2, [sp, #8]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	9201      	str	r2, [sp, #4]
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	4603      	mov	r3, r0
 8008d12:	2200      	movs	r2, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 ffbd 	bl	8009c94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d1a:	e0e3      	b.n	8008ee4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	f040 80e0 	bne.w	8008ee4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	220d      	movs	r2, #13
 8008d28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	705a      	strb	r2, [r3, #1]
      break;
 8008d30:	e0d8      	b.n	8008ee4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008d32:	2109      	movs	r1, #9
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f99d 	bl	8009074 <USBH_Get_CfgDesc>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2204      	movs	r2, #4
 8008d48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d4a:	e0cd      	b.n	8008ee8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	f040 80ca 	bne.w	8008ee8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d903      	bls.n	8008d76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	220d      	movs	r2, #13
 8008d72:	701a      	strb	r2, [r3, #0]
      break;
 8008d74:	e0b8      	b.n	8008ee8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	795b      	ldrb	r3, [r3, #5]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 ffd9 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	791b      	ldrb	r3, [r3, #4]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 ffd3 	bl	8009d34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
      break;
 8008d9a:	e0a5      	b.n	8008ee8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f965 	bl	8009074 <USBH_Get_CfgDesc>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d103      	bne.n	8008dbc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2205      	movs	r2, #5
 8008db8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dba:	e097      	b.n	8008eec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	f040 8094 	bne.w	8008eec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dca:	3301      	adds	r3, #1
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d903      	bls.n	8008de6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	220d      	movs	r2, #13
 8008de2:	701a      	strb	r2, [r3, #0]
      break;
 8008de4:	e082      	b.n	8008eec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	795b      	ldrb	r3, [r3, #5]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 ffa1 	bl	8009d34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 ff9b 	bl	8009d34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
      break;
 8008e0a:	e06f      	b.n	8008eec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d019      	beq.n	8008e4a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e22:	23ff      	movs	r3, #255	; 0xff
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f949 	bl	80090bc <USBH_Get_StringDesc>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2206      	movs	r2, #6
 8008e38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e3a:	e059      	b.n	8008ef0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d156      	bne.n	8008ef0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2206      	movs	r2, #6
 8008e46:	705a      	strb	r2, [r3, #1]
      break;
 8008e48:	e052      	b.n	8008ef0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2206      	movs	r2, #6
 8008e4e:	705a      	strb	r2, [r3, #1]
      break;
 8008e50:	e04e      	b.n	8008ef0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d019      	beq.n	8008e90 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008e68:	23ff      	movs	r3, #255	; 0xff
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f926 	bl	80090bc <USBH_Get_StringDesc>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2207      	movs	r2, #7
 8008e7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e80:	e038      	b.n	8008ef4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d135      	bne.n	8008ef4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2207      	movs	r2, #7
 8008e8c:	705a      	strb	r2, [r3, #1]
      break;
 8008e8e:	e031      	b.n	8008ef4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2207      	movs	r2, #7
 8008e94:	705a      	strb	r2, [r3, #1]
      break;
 8008e96:	e02d      	b.n	8008ef4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008eae:	23ff      	movs	r3, #255	; 0xff
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f903 	bl	80090bc <USBH_Get_StringDesc>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ec4:	e018      	b.n	8008ef8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d115      	bne.n	8008ef8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed0:	e012      	b.n	8008ef8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed6:	e00f      	b.n	8008ef8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008ed8:	bf00      	nop
 8008eda:	e00e      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008edc:	bf00      	nop
 8008ede:	e00c      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008ee0:	bf00      	nop
 8008ee2:	e00a      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008ee4:	bf00      	nop
 8008ee6:	e008      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008ee8:	bf00      	nop
 8008eea:	e006      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008eec:	bf00      	nop
 8008eee:	e004      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e002      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e000      	b.n	8008efa <USBH_HandleEnum+0x3be>
      break;
 8008ef8:	bf00      	nop
  }
  return Status;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f804 	bl	8008f46 <USBH_HandleSof>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b0b      	cmp	r3, #11
 8008f56:	d10a      	bne.n	8008f6e <USBH_HandleSof+0x28>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
  }
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008f86:	bf00      	nop
}
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008fa2:	bf00      	nop
}
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 f846 	bl	800a08e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	791b      	ldrb	r3, [r3, #4]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fe93 	bl	8009d34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	795b      	ldrb	r3, [r3, #5]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fe8d 	bl	8009d34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af02      	add	r7, sp, #8
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	b29b      	uxth	r3, r3
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4613      	mov	r3, r2
 800903e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f864 	bl	8009112 <USBH_GetDescriptor>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f203 3026 	addw	r0, r3, #806	; 0x326
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	b292      	uxth	r2, r2
 8009064:	4619      	mov	r1, r3
 8009066:	f000 f919 	bl	800929c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800906a:	7bfb      	ldrb	r3, [r7, #15]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af02      	add	r7, sp, #8
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	331c      	adds	r3, #28
 8009084:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f83d 	bl	8009112 <USBH_GetDescriptor>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80090a2:	887b      	ldrh	r3, [r7, #2]
 80090a4:	461a      	mov	r2, r3
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f989 	bl	80093c0 <USBH_ParseCfgDesc>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	607a      	str	r2, [r7, #4]
 80090c6:	461a      	mov	r2, r3
 80090c8:	460b      	mov	r3, r1
 80090ca:	72fb      	strb	r3, [r7, #11]
 80090cc:	4613      	mov	r3, r2
 80090ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80090d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80090e0:	893b      	ldrh	r3, [r7, #8]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	460b      	mov	r3, r1
 80090e6:	2100      	movs	r1, #0
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 f812 	bl	8009112 <USBH_GetDescriptor>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d107      	bne.n	8009108 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80090fe:	893a      	ldrh	r2, [r7, #8]
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fb26 	bl	8009754 <USBH_ParseStringDesc>
  }

  return status;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	607b      	str	r3, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	72fb      	strb	r3, [r7, #11]
 8009120:	4613      	mov	r3, r2
 8009122:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	789b      	ldrb	r3, [r3, #2]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d11c      	bne.n	8009166 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800912c:	7afb      	ldrb	r3, [r7, #11]
 800912e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009132:	b2da      	uxtb	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2206      	movs	r2, #6
 800913c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	893a      	ldrh	r2, [r7, #8]
 8009142:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009144:	893b      	ldrh	r3, [r7, #8]
 8009146:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800914a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800914e:	d104      	bne.n	800915a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f240 4209 	movw	r2, #1033	; 0x409
 8009156:	829a      	strh	r2, [r3, #20]
 8009158:	e002      	b.n	8009160 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8b3a      	ldrh	r2, [r7, #24]
 8009164:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009166:	8b3b      	ldrh	r3, [r7, #24]
 8009168:	461a      	mov	r2, r3
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fb3f 	bl	80097f0 <USBH_CtlReq>
 8009172:	4603      	mov	r3, r0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	789b      	ldrb	r3, [r3, #2]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d10f      	bne.n	80091b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2205      	movs	r2, #5
 800919a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091b0:	2200      	movs	r2, #0
 80091b2:	2100      	movs	r1, #0
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fb1b 	bl	80097f0 <USBH_CtlReq>
 80091ba:	4603      	mov	r3, r0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	789b      	ldrb	r3, [r3, #2]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d10e      	bne.n	80091f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2209      	movs	r2, #9
 80091e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	887a      	ldrh	r2, [r7, #2]
 80091e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091f6:	2200      	movs	r2, #0
 80091f8:	2100      	movs	r1, #0
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 faf8 	bl	80097f0 <USBH_CtlReq>
 8009200:	4603      	mov	r3, r0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	460b      	mov	r3, r1
 8009214:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	789b      	ldrb	r3, [r3, #2]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10f      	bne.n	800923e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2203      	movs	r2, #3
 8009228:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fad4 	bl	80097f0 <USBH_CtlReq>
 8009248:	4603      	mov	r3, r0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	789b      	ldrb	r3, [r3, #2]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d10f      	bne.n	8009286 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	b29a      	uxth	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009286:	2200      	movs	r2, #0
 8009288:	2100      	movs	r1, #0
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fab0 	bl	80097f0 <USBH_CtlReq>
 8009290:	4603      	mov	r3, r0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	781a      	ldrb	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	785a      	ldrb	r2, [r3, #1]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	3302      	adds	r3, #2
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	3303      	adds	r3, #3
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4313      	orrs	r3, r2
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	791a      	ldrb	r2, [r3, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	795a      	ldrb	r2, [r3, #5]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	799a      	ldrb	r2, [r3, #6]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	79da      	ldrb	r2, [r3, #7]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	79db      	ldrb	r3, [r3, #7]
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	dc0f      	bgt.n	800931e <USBH_ParseDevDesc+0x82>
 80092fe:	2b08      	cmp	r3, #8
 8009300:	db14      	blt.n	800932c <USBH_ParseDevDesc+0x90>
 8009302:	3b08      	subs	r3, #8
 8009304:	4a2d      	ldr	r2, [pc, #180]	; (80093bc <USBH_ParseDevDesc+0x120>)
 8009306:	fa22 f303 	lsr.w	r3, r2, r3
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	bf14      	ite	ne
 8009312:	2301      	movne	r3, #1
 8009314:	2300      	moveq	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <USBH_ParseDevDesc+0x86>
 800931c:	e006      	b.n	800932c <USBH_ParseDevDesc+0x90>
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d104      	bne.n	800932c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	79da      	ldrb	r2, [r3, #7]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	71da      	strb	r2, [r3, #7]
      break;
 800932a:	e003      	b.n	8009334 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2240      	movs	r2, #64	; 0x40
 8009330:	71da      	strb	r2, [r3, #7]
      break;
 8009332:	bf00      	nop
  }

  if (length > 8U)
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	2b08      	cmp	r3, #8
 8009338:	d939      	bls.n	80093ae <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	3308      	adds	r3, #8
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b29a      	uxth	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	3309      	adds	r3, #9
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	021b      	lsls	r3, r3, #8
 800934c:	b29b      	uxth	r3, r3
 800934e:	4313      	orrs	r3, r2
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	330a      	adds	r3, #10
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	b29a      	uxth	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	330b      	adds	r3, #11
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	b29b      	uxth	r3, r3
 800936a:	4313      	orrs	r3, r2
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	330c      	adds	r3, #12
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	b29a      	uxth	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	330d      	adds	r3, #13
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	b29b      	uxth	r3, r3
 8009386:	4313      	orrs	r3, r2
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	7b9a      	ldrb	r2, [r3, #14]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	7bda      	ldrb	r2, [r3, #15]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	7c1a      	ldrb	r2, [r3, #16]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	7c5a      	ldrb	r2, [r3, #17]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	745a      	strb	r2, [r3, #17]
  }
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	01000101 	.word	0x01000101

080093c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	; 0x30
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80093d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	785a      	ldrb	r2, [r3, #1]
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3302      	adds	r3, #2
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	b29a      	uxth	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	3303      	adds	r3, #3
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	b29b      	uxth	r3, r3
 8009414:	4313      	orrs	r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800941c:	bf28      	it	cs
 800941e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009422:	b29a      	uxth	r2, r3
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	791a      	ldrb	r2, [r3, #4]
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	795a      	ldrb	r2, [r3, #5]
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	799a      	ldrb	r2, [r3, #6]
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	79da      	ldrb	r2, [r3, #7]
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	7a1a      	ldrb	r2, [r3, #8]
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b09      	cmp	r3, #9
 8009456:	d002      	beq.n	800945e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	2209      	movs	r2, #9
 800945c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	2b09      	cmp	r3, #9
 8009462:	f240 809d 	bls.w	80095a0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009466:	2309      	movs	r3, #9
 8009468:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800946e:	e081      	b.n	8009574 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009470:	f107 0316 	add.w	r3, r7, #22
 8009474:	4619      	mov	r1, r3
 8009476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009478:	f000 f99f 	bl	80097ba <USBH_GetNextDesc>
 800947c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b04      	cmp	r3, #4
 8009484:	d176      	bne.n	8009574 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b09      	cmp	r3, #9
 800948c:	d002      	beq.n	8009494 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	2209      	movs	r2, #9
 8009492:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009498:	221a      	movs	r2, #26
 800949a:	fb02 f303 	mul.w	r3, r2, r3
 800949e:	3308      	adds	r3, #8
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	4413      	add	r3, r2
 80094a4:	3302      	adds	r3, #2
 80094a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80094a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094aa:	69f8      	ldr	r0, [r7, #28]
 80094ac:	f000 f87e 	bl	80095ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80094ba:	e043      	b.n	8009544 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80094bc:	f107 0316 	add.w	r3, r7, #22
 80094c0:	4619      	mov	r1, r3
 80094c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c4:	f000 f979 	bl	80097ba <USBH_GetNextDesc>
 80094c8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b05      	cmp	r3, #5
 80094d0:	d138      	bne.n	8009544 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	795b      	ldrb	r3, [r3, #5]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d10f      	bne.n	80094fa <USBH_ParseCfgDesc+0x13a>
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	799b      	ldrb	r3, [r3, #6]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d10b      	bne.n	80094fa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	79db      	ldrb	r3, [r3, #7]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10f      	bne.n	800950a <USBH_ParseCfgDesc+0x14a>
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b09      	cmp	r3, #9
 80094f0:	d00b      	beq.n	800950a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	2209      	movs	r2, #9
 80094f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094f8:	e007      	b.n	800950a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80094fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b07      	cmp	r3, #7
 8009500:	d004      	beq.n	800950c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2207      	movs	r2, #7
 8009506:	701a      	strb	r2, [r3, #0]
 8009508:	e000      	b.n	800950c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800950a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800950c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009510:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009514:	3201      	adds	r2, #1
 8009516:	00d2      	lsls	r2, r2, #3
 8009518:	211a      	movs	r1, #26
 800951a:	fb01 f303 	mul.w	r3, r1, r3
 800951e:	4413      	add	r3, r2
 8009520:	3308      	adds	r3, #8
 8009522:	6a3a      	ldr	r2, [r7, #32]
 8009524:	4413      	add	r3, r2
 8009526:	3304      	adds	r3, #4
 8009528:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800952a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800952c:	69b9      	ldr	r1, [r7, #24]
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 f86b 	bl	800960a <USBH_ParseEPDesc>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800953a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800953e:	3301      	adds	r3, #1
 8009540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800954c:	429a      	cmp	r2, r3
 800954e:	d204      	bcs.n	800955a <USBH_ParseCfgDesc+0x19a>
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	885a      	ldrh	r2, [r3, #2]
 8009554:	8afb      	ldrh	r3, [r7, #22]
 8009556:	429a      	cmp	r2, r3
 8009558:	d8b0      	bhi.n	80094bc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009562:	429a      	cmp	r2, r3
 8009564:	d201      	bcs.n	800956a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009566:	2303      	movs	r3, #3
 8009568:	e01c      	b.n	80095a4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800956a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800956e:	3301      	adds	r3, #1
 8009570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009578:	2b01      	cmp	r3, #1
 800957a:	d805      	bhi.n	8009588 <USBH_ParseCfgDesc+0x1c8>
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	885a      	ldrh	r2, [r3, #2]
 8009580:	8afb      	ldrh	r3, [r7, #22]
 8009582:	429a      	cmp	r2, r3
 8009584:	f63f af74 	bhi.w	8009470 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	791b      	ldrb	r3, [r3, #4]
 800958c:	2b02      	cmp	r3, #2
 800958e:	bf28      	it	cs
 8009590:	2302      	movcs	r3, #2
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009598:	429a      	cmp	r2, r3
 800959a:	d201      	bcs.n	80095a0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800959c:	2303      	movs	r3, #3
 800959e:	e001      	b.n	80095a4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80095a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3730      	adds	r7, #48	; 0x30
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781a      	ldrb	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	785a      	ldrb	r2, [r3, #1]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	789a      	ldrb	r2, [r3, #2]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	78da      	ldrb	r2, [r3, #3]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	791a      	ldrb	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	795a      	ldrb	r2, [r3, #5]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	799a      	ldrb	r2, [r3, #6]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	79da      	ldrb	r2, [r3, #7]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	7a1a      	ldrb	r2, [r3, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	721a      	strb	r2, [r3, #8]
}
 80095fe:	bf00      	nop
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800960a:	b480      	push	{r7}
 800960c:	b087      	sub	sp, #28
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	785a      	ldrb	r2, [r3, #1]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	789a      	ldrb	r2, [r3, #2]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	78da      	ldrb	r2, [r3, #3]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3304      	adds	r3, #4
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3305      	adds	r3, #5
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	b29b      	uxth	r3, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	b29a      	uxth	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	799a      	ldrb	r2, [r3, #6]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	889b      	ldrh	r3, [r3, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009666:	2303      	movs	r3, #3
 8009668:	75fb      	strb	r3, [r7, #23]
 800966a:	e033      	b.n	80096d4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	889b      	ldrh	r3, [r3, #4]
 8009670:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009674:	f023 0307 	bic.w	r3, r3, #7
 8009678:	b29a      	uxth	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	889b      	ldrh	r3, [r3, #4]
 8009682:	b21a      	sxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	b299      	uxth	r1, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3305      	adds	r3, #5
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	b29b      	uxth	r3, r3
 8009698:	430b      	orrs	r3, r1
 800969a:	b29b      	uxth	r3, r3
 800969c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d110      	bne.n	80096c6 <USBH_ParseEPDesc+0xbc>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3304      	adds	r3, #4
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	b299      	uxth	r1, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3305      	adds	r3, #5
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	430b      	orrs	r3, r1
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	b21b      	sxth	r3, r3
 80096be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096c2:	b21b      	sxth	r3, r3
 80096c4:	e001      	b.n	80096ca <USBH_ParseEPDesc+0xc0>
 80096c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b21b      	sxth	r3, r3
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d116      	bne.n	800970c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	78db      	ldrb	r3, [r3, #3]
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d005      	beq.n	80096f6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	78db      	ldrb	r3, [r3, #3]
 80096ee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d127      	bne.n	8009746 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	799b      	ldrb	r3, [r3, #6]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <USBH_ParseEPDesc+0xfc>
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	799b      	ldrb	r3, [r3, #6]
 8009702:	2b10      	cmp	r3, #16
 8009704:	d91f      	bls.n	8009746 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009706:	2303      	movs	r3, #3
 8009708:	75fb      	strb	r3, [r7, #23]
 800970a:	e01c      	b.n	8009746 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	78db      	ldrb	r3, [r3, #3]
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	2b01      	cmp	r3, #1
 8009716:	d10a      	bne.n	800972e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	799b      	ldrb	r3, [r3, #6]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <USBH_ParseEPDesc+0x11e>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	799b      	ldrb	r3, [r3, #6]
 8009724:	2b10      	cmp	r3, #16
 8009726:	d90e      	bls.n	8009746 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009728:	2303      	movs	r3, #3
 800972a:	75fb      	strb	r3, [r7, #23]
 800972c:	e00b      	b.n	8009746 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	78db      	ldrb	r3, [r3, #3]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b03      	cmp	r3, #3
 8009738:	d105      	bne.n	8009746 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	799b      	ldrb	r3, [r3, #6]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009742:	2303      	movs	r3, #3
 8009744:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009746:	7dfb      	ldrb	r3, [r7, #23]
}
 8009748:	4618      	mov	r0, r3
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3301      	adds	r3, #1
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b03      	cmp	r3, #3
 800976a:	d120      	bne.n	80097ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	1e9a      	subs	r2, r3, #2
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	4293      	cmp	r3, r2
 8009776:	bf28      	it	cs
 8009778:	4613      	movcs	r3, r2
 800977a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3302      	adds	r3, #2
 8009780:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009782:	2300      	movs	r3, #0
 8009784:	82fb      	strh	r3, [r7, #22]
 8009786:	e00b      	b.n	80097a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009788:	8afb      	ldrh	r3, [r7, #22]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	3301      	adds	r3, #1
 8009798:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800979a:	8afb      	ldrh	r3, [r7, #22]
 800979c:	3302      	adds	r3, #2
 800979e:	82fb      	strh	r3, [r7, #22]
 80097a0:	8afa      	ldrh	r2, [r7, #22]
 80097a2:	8abb      	ldrh	r3, [r7, #20]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d3ef      	bcc.n	8009788 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
  }
}
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	881a      	ldrh	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	4413      	add	r3, r2
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4413      	add	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097e2:	68fb      	ldr	r3, [r7, #12]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80097fe:	2301      	movs	r3, #1
 8009800:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	789b      	ldrb	r3, [r3, #2]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d002      	beq.n	8009810 <USBH_CtlReq+0x20>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d00f      	beq.n	800982e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800980e:	e027      	b.n	8009860 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	88fa      	ldrh	r2, [r7, #6]
 800981a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2201      	movs	r2, #1
 8009820:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2202      	movs	r2, #2
 8009826:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]
      break;
 800982c:	e018      	b.n	8009860 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 f81c 	bl	800986c <USBH_HandleControl>
 8009834:	4603      	mov	r3, r0
 8009836:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <USBH_CtlReq+0x54>
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d106      	bne.n	8009852 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	761a      	strb	r2, [r3, #24]
      break;
 8009850:	e005      	b.n	800985e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d102      	bne.n	800985e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2201      	movs	r2, #1
 800985c:	709a      	strb	r2, [r3, #2]
      break;
 800985e:	bf00      	nop
  }
  return status;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af02      	add	r7, sp, #8
 8009872:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009878:	2300      	movs	r3, #0
 800987a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	7e1b      	ldrb	r3, [r3, #24]
 8009880:	3b01      	subs	r3, #1
 8009882:	2b0a      	cmp	r3, #10
 8009884:	f200 8156 	bhi.w	8009b34 <USBH_HandleControl+0x2c8>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <USBH_HandleControl+0x24>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098bd 	.word	0x080098bd
 8009894:	080098d7 	.word	0x080098d7
 8009898:	08009941 	.word	0x08009941
 800989c:	08009967 	.word	0x08009967
 80098a0:	0800999f 	.word	0x0800999f
 80098a4:	080099c9 	.word	0x080099c9
 80098a8:	08009a1b 	.word	0x08009a1b
 80098ac:	08009a3d 	.word	0x08009a3d
 80098b0:	08009a79 	.word	0x08009a79
 80098b4:	08009a9f 	.word	0x08009a9f
 80098b8:	08009add 	.word	0x08009add
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f103 0110 	add.w	r1, r3, #16
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	795b      	ldrb	r3, [r3, #5]
 80098c6:	461a      	mov	r2, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f943 	bl	8009b54 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	761a      	strb	r2, [r3, #24]
      break;
 80098d4:	e139      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fcc5 	bl	800a26c <USBH_LL_GetURBState>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d11e      	bne.n	800992a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	7c1b      	ldrb	r3, [r3, #16]
 80098f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	8adb      	ldrh	r3, [r3, #22]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80098fe:	7b7b      	ldrb	r3, [r7, #13]
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d103      	bne.n	800990c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2203      	movs	r2, #3
 8009908:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800990a:	e115      	b.n	8009b38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2205      	movs	r2, #5
 8009910:	761a      	strb	r2, [r3, #24]
      break;
 8009912:	e111      	b.n	8009b38 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009914:	7b7b      	ldrb	r3, [r7, #13]
 8009916:	2b80      	cmp	r3, #128	; 0x80
 8009918:	d103      	bne.n	8009922 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2209      	movs	r2, #9
 800991e:	761a      	strb	r2, [r3, #24]
      break;
 8009920:	e10a      	b.n	8009b38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2207      	movs	r2, #7
 8009926:	761a      	strb	r2, [r3, #24]
      break;
 8009928:	e106      	b.n	8009b38 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b04      	cmp	r3, #4
 800992e:	d003      	beq.n	8009938 <USBH_HandleControl+0xcc>
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b02      	cmp	r3, #2
 8009934:	f040 8100 	bne.w	8009b38 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	220b      	movs	r2, #11
 800993c:	761a      	strb	r2, [r3, #24]
      break;
 800993e:	e0fb      	b.n	8009b38 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6899      	ldr	r1, [r3, #8]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	899a      	ldrh	r2, [r3, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	791b      	ldrb	r3, [r3, #4]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f93a 	bl	8009bd2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	761a      	strb	r2, [r3, #24]
      break;
 8009964:	e0f1      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	791b      	ldrb	r3, [r3, #4]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fc7d 	bl	800a26c <USBH_LL_GetURBState>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d102      	bne.n	8009982 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2209      	movs	r2, #9
 8009980:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	2b05      	cmp	r3, #5
 8009986:	d102      	bne.n	800998e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009988:	2303      	movs	r3, #3
 800998a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800998c:	e0d6      	b.n	8009b3c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b04      	cmp	r3, #4
 8009992:	f040 80d3 	bne.w	8009b3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	220b      	movs	r2, #11
 800999a:	761a      	strb	r2, [r3, #24]
      break;
 800999c:	e0ce      	b.n	8009b3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6899      	ldr	r1, [r3, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	899a      	ldrh	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	795b      	ldrb	r3, [r3, #5]
 80099aa:	2001      	movs	r0, #1
 80099ac:	9000      	str	r0, [sp, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8ea 	bl	8009b88 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2206      	movs	r2, #6
 80099c4:	761a      	strb	r2, [r3, #24]
      break;
 80099c6:	e0c0      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	795b      	ldrb	r3, [r3, #5]
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fc4c 	bl	800a26c <USBH_LL_GetURBState>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d103      	bne.n	80099e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2207      	movs	r2, #7
 80099e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099e4:	e0ac      	b.n	8009b40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	d105      	bne.n	80099f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	220c      	movs	r2, #12
 80099f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80099f2:	2303      	movs	r3, #3
 80099f4:	73fb      	strb	r3, [r7, #15]
      break;
 80099f6:	e0a3      	b.n	8009b40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d103      	bne.n	8009a06 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2205      	movs	r2, #5
 8009a02:	761a      	strb	r2, [r3, #24]
      break;
 8009a04:	e09c      	b.n	8009b40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	f040 8099 	bne.w	8009b40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	220b      	movs	r2, #11
 8009a12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a14:	2302      	movs	r3, #2
 8009a16:	73fb      	strb	r3, [r7, #15]
      break;
 8009a18:	e092      	b.n	8009b40 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f8d5 	bl	8009bd2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2208      	movs	r2, #8
 8009a38:	761a      	strb	r2, [r3, #24]

      break;
 8009a3a:	e086      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	791b      	ldrb	r3, [r3, #4]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fc12 	bl	800a26c <USBH_LL_GetURBState>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d105      	bne.n	8009a5e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	220d      	movs	r2, #13
 8009a56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a5c:	e072      	b.n	8009b44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d103      	bne.n	8009a6c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	220b      	movs	r2, #11
 8009a68:	761a      	strb	r2, [r3, #24]
      break;
 8009a6a:	e06b      	b.n	8009b44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d168      	bne.n	8009b44 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009a72:	2303      	movs	r3, #3
 8009a74:	73fb      	strb	r3, [r7, #15]
      break;
 8009a76:	e065      	b.n	8009b44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	795b      	ldrb	r3, [r3, #5]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	9200      	str	r2, [sp, #0]
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f87f 	bl	8009b88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	220a      	movs	r2, #10
 8009a9a:	761a      	strb	r2, [r3, #24]
      break;
 8009a9c:	e055      	b.n	8009b4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fbe1 	bl	800a26c <USBH_LL_GetURBState>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d105      	bne.n	8009ac0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	220d      	movs	r2, #13
 8009abc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009abe:	e043      	b.n	8009b48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d103      	bne.n	8009ace <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2209      	movs	r2, #9
 8009aca:	761a      	strb	r2, [r3, #24]
      break;
 8009acc:	e03c      	b.n	8009b48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d139      	bne.n	8009b48 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	220b      	movs	r2, #11
 8009ad8:	761a      	strb	r2, [r3, #24]
      break;
 8009ada:	e035      	b.n	8009b48 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7e5b      	ldrb	r3, [r3, #25]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	765a      	strb	r2, [r3, #25]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7e5b      	ldrb	r3, [r3, #25]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d806      	bhi.n	8009afe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009afc:	e025      	b.n	8009b4a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b04:	2106      	movs	r1, #6
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	795b      	ldrb	r3, [r3, #5]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f90c 	bl	8009d34 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	791b      	ldrb	r3, [r3, #4]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f906 	bl	8009d34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	73fb      	strb	r3, [r7, #15]
      break;
 8009b32:	e00a      	b.n	8009b4a <USBH_HandleControl+0x2de>

    default:
      break;
 8009b34:	bf00      	nop
 8009b36:	e008      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b38:	bf00      	nop
 8009b3a:	e006      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b3c:	bf00      	nop
 8009b3e:	e004      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b40:	bf00      	nop
 8009b42:	e002      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b44:	bf00      	nop
 8009b46:	e000      	b.n	8009b4a <USBH_HandleControl+0x2de>
      break;
 8009b48:	bf00      	nop
  }

  return status;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af04      	add	r7, sp, #16
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b62:	79f9      	ldrb	r1, [r7, #7]
 8009b64:	2300      	movs	r3, #0
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	2308      	movs	r3, #8
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fb46 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af04      	add	r7, sp, #16
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4611      	mov	r1, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	460b      	mov	r3, r1
 8009b98:	80fb      	strh	r3, [r7, #6]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bac:	7979      	ldrb	r1, [r7, #5]
 8009bae:	7e3b      	ldrb	r3, [r7, #24]
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	88fb      	ldrh	r3, [r7, #6]
 8009bb4:	9302      	str	r3, [sp, #8]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fb21 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b088      	sub	sp, #32
 8009bd6:	af04      	add	r7, sp, #16
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	4611      	mov	r1, r2
 8009bde:	461a      	mov	r2, r3
 8009be0:	460b      	mov	r3, r1
 8009be2:	80fb      	strh	r3, [r7, #6]
 8009be4:	4613      	mov	r3, r2
 8009be6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009be8:	7979      	ldrb	r1, [r7, #5]
 8009bea:	2300      	movs	r3, #0
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	9302      	str	r3, [sp, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fb03 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c04:	2300      	movs	r3, #0

}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b088      	sub	sp, #32
 8009c12:	af04      	add	r7, sp, #16
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	80fb      	strh	r3, [r7, #6]
 8009c20:	4613      	mov	r3, r2
 8009c22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c32:	7979      	ldrb	r1, [r7, #5]
 8009c34:	7e3b      	ldrb	r3, [r7, #24]
 8009c36:	9303      	str	r3, [sp, #12]
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	2301      	movs	r3, #1
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2302      	movs	r3, #2
 8009c46:	2200      	movs	r2, #0
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fade 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af04      	add	r7, sp, #16
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4611      	mov	r1, r2
 8009c64:	461a      	mov	r2, r3
 8009c66:	460b      	mov	r3, r1
 8009c68:	80fb      	strh	r3, [r7, #6]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c6e:	7979      	ldrb	r1, [r7, #5]
 8009c70:	2300      	movs	r3, #0
 8009c72:	9303      	str	r3, [sp, #12]
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2302      	movs	r3, #2
 8009c82:	2201      	movs	r2, #1
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fac0 	bl	800a20a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af04      	add	r7, sp, #16
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	70fb      	strb	r3, [r7, #3]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70bb      	strb	r3, [r7, #2]
 8009caa:	4613      	mov	r3, r2
 8009cac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cae:	7878      	ldrb	r0, [r7, #1]
 8009cb0:	78ba      	ldrb	r2, [r7, #2]
 8009cb2:	78f9      	ldrb	r1, [r7, #3]
 8009cb4:	8b3b      	ldrh	r3, [r7, #24]
 8009cb6:	9302      	str	r3, [sp, #8]
 8009cb8:	7d3b      	ldrb	r3, [r7, #20]
 8009cba:	9301      	str	r3, [sp, #4]
 8009cbc:	7c3b      	ldrb	r3, [r7, #16]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa53 	bl	800a16e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa72 	bl	800a1cc <USBH_LL_ClosePipe>

  return USBH_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f836 	bl	8009d70 <USBH_GetFreePipe>
 8009d04:	4603      	mov	r3, r0
 8009d06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d08:	89fb      	ldrh	r3, [r7, #14]
 8009d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d00a      	beq.n	8009d28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	89fb      	ldrh	r3, [r7, #14]
 8009d16:	f003 030f 	and.w	r3, r3, #15
 8009d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	33e0      	adds	r3, #224	; 0xe0
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	b2db      	uxtb	r3, r3
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	2b0f      	cmp	r3, #15
 8009d44:	d80d      	bhi.n	8009d62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d46:	78fb      	ldrb	r3, [r7, #3]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	33e0      	adds	r3, #224	; 0xe0
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	33e0      	adds	r3, #224	; 0xe0
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
 8009d80:	e00f      	b.n	8009da2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	33e0      	adds	r3, #224	; 0xe0
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d102      	bne.n	8009d9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	e007      	b.n	8009dac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b0f      	cmp	r3, #15
 8009da6:	d9ec      	bls.n	8009d82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	490e      	ldr	r1, [pc, #56]	; (8009df8 <MX_USB_HOST_Init+0x40>)
 8009dc0:	480e      	ldr	r0, [pc, #56]	; (8009dfc <MX_USB_HOST_Init+0x44>)
 8009dc2:	f7fe fba5 	bl	8008510 <USBH_Init>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009dcc:	f7f7 f83a 	bl	8000e44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009dd0:	490b      	ldr	r1, [pc, #44]	; (8009e00 <MX_USB_HOST_Init+0x48>)
 8009dd2:	480a      	ldr	r0, [pc, #40]	; (8009dfc <MX_USB_HOST_Init+0x44>)
 8009dd4:	f7fe fc2a 	bl	800862c <USBH_RegisterClass>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009dde:	f7f7 f831 	bl	8000e44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009de2:	4806      	ldr	r0, [pc, #24]	; (8009dfc <MX_USB_HOST_Init+0x44>)
 8009de4:	f7fe fcae 	bl	8008744 <USBH_Start>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009dee:	f7f7 f829 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009df2:	bf00      	nop
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	2000026c 	.word	0x2000026c
 8009e00:	2000001c 	.word	0x2000001c

08009e04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e08:	4802      	ldr	r0, [pc, #8]	; (8009e14 <MX_USB_HOST_Process+0x10>)
 8009e0a:	f7fe fcab 	bl	8008764 <USBH_Process>
}
 8009e0e:	bf00      	nop
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000026c 	.word	0x2000026c

08009e18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d819      	bhi.n	8009e60 <USBH_UserProcess+0x48>
 8009e2c:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <USBH_UserProcess+0x1c>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	08009e51 	.word	0x08009e51
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e49 	.word	0x08009e49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e48:	4b09      	ldr	r3, [pc, #36]	; (8009e70 <USBH_UserProcess+0x58>)
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	701a      	strb	r2, [r3, #0]
  break;
 8009e4e:	e008      	b.n	8009e62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <USBH_UserProcess+0x58>)
 8009e52:	2202      	movs	r2, #2
 8009e54:	701a      	strb	r2, [r3, #0]
  break;
 8009e56:	e004      	b.n	8009e62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <USBH_UserProcess+0x58>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	701a      	strb	r2, [r3, #0]
  break;
 8009e5e:	e000      	b.n	8009e62 <USBH_UserProcess+0x4a>

  default:
  break;
 8009e60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20000644 	.word	0x20000644

08009e74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e7c:	f107 0314 	add.w	r3, r7, #20
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e94:	d147      	bne.n	8009f26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e96:	2300      	movs	r3, #0
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	4a24      	ldr	r2, [pc, #144]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea6:	4b22      	ldr	r3, [pc, #136]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ec0:	f107 0314 	add.w	r3, r7, #20
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	481b      	ldr	r0, [pc, #108]	; (8009f34 <HAL_HCD_MspInit+0xc0>)
 8009ec8:	f7f7 feec 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009ecc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009eda:	2300      	movs	r3, #0
 8009edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ede:	230a      	movs	r3, #10
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ee2:	f107 0314 	add.w	r3, r7, #20
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4812      	ldr	r0, [pc, #72]	; (8009f34 <HAL_HCD_MspInit+0xc0>)
 8009eea:	f7f7 fedb 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009eee:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef2:	4a0f      	ldr	r2, [pc, #60]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef8:	6353      	str	r3, [r2, #52]	; 0x34
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f02:	4a0b      	ldr	r2, [pc, #44]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f08:	6453      	str	r3, [r2, #68]	; 0x44
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <HAL_HCD_MspInit+0xbc>)
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f16:	2200      	movs	r2, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	2043      	movs	r0, #67	; 0x43
 8009f1c:	f7f7 fb71 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f20:	2043      	movs	r0, #67	; 0x43
 8009f22:	f7f7 fb8a 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f26:	bf00      	nop
 8009f28:	3728      	adds	r7, #40	; 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	40023800 	.word	0x40023800
 8009f34:	40020000 	.word	0x40020000

08009f38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe ffeb 	bl	8008f22 <USBH_LL_IncTimer>
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff f823 	bl	8008fae <USBH_LL_Connect>
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff f82c 	bl	8008fdc <USBH_LL_Disconnect>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe ffdd 	bl	8008f76 <USBH_LL_PortEnabled>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe ffdd 	bl	8008f92 <USBH_LL_PortDisabled>
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d12a      	bne.n	800a048 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009ff2:	4a18      	ldr	r2, [pc, #96]	; (800a054 <USBH_LL_Init+0x74>)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a15      	ldr	r2, [pc, #84]	; (800a054 <USBH_LL_Init+0x74>)
 8009ffe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a002:	4b14      	ldr	r3, [pc, #80]	; (800a054 <USBH_LL_Init+0x74>)
 800a004:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a008:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a00a:	4b12      	ldr	r3, [pc, #72]	; (800a054 <USBH_LL_Init+0x74>)
 800a00c:	2208      	movs	r2, #8
 800a00e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a010:	4b10      	ldr	r3, [pc, #64]	; (800a054 <USBH_LL_Init+0x74>)
 800a012:	2201      	movs	r2, #1
 800a014:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a016:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <USBH_LL_Init+0x74>)
 800a018:	2200      	movs	r2, #0
 800a01a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a01c:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <USBH_LL_Init+0x74>)
 800a01e:	2202      	movs	r2, #2
 800a020:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a022:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <USBH_LL_Init+0x74>)
 800a024:	2200      	movs	r2, #0
 800a026:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a028:	480a      	ldr	r0, [pc, #40]	; (800a054 <USBH_LL_Init+0x74>)
 800a02a:	f7f8 f808 	bl	800203e <HAL_HCD_Init>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a034:	f7f6 ff06 	bl	8000e44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a038:	4806      	ldr	r0, [pc, #24]	; (800a054 <USBH_LL_Init+0x74>)
 800a03a:	f7f8 fbec 	bl	8002816 <HAL_HCD_GetCurrentFrame>
 800a03e:	4603      	mov	r3, r0
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7fe ff5e 	bl	8008f04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000648 	.word	0x20000648

0800a058 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f8 fb5b 	bl	800272a <HAL_HCD_Start>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 f95c 	bl	800a338 <USBH_Get_USB_Status>
 800a080:	4603      	mov	r3, r0
 800a082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f8 fb63 	bl	8002770 <HAL_HCD_Stop>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f941 	bl	800a338 <USBH_Get_USB_Status>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f8 fbab 	bl	8002832 <HAL_HCD_GetCurrentSpeed>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d00c      	beq.n	800a0fc <USBH_LL_GetSpeed+0x38>
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d80d      	bhi.n	800a102 <USBH_LL_GetSpeed+0x3e>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBH_LL_GetSpeed+0x2c>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d003      	beq.n	800a0f6 <USBH_LL_GetSpeed+0x32>
 800a0ee:	e008      	b.n	800a102 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f4:	e008      	b.n	800a108 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fa:	e005      	b.n	800a108 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a100:	e002      	b.n	800a108 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a102:	2301      	movs	r3, #1
 800a104:	73fb      	strb	r3, [r7, #15]
    break;
 800a106:	bf00      	nop
  }
  return  speed;
 800a108:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a128:	4618      	mov	r0, r3
 800a12a:	f7f8 fb3e 	bl	80027aa <HAL_HCD_ResetPort>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 f8ff 	bl	800a338 <USBH_Get_USB_Status>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f8 fb45 	bl	80027ee <HAL_HCD_HC_GetXferCount>
 800a164:	4603      	mov	r3, r0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a16e:	b590      	push	{r4, r7, lr}
 800a170:	b089      	sub	sp, #36	; 0x24
 800a172:	af04      	add	r7, sp, #16
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	461a      	mov	r2, r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	70fb      	strb	r3, [r7, #3]
 800a180:	460b      	mov	r3, r1
 800a182:	70bb      	strb	r3, [r7, #2]
 800a184:	4613      	mov	r3, r2
 800a186:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a196:	787c      	ldrb	r4, [r7, #1]
 800a198:	78ba      	ldrb	r2, [r7, #2]
 800a19a:	78f9      	ldrb	r1, [r7, #3]
 800a19c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a19e:	9302      	str	r3, [sp, #8]
 800a1a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	f7f7 ffa8 	bl	8002102 <HAL_HCD_HC_Init>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f8bd 	bl	800a338 <USBH_Get_USB_Status>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd90      	pop	{r4, r7, pc}

0800a1cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1e6:	78fa      	ldrb	r2, [r7, #3]
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7f8 f818 	bl	8002220 <HAL_HCD_HC_Halt>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f89e 	bl	800a338 <USBH_Get_USB_Status>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a200:	7bbb      	ldrb	r3, [r7, #14]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a20a:	b590      	push	{r4, r7, lr}
 800a20c:	b089      	sub	sp, #36	; 0x24
 800a20e:	af04      	add	r7, sp, #16
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	4608      	mov	r0, r1
 800a214:	4611      	mov	r1, r2
 800a216:	461a      	mov	r2, r3
 800a218:	4603      	mov	r3, r0
 800a21a:	70fb      	strb	r3, [r7, #3]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70bb      	strb	r3, [r7, #2]
 800a220:	4613      	mov	r3, r2
 800a222:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a232:	787c      	ldrb	r4, [r7, #1]
 800a234:	78ba      	ldrb	r2, [r7, #2]
 800a236:	78f9      	ldrb	r1, [r7, #3]
 800a238:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4623      	mov	r3, r4
 800a24e:	f7f8 f80b 	bl	8002268 <HAL_HCD_HC_SubmitRequest>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f86d 	bl	800a338 <USBH_Get_USB_Status>
 800a25e:	4603      	mov	r3, r0
 800a260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a262:	7bbb      	ldrb	r3, [r7, #14]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a27e:	78fa      	ldrb	r2, [r7, #3]
 800a280:	4611      	mov	r1, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f7f8 fa9f 	bl	80027c6 <HAL_HCD_HC_GetURBState>
 800a288:	4603      	mov	r3, r0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d103      	bne.n	800a2b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f870 	bl	800a390 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a2b0:	20c8      	movs	r0, #200	; 0xc8
 800a2b2:	f7f7 f8a7 	bl	8001404 <HAL_Delay>
  return USBH_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	212c      	movs	r1, #44	; 0x2c
 800a2de:	fb01 f303 	mul.w	r3, r1, r3
 800a2e2:	4413      	add	r3, r2
 800a2e4:	333b      	adds	r3, #59	; 0x3b
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	212c      	movs	r1, #44	; 0x2c
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	3354      	adds	r3, #84	; 0x54
 800a2fa:	78ba      	ldrb	r2, [r7, #2]
 800a2fc:	701a      	strb	r2, [r3, #0]
 800a2fe:	e008      	b.n	800a312 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	212c      	movs	r1, #44	; 0x2c
 800a306:	fb01 f303 	mul.w	r3, r1, r3
 800a30a:	4413      	add	r3, r2
 800a30c:	3355      	adds	r3, #85	; 0x55
 800a30e:	78ba      	ldrb	r2, [r7, #2]
 800a310:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7f7 f86b 	bl	8001404 <HAL_Delay>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d817      	bhi.n	800a37c <USBH_Get_USB_Status+0x44>
 800a34c:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <USBH_Get_USB_Status+0x1c>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a365 	.word	0x0800a365
 800a358:	0800a36b 	.word	0x0800a36b
 800a35c:	0800a371 	.word	0x0800a371
 800a360:	0800a377 	.word	0x0800a377
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
    break;
 800a368:	e00b      	b.n	800a382 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a36a:	2302      	movs	r3, #2
 800a36c:	73fb      	strb	r3, [r7, #15]
    break;
 800a36e:	e008      	b.n	800a382 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a370:	2301      	movs	r3, #1
 800a372:	73fb      	strb	r3, [r7, #15]
    break;
 800a374:	e005      	b.n	800a382 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	73fb      	strb	r3, [r7, #15]
    break;
 800a37a:	e002      	b.n	800a382 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a37c:	2302      	movs	r3, #2
 800a37e:	73fb      	strb	r3, [r7, #15]
    break;
 800a380:	bf00      	nop
  }
  return usb_status;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
 800a3a8:	e001      	b.n	800a3ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	4803      	ldr	r0, [pc, #12]	; (800a3c4 <MX_DriverVbusFS+0x34>)
 800a3b6:	f7f7 fe29 	bl	800200c <HAL_GPIO_WritePin>
}
 800a3ba:	bf00      	nop
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	40020800 	.word	0x40020800

0800a3c8 <malloc>:
 800a3c8:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <malloc+0xc>)
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	f000 b82b 	b.w	800a428 <_malloc_r>
 800a3d2:	bf00      	nop
 800a3d4:	20000088 	.word	0x20000088

0800a3d8 <free>:
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <free+0xc>)
 800a3da:	4601      	mov	r1, r0
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	f000 b913 	b.w	800a608 <_free_r>
 800a3e2:	bf00      	nop
 800a3e4:	20000088 	.word	0x20000088

0800a3e8 <sbrk_aligned>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	4e0e      	ldr	r6, [pc, #56]	; (800a424 <sbrk_aligned+0x3c>)
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	6831      	ldr	r1, [r6, #0]
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	b911      	cbnz	r1, 800a3fa <sbrk_aligned+0x12>
 800a3f4:	f000 f8cc 	bl	800a590 <_sbrk_r>
 800a3f8:	6030      	str	r0, [r6, #0]
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f8c7 	bl	800a590 <_sbrk_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d00a      	beq.n	800a41c <sbrk_aligned+0x34>
 800a406:	1cc4      	adds	r4, r0, #3
 800a408:	f024 0403 	bic.w	r4, r4, #3
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d007      	beq.n	800a420 <sbrk_aligned+0x38>
 800a410:	1a21      	subs	r1, r4, r0
 800a412:	4628      	mov	r0, r5
 800a414:	f000 f8bc 	bl	800a590 <_sbrk_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	d101      	bne.n	800a420 <sbrk_aligned+0x38>
 800a41c:	f04f 34ff 	mov.w	r4, #4294967295
 800a420:	4620      	mov	r0, r4
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	20000950 	.word	0x20000950

0800a428 <_malloc_r>:
 800a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a42c:	1ccd      	adds	r5, r1, #3
 800a42e:	f025 0503 	bic.w	r5, r5, #3
 800a432:	3508      	adds	r5, #8
 800a434:	2d0c      	cmp	r5, #12
 800a436:	bf38      	it	cc
 800a438:	250c      	movcc	r5, #12
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	4607      	mov	r7, r0
 800a43e:	db01      	blt.n	800a444 <_malloc_r+0x1c>
 800a440:	42a9      	cmp	r1, r5
 800a442:	d905      	bls.n	800a450 <_malloc_r+0x28>
 800a444:	230c      	movs	r3, #12
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	2600      	movs	r6, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a524 <_malloc_r+0xfc>
 800a454:	f000 f868 	bl	800a528 <__malloc_lock>
 800a458:	f8d8 3000 	ldr.w	r3, [r8]
 800a45c:	461c      	mov	r4, r3
 800a45e:	bb5c      	cbnz	r4, 800a4b8 <_malloc_r+0x90>
 800a460:	4629      	mov	r1, r5
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ffc0 	bl	800a3e8 <sbrk_aligned>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	4604      	mov	r4, r0
 800a46c:	d155      	bne.n	800a51a <_malloc_r+0xf2>
 800a46e:	f8d8 4000 	ldr.w	r4, [r8]
 800a472:	4626      	mov	r6, r4
 800a474:	2e00      	cmp	r6, #0
 800a476:	d145      	bne.n	800a504 <_malloc_r+0xdc>
 800a478:	2c00      	cmp	r4, #0
 800a47a:	d048      	beq.n	800a50e <_malloc_r+0xe6>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	4631      	mov	r1, r6
 800a480:	4638      	mov	r0, r7
 800a482:	eb04 0903 	add.w	r9, r4, r3
 800a486:	f000 f883 	bl	800a590 <_sbrk_r>
 800a48a:	4581      	cmp	r9, r0
 800a48c:	d13f      	bne.n	800a50e <_malloc_r+0xe6>
 800a48e:	6821      	ldr	r1, [r4, #0]
 800a490:	1a6d      	subs	r5, r5, r1
 800a492:	4629      	mov	r1, r5
 800a494:	4638      	mov	r0, r7
 800a496:	f7ff ffa7 	bl	800a3e8 <sbrk_aligned>
 800a49a:	3001      	adds	r0, #1
 800a49c:	d037      	beq.n	800a50e <_malloc_r+0xe6>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	442b      	add	r3, r5
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d038      	beq.n	800a51e <_malloc_r+0xf6>
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	42a2      	cmp	r2, r4
 800a4b0:	d12b      	bne.n	800a50a <_malloc_r+0xe2>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	605a      	str	r2, [r3, #4]
 800a4b6:	e00f      	b.n	800a4d8 <_malloc_r+0xb0>
 800a4b8:	6822      	ldr	r2, [r4, #0]
 800a4ba:	1b52      	subs	r2, r2, r5
 800a4bc:	d41f      	bmi.n	800a4fe <_malloc_r+0xd6>
 800a4be:	2a0b      	cmp	r2, #11
 800a4c0:	d917      	bls.n	800a4f2 <_malloc_r+0xca>
 800a4c2:	1961      	adds	r1, r4, r5
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	6025      	str	r5, [r4, #0]
 800a4c8:	bf18      	it	ne
 800a4ca:	6059      	strne	r1, [r3, #4]
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	bf08      	it	eq
 800a4d0:	f8c8 1000 	streq.w	r1, [r8]
 800a4d4:	5162      	str	r2, [r4, r5]
 800a4d6:	604b      	str	r3, [r1, #4]
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f104 060b 	add.w	r6, r4, #11
 800a4de:	f000 f829 	bl	800a534 <__malloc_unlock>
 800a4e2:	f026 0607 	bic.w	r6, r6, #7
 800a4e6:	1d23      	adds	r3, r4, #4
 800a4e8:	1af2      	subs	r2, r6, r3
 800a4ea:	d0ae      	beq.n	800a44a <_malloc_r+0x22>
 800a4ec:	1b9b      	subs	r3, r3, r6
 800a4ee:	50a3      	str	r3, [r4, r2]
 800a4f0:	e7ab      	b.n	800a44a <_malloc_r+0x22>
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	6862      	ldr	r2, [r4, #4]
 800a4f6:	d1dd      	bne.n	800a4b4 <_malloc_r+0x8c>
 800a4f8:	f8c8 2000 	str.w	r2, [r8]
 800a4fc:	e7ec      	b.n	800a4d8 <_malloc_r+0xb0>
 800a4fe:	4623      	mov	r3, r4
 800a500:	6864      	ldr	r4, [r4, #4]
 800a502:	e7ac      	b.n	800a45e <_malloc_r+0x36>
 800a504:	4634      	mov	r4, r6
 800a506:	6876      	ldr	r6, [r6, #4]
 800a508:	e7b4      	b.n	800a474 <_malloc_r+0x4c>
 800a50a:	4613      	mov	r3, r2
 800a50c:	e7cc      	b.n	800a4a8 <_malloc_r+0x80>
 800a50e:	230c      	movs	r3, #12
 800a510:	603b      	str	r3, [r7, #0]
 800a512:	4638      	mov	r0, r7
 800a514:	f000 f80e 	bl	800a534 <__malloc_unlock>
 800a518:	e797      	b.n	800a44a <_malloc_r+0x22>
 800a51a:	6025      	str	r5, [r4, #0]
 800a51c:	e7dc      	b.n	800a4d8 <_malloc_r+0xb0>
 800a51e:	605b      	str	r3, [r3, #4]
 800a520:	deff      	udf	#255	; 0xff
 800a522:	bf00      	nop
 800a524:	2000094c 	.word	0x2000094c

0800a528 <__malloc_lock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_lock+0x8>)
 800a52a:	f000 b86b 	b.w	800a604 <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	20000a90 	.word	0x20000a90

0800a534 <__malloc_unlock>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__malloc_unlock+0x8>)
 800a536:	f000 b866 	b.w	800a606 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	20000a90 	.word	0x20000a90

0800a540 <siprintf>:
 800a540:	b40e      	push	{r1, r2, r3}
 800a542:	b500      	push	{lr}
 800a544:	b09c      	sub	sp, #112	; 0x70
 800a546:	ab1d      	add	r3, sp, #116	; 0x74
 800a548:	9002      	str	r0, [sp, #8]
 800a54a:	9006      	str	r0, [sp, #24]
 800a54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a550:	4809      	ldr	r0, [pc, #36]	; (800a578 <siprintf+0x38>)
 800a552:	9107      	str	r1, [sp, #28]
 800a554:	9104      	str	r1, [sp, #16]
 800a556:	4909      	ldr	r1, [pc, #36]	; (800a57c <siprintf+0x3c>)
 800a558:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55c:	9105      	str	r1, [sp, #20]
 800a55e:	6800      	ldr	r0, [r0, #0]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	a902      	add	r1, sp, #8
 800a564:	f000 f8f6 	bl	800a754 <_svfiprintf_r>
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	b01c      	add	sp, #112	; 0x70
 800a570:	f85d eb04 	ldr.w	lr, [sp], #4
 800a574:	b003      	add	sp, #12
 800a576:	4770      	bx	lr
 800a578:	20000088 	.word	0x20000088
 800a57c:	ffff0208 	.word	0xffff0208

0800a580 <memset>:
 800a580:	4402      	add	r2, r0
 800a582:	4603      	mov	r3, r0
 800a584:	4293      	cmp	r3, r2
 800a586:	d100      	bne.n	800a58a <memset+0xa>
 800a588:	4770      	bx	lr
 800a58a:	f803 1b01 	strb.w	r1, [r3], #1
 800a58e:	e7f9      	b.n	800a584 <memset+0x4>

0800a590 <_sbrk_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4d06      	ldr	r5, [pc, #24]	; (800a5ac <_sbrk_r+0x1c>)
 800a594:	2300      	movs	r3, #0
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	602b      	str	r3, [r5, #0]
 800a59c:	f7f6 fe4e 	bl	800123c <_sbrk>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_sbrk_r+0x1a>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_sbrk_r+0x1a>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	20000a8c 	.word	0x20000a8c

0800a5b0 <__errno>:
 800a5b0:	4b01      	ldr	r3, [pc, #4]	; (800a5b8 <__errno+0x8>)
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	20000088 	.word	0x20000088

0800a5bc <__libc_init_array>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4d0d      	ldr	r5, [pc, #52]	; (800a5f4 <__libc_init_array+0x38>)
 800a5c0:	4c0d      	ldr	r4, [pc, #52]	; (800a5f8 <__libc_init_array+0x3c>)
 800a5c2:	1b64      	subs	r4, r4, r5
 800a5c4:	10a4      	asrs	r4, r4, #2
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	42a6      	cmp	r6, r4
 800a5ca:	d109      	bne.n	800a5e0 <__libc_init_array+0x24>
 800a5cc:	4d0b      	ldr	r5, [pc, #44]	; (800a5fc <__libc_init_array+0x40>)
 800a5ce:	4c0c      	ldr	r4, [pc, #48]	; (800a600 <__libc_init_array+0x44>)
 800a5d0:	f000 fbae 	bl	800ad30 <_init>
 800a5d4:	1b64      	subs	r4, r4, r5
 800a5d6:	10a4      	asrs	r4, r4, #2
 800a5d8:	2600      	movs	r6, #0
 800a5da:	42a6      	cmp	r6, r4
 800a5dc:	d105      	bne.n	800a5ea <__libc_init_array+0x2e>
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e4:	4798      	blx	r3
 800a5e6:	3601      	adds	r6, #1
 800a5e8:	e7ee      	b.n	800a5c8 <__libc_init_array+0xc>
 800a5ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ee:	4798      	blx	r3
 800a5f0:	3601      	adds	r6, #1
 800a5f2:	e7f2      	b.n	800a5da <__libc_init_array+0x1e>
 800a5f4:	0800adc0 	.word	0x0800adc0
 800a5f8:	0800adc0 	.word	0x0800adc0
 800a5fc:	0800adc0 	.word	0x0800adc0
 800a600:	0800adc4 	.word	0x0800adc4

0800a604 <__retarget_lock_acquire_recursive>:
 800a604:	4770      	bx	lr

0800a606 <__retarget_lock_release_recursive>:
 800a606:	4770      	bx	lr

0800a608 <_free_r>:
 800a608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a60a:	2900      	cmp	r1, #0
 800a60c:	d044      	beq.n	800a698 <_free_r+0x90>
 800a60e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a612:	9001      	str	r0, [sp, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f1a1 0404 	sub.w	r4, r1, #4
 800a61a:	bfb8      	it	lt
 800a61c:	18e4      	addlt	r4, r4, r3
 800a61e:	f7ff ff83 	bl	800a528 <__malloc_lock>
 800a622:	4a1e      	ldr	r2, [pc, #120]	; (800a69c <_free_r+0x94>)
 800a624:	9801      	ldr	r0, [sp, #4]
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	b933      	cbnz	r3, 800a638 <_free_r+0x30>
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	6014      	str	r4, [r2, #0]
 800a62e:	b003      	add	sp, #12
 800a630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a634:	f7ff bf7e 	b.w	800a534 <__malloc_unlock>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d908      	bls.n	800a64e <_free_r+0x46>
 800a63c:	6825      	ldr	r5, [r4, #0]
 800a63e:	1961      	adds	r1, r4, r5
 800a640:	428b      	cmp	r3, r1
 800a642:	bf01      	itttt	eq
 800a644:	6819      	ldreq	r1, [r3, #0]
 800a646:	685b      	ldreq	r3, [r3, #4]
 800a648:	1949      	addeq	r1, r1, r5
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	e7ed      	b.n	800a62a <_free_r+0x22>
 800a64e:	461a      	mov	r2, r3
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	b10b      	cbz	r3, 800a658 <_free_r+0x50>
 800a654:	42a3      	cmp	r3, r4
 800a656:	d9fa      	bls.n	800a64e <_free_r+0x46>
 800a658:	6811      	ldr	r1, [r2, #0]
 800a65a:	1855      	adds	r5, r2, r1
 800a65c:	42a5      	cmp	r5, r4
 800a65e:	d10b      	bne.n	800a678 <_free_r+0x70>
 800a660:	6824      	ldr	r4, [r4, #0]
 800a662:	4421      	add	r1, r4
 800a664:	1854      	adds	r4, r2, r1
 800a666:	42a3      	cmp	r3, r4
 800a668:	6011      	str	r1, [r2, #0]
 800a66a:	d1e0      	bne.n	800a62e <_free_r+0x26>
 800a66c:	681c      	ldr	r4, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	6053      	str	r3, [r2, #4]
 800a672:	440c      	add	r4, r1
 800a674:	6014      	str	r4, [r2, #0]
 800a676:	e7da      	b.n	800a62e <_free_r+0x26>
 800a678:	d902      	bls.n	800a680 <_free_r+0x78>
 800a67a:	230c      	movs	r3, #12
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	e7d6      	b.n	800a62e <_free_r+0x26>
 800a680:	6825      	ldr	r5, [r4, #0]
 800a682:	1961      	adds	r1, r4, r5
 800a684:	428b      	cmp	r3, r1
 800a686:	bf04      	itt	eq
 800a688:	6819      	ldreq	r1, [r3, #0]
 800a68a:	685b      	ldreq	r3, [r3, #4]
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	bf04      	itt	eq
 800a690:	1949      	addeq	r1, r1, r5
 800a692:	6021      	streq	r1, [r4, #0]
 800a694:	6054      	str	r4, [r2, #4]
 800a696:	e7ca      	b.n	800a62e <_free_r+0x26>
 800a698:	b003      	add	sp, #12
 800a69a:	bd30      	pop	{r4, r5, pc}
 800a69c:	2000094c 	.word	0x2000094c

0800a6a0 <__ssputs_r>:
 800a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	688e      	ldr	r6, [r1, #8]
 800a6a6:	461f      	mov	r7, r3
 800a6a8:	42be      	cmp	r6, r7
 800a6aa:	680b      	ldr	r3, [r1, #0]
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	4690      	mov	r8, r2
 800a6b2:	d82c      	bhi.n	800a70e <__ssputs_r+0x6e>
 800a6b4:	898a      	ldrh	r2, [r1, #12]
 800a6b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6ba:	d026      	beq.n	800a70a <__ssputs_r+0x6a>
 800a6bc:	6965      	ldr	r5, [r4, #20]
 800a6be:	6909      	ldr	r1, [r1, #16]
 800a6c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6c4:	eba3 0901 	sub.w	r9, r3, r1
 800a6c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6cc:	1c7b      	adds	r3, r7, #1
 800a6ce:	444b      	add	r3, r9
 800a6d0:	106d      	asrs	r5, r5, #1
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	bf38      	it	cc
 800a6d6:	461d      	movcc	r5, r3
 800a6d8:	0553      	lsls	r3, r2, #21
 800a6da:	d527      	bpl.n	800a72c <__ssputs_r+0x8c>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7ff fea3 	bl	800a428 <_malloc_r>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	b360      	cbz	r0, 800a740 <__ssputs_r+0xa0>
 800a6e6:	6921      	ldr	r1, [r4, #16]
 800a6e8:	464a      	mov	r2, r9
 800a6ea:	f000 fadb 	bl	800aca4 <memcpy>
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	6126      	str	r6, [r4, #16]
 800a6fc:	6165      	str	r5, [r4, #20]
 800a6fe:	444e      	add	r6, r9
 800a700:	eba5 0509 	sub.w	r5, r5, r9
 800a704:	6026      	str	r6, [r4, #0]
 800a706:	60a5      	str	r5, [r4, #8]
 800a708:	463e      	mov	r6, r7
 800a70a:	42be      	cmp	r6, r7
 800a70c:	d900      	bls.n	800a710 <__ssputs_r+0x70>
 800a70e:	463e      	mov	r6, r7
 800a710:	6820      	ldr	r0, [r4, #0]
 800a712:	4632      	mov	r2, r6
 800a714:	4641      	mov	r1, r8
 800a716:	f000 faab 	bl	800ac70 <memmove>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	1b9b      	subs	r3, r3, r6
 800a71e:	60a3      	str	r3, [r4, #8]
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	4433      	add	r3, r6
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	2000      	movs	r0, #0
 800a728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72c:	462a      	mov	r2, r5
 800a72e:	f000 fac7 	bl	800acc0 <_realloc_r>
 800a732:	4606      	mov	r6, r0
 800a734:	2800      	cmp	r0, #0
 800a736:	d1e0      	bne.n	800a6fa <__ssputs_r+0x5a>
 800a738:	6921      	ldr	r1, [r4, #16]
 800a73a:	4650      	mov	r0, sl
 800a73c:	f7ff ff64 	bl	800a608 <_free_r>
 800a740:	230c      	movs	r3, #12
 800a742:	f8ca 3000 	str.w	r3, [sl]
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	f04f 30ff 	mov.w	r0, #4294967295
 800a752:	e7e9      	b.n	800a728 <__ssputs_r+0x88>

0800a754 <_svfiprintf_r>:
 800a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	4698      	mov	r8, r3
 800a75a:	898b      	ldrh	r3, [r1, #12]
 800a75c:	061b      	lsls	r3, r3, #24
 800a75e:	b09d      	sub	sp, #116	; 0x74
 800a760:	4607      	mov	r7, r0
 800a762:	460d      	mov	r5, r1
 800a764:	4614      	mov	r4, r2
 800a766:	d50e      	bpl.n	800a786 <_svfiprintf_r+0x32>
 800a768:	690b      	ldr	r3, [r1, #16]
 800a76a:	b963      	cbnz	r3, 800a786 <_svfiprintf_r+0x32>
 800a76c:	2140      	movs	r1, #64	; 0x40
 800a76e:	f7ff fe5b 	bl	800a428 <_malloc_r>
 800a772:	6028      	str	r0, [r5, #0]
 800a774:	6128      	str	r0, [r5, #16]
 800a776:	b920      	cbnz	r0, 800a782 <_svfiprintf_r+0x2e>
 800a778:	230c      	movs	r3, #12
 800a77a:	603b      	str	r3, [r7, #0]
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	e0d0      	b.n	800a924 <_svfiprintf_r+0x1d0>
 800a782:	2340      	movs	r3, #64	; 0x40
 800a784:	616b      	str	r3, [r5, #20]
 800a786:	2300      	movs	r3, #0
 800a788:	9309      	str	r3, [sp, #36]	; 0x24
 800a78a:	2320      	movs	r3, #32
 800a78c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a790:	f8cd 800c 	str.w	r8, [sp, #12]
 800a794:	2330      	movs	r3, #48	; 0x30
 800a796:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a93c <_svfiprintf_r+0x1e8>
 800a79a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a79e:	f04f 0901 	mov.w	r9, #1
 800a7a2:	4623      	mov	r3, r4
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7aa:	b10a      	cbz	r2, 800a7b0 <_svfiprintf_r+0x5c>
 800a7ac:	2a25      	cmp	r2, #37	; 0x25
 800a7ae:	d1f9      	bne.n	800a7a4 <_svfiprintf_r+0x50>
 800a7b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b4:	d00b      	beq.n	800a7ce <_svfiprintf_r+0x7a>
 800a7b6:	465b      	mov	r3, fp
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff ff6f 	bl	800a6a0 <__ssputs_r>
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	f000 80a9 	beq.w	800a91a <_svfiprintf_r+0x1c6>
 800a7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ca:	445a      	add	r2, fp
 800a7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 80a1 	beq.w	800a91a <_svfiprintf_r+0x1c6>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f04f 32ff 	mov.w	r2, #4294967295
 800a7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e2:	f10a 0a01 	add.w	sl, sl, #1
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	9307      	str	r3, [sp, #28]
 800a7ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a7f0:	4654      	mov	r4, sl
 800a7f2:	2205      	movs	r2, #5
 800a7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f8:	4850      	ldr	r0, [pc, #320]	; (800a93c <_svfiprintf_r+0x1e8>)
 800a7fa:	f7f5 fce9 	bl	80001d0 <memchr>
 800a7fe:	9a04      	ldr	r2, [sp, #16]
 800a800:	b9d8      	cbnz	r0, 800a83a <_svfiprintf_r+0xe6>
 800a802:	06d0      	lsls	r0, r2, #27
 800a804:	bf44      	itt	mi
 800a806:	2320      	movmi	r3, #32
 800a808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a80c:	0711      	lsls	r1, r2, #28
 800a80e:	bf44      	itt	mi
 800a810:	232b      	movmi	r3, #43	; 0x2b
 800a812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a816:	f89a 3000 	ldrb.w	r3, [sl]
 800a81a:	2b2a      	cmp	r3, #42	; 0x2a
 800a81c:	d015      	beq.n	800a84a <_svfiprintf_r+0xf6>
 800a81e:	9a07      	ldr	r2, [sp, #28]
 800a820:	4654      	mov	r4, sl
 800a822:	2000      	movs	r0, #0
 800a824:	f04f 0c0a 	mov.w	ip, #10
 800a828:	4621      	mov	r1, r4
 800a82a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a82e:	3b30      	subs	r3, #48	; 0x30
 800a830:	2b09      	cmp	r3, #9
 800a832:	d94d      	bls.n	800a8d0 <_svfiprintf_r+0x17c>
 800a834:	b1b0      	cbz	r0, 800a864 <_svfiprintf_r+0x110>
 800a836:	9207      	str	r2, [sp, #28]
 800a838:	e014      	b.n	800a864 <_svfiprintf_r+0x110>
 800a83a:	eba0 0308 	sub.w	r3, r0, r8
 800a83e:	fa09 f303 	lsl.w	r3, r9, r3
 800a842:	4313      	orrs	r3, r2
 800a844:	9304      	str	r3, [sp, #16]
 800a846:	46a2      	mov	sl, r4
 800a848:	e7d2      	b.n	800a7f0 <_svfiprintf_r+0x9c>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	1d19      	adds	r1, r3, #4
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	9103      	str	r1, [sp, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	bfbb      	ittet	lt
 800a856:	425b      	neglt	r3, r3
 800a858:	f042 0202 	orrlt.w	r2, r2, #2
 800a85c:	9307      	strge	r3, [sp, #28]
 800a85e:	9307      	strlt	r3, [sp, #28]
 800a860:	bfb8      	it	lt
 800a862:	9204      	strlt	r2, [sp, #16]
 800a864:	7823      	ldrb	r3, [r4, #0]
 800a866:	2b2e      	cmp	r3, #46	; 0x2e
 800a868:	d10c      	bne.n	800a884 <_svfiprintf_r+0x130>
 800a86a:	7863      	ldrb	r3, [r4, #1]
 800a86c:	2b2a      	cmp	r3, #42	; 0x2a
 800a86e:	d134      	bne.n	800a8da <_svfiprintf_r+0x186>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	1d1a      	adds	r2, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	9203      	str	r2, [sp, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfb8      	it	lt
 800a87c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a880:	3402      	adds	r4, #2
 800a882:	9305      	str	r3, [sp, #20]
 800a884:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a94c <_svfiprintf_r+0x1f8>
 800a888:	7821      	ldrb	r1, [r4, #0]
 800a88a:	2203      	movs	r2, #3
 800a88c:	4650      	mov	r0, sl
 800a88e:	f7f5 fc9f 	bl	80001d0 <memchr>
 800a892:	b138      	cbz	r0, 800a8a4 <_svfiprintf_r+0x150>
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	eba0 000a 	sub.w	r0, r0, sl
 800a89a:	2240      	movs	r2, #64	; 0x40
 800a89c:	4082      	lsls	r2, r0
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	3401      	adds	r4, #1
 800a8a2:	9304      	str	r3, [sp, #16]
 800a8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a8:	4825      	ldr	r0, [pc, #148]	; (800a940 <_svfiprintf_r+0x1ec>)
 800a8aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ae:	2206      	movs	r2, #6
 800a8b0:	f7f5 fc8e 	bl	80001d0 <memchr>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d038      	beq.n	800a92a <_svfiprintf_r+0x1d6>
 800a8b8:	4b22      	ldr	r3, [pc, #136]	; (800a944 <_svfiprintf_r+0x1f0>)
 800a8ba:	bb1b      	cbnz	r3, 800a904 <_svfiprintf_r+0x1b0>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	3307      	adds	r3, #7
 800a8c0:	f023 0307 	bic.w	r3, r3, #7
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	9303      	str	r3, [sp, #12]
 800a8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ca:	4433      	add	r3, r6
 800a8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ce:	e768      	b.n	800a7a2 <_svfiprintf_r+0x4e>
 800a8d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	e7a6      	b.n	800a828 <_svfiprintf_r+0xd4>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	3401      	adds	r4, #1
 800a8de:	9305      	str	r3, [sp, #20]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f04f 0c0a 	mov.w	ip, #10
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ec:	3a30      	subs	r2, #48	; 0x30
 800a8ee:	2a09      	cmp	r2, #9
 800a8f0:	d903      	bls.n	800a8fa <_svfiprintf_r+0x1a6>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0c6      	beq.n	800a884 <_svfiprintf_r+0x130>
 800a8f6:	9105      	str	r1, [sp, #20]
 800a8f8:	e7c4      	b.n	800a884 <_svfiprintf_r+0x130>
 800a8fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8fe:	4604      	mov	r4, r0
 800a900:	2301      	movs	r3, #1
 800a902:	e7f0      	b.n	800a8e6 <_svfiprintf_r+0x192>
 800a904:	ab03      	add	r3, sp, #12
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	462a      	mov	r2, r5
 800a90a:	4b0f      	ldr	r3, [pc, #60]	; (800a948 <_svfiprintf_r+0x1f4>)
 800a90c:	a904      	add	r1, sp, #16
 800a90e:	4638      	mov	r0, r7
 800a910:	f3af 8000 	nop.w
 800a914:	1c42      	adds	r2, r0, #1
 800a916:	4606      	mov	r6, r0
 800a918:	d1d6      	bne.n	800a8c8 <_svfiprintf_r+0x174>
 800a91a:	89ab      	ldrh	r3, [r5, #12]
 800a91c:	065b      	lsls	r3, r3, #25
 800a91e:	f53f af2d 	bmi.w	800a77c <_svfiprintf_r+0x28>
 800a922:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a924:	b01d      	add	sp, #116	; 0x74
 800a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92a:	ab03      	add	r3, sp, #12
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	462a      	mov	r2, r5
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <_svfiprintf_r+0x1f4>)
 800a932:	a904      	add	r1, sp, #16
 800a934:	4638      	mov	r0, r7
 800a936:	f000 f879 	bl	800aa2c <_printf_i>
 800a93a:	e7eb      	b.n	800a914 <_svfiprintf_r+0x1c0>
 800a93c:	0800ad84 	.word	0x0800ad84
 800a940:	0800ad8e 	.word	0x0800ad8e
 800a944:	00000000 	.word	0x00000000
 800a948:	0800a6a1 	.word	0x0800a6a1
 800a94c:	0800ad8a 	.word	0x0800ad8a

0800a950 <_printf_common>:
 800a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	4616      	mov	r6, r2
 800a956:	4699      	mov	r9, r3
 800a958:	688a      	ldr	r2, [r1, #8]
 800a95a:	690b      	ldr	r3, [r1, #16]
 800a95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a960:	4293      	cmp	r3, r2
 800a962:	bfb8      	it	lt
 800a964:	4613      	movlt	r3, r2
 800a966:	6033      	str	r3, [r6, #0]
 800a968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a96c:	4607      	mov	r7, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b10a      	cbz	r2, 800a976 <_printf_common+0x26>
 800a972:	3301      	adds	r3, #1
 800a974:	6033      	str	r3, [r6, #0]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	0699      	lsls	r1, r3, #26
 800a97a:	bf42      	ittt	mi
 800a97c:	6833      	ldrmi	r3, [r6, #0]
 800a97e:	3302      	addmi	r3, #2
 800a980:	6033      	strmi	r3, [r6, #0]
 800a982:	6825      	ldr	r5, [r4, #0]
 800a984:	f015 0506 	ands.w	r5, r5, #6
 800a988:	d106      	bne.n	800a998 <_printf_common+0x48>
 800a98a:	f104 0a19 	add.w	sl, r4, #25
 800a98e:	68e3      	ldr	r3, [r4, #12]
 800a990:	6832      	ldr	r2, [r6, #0]
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	42ab      	cmp	r3, r5
 800a996:	dc26      	bgt.n	800a9e6 <_printf_common+0x96>
 800a998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a99c:	1e13      	subs	r3, r2, #0
 800a99e:	6822      	ldr	r2, [r4, #0]
 800a9a0:	bf18      	it	ne
 800a9a2:	2301      	movne	r3, #1
 800a9a4:	0692      	lsls	r2, r2, #26
 800a9a6:	d42b      	bmi.n	800aa00 <_printf_common+0xb0>
 800a9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	47c0      	blx	r8
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d01e      	beq.n	800a9f4 <_printf_common+0xa4>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	6922      	ldr	r2, [r4, #16]
 800a9ba:	f003 0306 	and.w	r3, r3, #6
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	bf02      	ittt	eq
 800a9c2:	68e5      	ldreq	r5, [r4, #12]
 800a9c4:	6833      	ldreq	r3, [r6, #0]
 800a9c6:	1aed      	subeq	r5, r5, r3
 800a9c8:	68a3      	ldr	r3, [r4, #8]
 800a9ca:	bf0c      	ite	eq
 800a9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9d0:	2500      	movne	r5, #0
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	bfc4      	itt	gt
 800a9d6:	1a9b      	subgt	r3, r3, r2
 800a9d8:	18ed      	addgt	r5, r5, r3
 800a9da:	2600      	movs	r6, #0
 800a9dc:	341a      	adds	r4, #26
 800a9de:	42b5      	cmp	r5, r6
 800a9e0:	d11a      	bne.n	800aa18 <_printf_common+0xc8>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e008      	b.n	800a9f8 <_printf_common+0xa8>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	47c0      	blx	r8
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d103      	bne.n	800a9fc <_printf_common+0xac>
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	e7c6      	b.n	800a98e <_printf_common+0x3e>
 800aa00:	18e1      	adds	r1, r4, r3
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	2030      	movs	r0, #48	; 0x30
 800aa06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa0a:	4422      	add	r2, r4
 800aa0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa14:	3302      	adds	r3, #2
 800aa16:	e7c7      	b.n	800a9a8 <_printf_common+0x58>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	4649      	mov	r1, r9
 800aa1e:	4638      	mov	r0, r7
 800aa20:	47c0      	blx	r8
 800aa22:	3001      	adds	r0, #1
 800aa24:	d0e6      	beq.n	800a9f4 <_printf_common+0xa4>
 800aa26:	3601      	adds	r6, #1
 800aa28:	e7d9      	b.n	800a9de <_printf_common+0x8e>
	...

0800aa2c <_printf_i>:
 800aa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	7e0f      	ldrb	r7, [r1, #24]
 800aa32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa34:	2f78      	cmp	r7, #120	; 0x78
 800aa36:	4691      	mov	r9, r2
 800aa38:	4680      	mov	r8, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	469a      	mov	sl, r3
 800aa3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa42:	d807      	bhi.n	800aa54 <_printf_i+0x28>
 800aa44:	2f62      	cmp	r7, #98	; 0x62
 800aa46:	d80a      	bhi.n	800aa5e <_printf_i+0x32>
 800aa48:	2f00      	cmp	r7, #0
 800aa4a:	f000 80d4 	beq.w	800abf6 <_printf_i+0x1ca>
 800aa4e:	2f58      	cmp	r7, #88	; 0x58
 800aa50:	f000 80c0 	beq.w	800abd4 <_printf_i+0x1a8>
 800aa54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa5c:	e03a      	b.n	800aad4 <_printf_i+0xa8>
 800aa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa62:	2b15      	cmp	r3, #21
 800aa64:	d8f6      	bhi.n	800aa54 <_printf_i+0x28>
 800aa66:	a101      	add	r1, pc, #4	; (adr r1, 800aa6c <_printf_i+0x40>)
 800aa68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa6c:	0800aac5 	.word	0x0800aac5
 800aa70:	0800aad9 	.word	0x0800aad9
 800aa74:	0800aa55 	.word	0x0800aa55
 800aa78:	0800aa55 	.word	0x0800aa55
 800aa7c:	0800aa55 	.word	0x0800aa55
 800aa80:	0800aa55 	.word	0x0800aa55
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aa55 	.word	0x0800aa55
 800aa8c:	0800aa55 	.word	0x0800aa55
 800aa90:	0800aa55 	.word	0x0800aa55
 800aa94:	0800aa55 	.word	0x0800aa55
 800aa98:	0800abdd 	.word	0x0800abdd
 800aa9c:	0800ab05 	.word	0x0800ab05
 800aaa0:	0800ab97 	.word	0x0800ab97
 800aaa4:	0800aa55 	.word	0x0800aa55
 800aaa8:	0800aa55 	.word	0x0800aa55
 800aaac:	0800abff 	.word	0x0800abff
 800aab0:	0800aa55 	.word	0x0800aa55
 800aab4:	0800ab05 	.word	0x0800ab05
 800aab8:	0800aa55 	.word	0x0800aa55
 800aabc:	0800aa55 	.word	0x0800aa55
 800aac0:	0800ab9f 	.word	0x0800ab9f
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	1d1a      	adds	r2, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aad4:	2301      	movs	r3, #1
 800aad6:	e09f      	b.n	800ac18 <_printf_i+0x1ec>
 800aad8:	6820      	ldr	r0, [r4, #0]
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	0607      	lsls	r7, r0, #24
 800aade:	f103 0104 	add.w	r1, r3, #4
 800aae2:	6029      	str	r1, [r5, #0]
 800aae4:	d501      	bpl.n	800aaea <_printf_i+0xbe>
 800aae6:	681e      	ldr	r6, [r3, #0]
 800aae8:	e003      	b.n	800aaf2 <_printf_i+0xc6>
 800aaea:	0646      	lsls	r6, r0, #25
 800aaec:	d5fb      	bpl.n	800aae6 <_printf_i+0xba>
 800aaee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	da03      	bge.n	800aafe <_printf_i+0xd2>
 800aaf6:	232d      	movs	r3, #45	; 0x2d
 800aaf8:	4276      	negs	r6, r6
 800aafa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aafe:	485a      	ldr	r0, [pc, #360]	; (800ac68 <_printf_i+0x23c>)
 800ab00:	230a      	movs	r3, #10
 800ab02:	e012      	b.n	800ab2a <_printf_i+0xfe>
 800ab04:	682b      	ldr	r3, [r5, #0]
 800ab06:	6820      	ldr	r0, [r4, #0]
 800ab08:	1d19      	adds	r1, r3, #4
 800ab0a:	6029      	str	r1, [r5, #0]
 800ab0c:	0605      	lsls	r5, r0, #24
 800ab0e:	d501      	bpl.n	800ab14 <_printf_i+0xe8>
 800ab10:	681e      	ldr	r6, [r3, #0]
 800ab12:	e002      	b.n	800ab1a <_printf_i+0xee>
 800ab14:	0641      	lsls	r1, r0, #25
 800ab16:	d5fb      	bpl.n	800ab10 <_printf_i+0xe4>
 800ab18:	881e      	ldrh	r6, [r3, #0]
 800ab1a:	4853      	ldr	r0, [pc, #332]	; (800ac68 <_printf_i+0x23c>)
 800ab1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ab1e:	bf0c      	ite	eq
 800ab20:	2308      	moveq	r3, #8
 800ab22:	230a      	movne	r3, #10
 800ab24:	2100      	movs	r1, #0
 800ab26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab2a:	6865      	ldr	r5, [r4, #4]
 800ab2c:	60a5      	str	r5, [r4, #8]
 800ab2e:	2d00      	cmp	r5, #0
 800ab30:	bfa2      	ittt	ge
 800ab32:	6821      	ldrge	r1, [r4, #0]
 800ab34:	f021 0104 	bicge.w	r1, r1, #4
 800ab38:	6021      	strge	r1, [r4, #0]
 800ab3a:	b90e      	cbnz	r6, 800ab40 <_printf_i+0x114>
 800ab3c:	2d00      	cmp	r5, #0
 800ab3e:	d04b      	beq.n	800abd8 <_printf_i+0x1ac>
 800ab40:	4615      	mov	r5, r2
 800ab42:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab46:	fb03 6711 	mls	r7, r3, r1, r6
 800ab4a:	5dc7      	ldrb	r7, [r0, r7]
 800ab4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab50:	4637      	mov	r7, r6
 800ab52:	42bb      	cmp	r3, r7
 800ab54:	460e      	mov	r6, r1
 800ab56:	d9f4      	bls.n	800ab42 <_printf_i+0x116>
 800ab58:	2b08      	cmp	r3, #8
 800ab5a:	d10b      	bne.n	800ab74 <_printf_i+0x148>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	07de      	lsls	r6, r3, #31
 800ab60:	d508      	bpl.n	800ab74 <_printf_i+0x148>
 800ab62:	6923      	ldr	r3, [r4, #16]
 800ab64:	6861      	ldr	r1, [r4, #4]
 800ab66:	4299      	cmp	r1, r3
 800ab68:	bfde      	ittt	le
 800ab6a:	2330      	movle	r3, #48	; 0x30
 800ab6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab74:	1b52      	subs	r2, r2, r5
 800ab76:	6122      	str	r2, [r4, #16]
 800ab78:	f8cd a000 	str.w	sl, [sp]
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	aa03      	add	r2, sp, #12
 800ab80:	4621      	mov	r1, r4
 800ab82:	4640      	mov	r0, r8
 800ab84:	f7ff fee4 	bl	800a950 <_printf_common>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d14a      	bne.n	800ac22 <_printf_i+0x1f6>
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	b004      	add	sp, #16
 800ab92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	f043 0320 	orr.w	r3, r3, #32
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	4833      	ldr	r0, [pc, #204]	; (800ac6c <_printf_i+0x240>)
 800aba0:	2778      	movs	r7, #120	; 0x78
 800aba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	6829      	ldr	r1, [r5, #0]
 800abaa:	061f      	lsls	r7, r3, #24
 800abac:	f851 6b04 	ldr.w	r6, [r1], #4
 800abb0:	d402      	bmi.n	800abb8 <_printf_i+0x18c>
 800abb2:	065f      	lsls	r7, r3, #25
 800abb4:	bf48      	it	mi
 800abb6:	b2b6      	uxthmi	r6, r6
 800abb8:	07df      	lsls	r7, r3, #31
 800abba:	bf48      	it	mi
 800abbc:	f043 0320 	orrmi.w	r3, r3, #32
 800abc0:	6029      	str	r1, [r5, #0]
 800abc2:	bf48      	it	mi
 800abc4:	6023      	strmi	r3, [r4, #0]
 800abc6:	b91e      	cbnz	r6, 800abd0 <_printf_i+0x1a4>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	f023 0320 	bic.w	r3, r3, #32
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	2310      	movs	r3, #16
 800abd2:	e7a7      	b.n	800ab24 <_printf_i+0xf8>
 800abd4:	4824      	ldr	r0, [pc, #144]	; (800ac68 <_printf_i+0x23c>)
 800abd6:	e7e4      	b.n	800aba2 <_printf_i+0x176>
 800abd8:	4615      	mov	r5, r2
 800abda:	e7bd      	b.n	800ab58 <_printf_i+0x12c>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	6826      	ldr	r6, [r4, #0]
 800abe0:	6961      	ldr	r1, [r4, #20]
 800abe2:	1d18      	adds	r0, r3, #4
 800abe4:	6028      	str	r0, [r5, #0]
 800abe6:	0635      	lsls	r5, r6, #24
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	d501      	bpl.n	800abf0 <_printf_i+0x1c4>
 800abec:	6019      	str	r1, [r3, #0]
 800abee:	e002      	b.n	800abf6 <_printf_i+0x1ca>
 800abf0:	0670      	lsls	r0, r6, #25
 800abf2:	d5fb      	bpl.n	800abec <_printf_i+0x1c0>
 800abf4:	8019      	strh	r1, [r3, #0]
 800abf6:	2300      	movs	r3, #0
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	4615      	mov	r5, r2
 800abfc:	e7bc      	b.n	800ab78 <_printf_i+0x14c>
 800abfe:	682b      	ldr	r3, [r5, #0]
 800ac00:	1d1a      	adds	r2, r3, #4
 800ac02:	602a      	str	r2, [r5, #0]
 800ac04:	681d      	ldr	r5, [r3, #0]
 800ac06:	6862      	ldr	r2, [r4, #4]
 800ac08:	2100      	movs	r1, #0
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7f5 fae0 	bl	80001d0 <memchr>
 800ac10:	b108      	cbz	r0, 800ac16 <_printf_i+0x1ea>
 800ac12:	1b40      	subs	r0, r0, r5
 800ac14:	6060      	str	r0, [r4, #4]
 800ac16:	6863      	ldr	r3, [r4, #4]
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac20:	e7aa      	b.n	800ab78 <_printf_i+0x14c>
 800ac22:	6923      	ldr	r3, [r4, #16]
 800ac24:	462a      	mov	r2, r5
 800ac26:	4649      	mov	r1, r9
 800ac28:	4640      	mov	r0, r8
 800ac2a:	47d0      	blx	sl
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d0ad      	beq.n	800ab8c <_printf_i+0x160>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	079b      	lsls	r3, r3, #30
 800ac34:	d413      	bmi.n	800ac5e <_printf_i+0x232>
 800ac36:	68e0      	ldr	r0, [r4, #12]
 800ac38:	9b03      	ldr	r3, [sp, #12]
 800ac3a:	4298      	cmp	r0, r3
 800ac3c:	bfb8      	it	lt
 800ac3e:	4618      	movlt	r0, r3
 800ac40:	e7a6      	b.n	800ab90 <_printf_i+0x164>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4632      	mov	r2, r6
 800ac46:	4649      	mov	r1, r9
 800ac48:	4640      	mov	r0, r8
 800ac4a:	47d0      	blx	sl
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d09d      	beq.n	800ab8c <_printf_i+0x160>
 800ac50:	3501      	adds	r5, #1
 800ac52:	68e3      	ldr	r3, [r4, #12]
 800ac54:	9903      	ldr	r1, [sp, #12]
 800ac56:	1a5b      	subs	r3, r3, r1
 800ac58:	42ab      	cmp	r3, r5
 800ac5a:	dcf2      	bgt.n	800ac42 <_printf_i+0x216>
 800ac5c:	e7eb      	b.n	800ac36 <_printf_i+0x20a>
 800ac5e:	2500      	movs	r5, #0
 800ac60:	f104 0619 	add.w	r6, r4, #25
 800ac64:	e7f5      	b.n	800ac52 <_printf_i+0x226>
 800ac66:	bf00      	nop
 800ac68:	0800ad95 	.word	0x0800ad95
 800ac6c:	0800ada6 	.word	0x0800ada6

0800ac70 <memmove>:
 800ac70:	4288      	cmp	r0, r1
 800ac72:	b510      	push	{r4, lr}
 800ac74:	eb01 0402 	add.w	r4, r1, r2
 800ac78:	d902      	bls.n	800ac80 <memmove+0x10>
 800ac7a:	4284      	cmp	r4, r0
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	d807      	bhi.n	800ac90 <memmove+0x20>
 800ac80:	1e43      	subs	r3, r0, #1
 800ac82:	42a1      	cmp	r1, r4
 800ac84:	d008      	beq.n	800ac98 <memmove+0x28>
 800ac86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac8e:	e7f8      	b.n	800ac82 <memmove+0x12>
 800ac90:	4402      	add	r2, r0
 800ac92:	4601      	mov	r1, r0
 800ac94:	428a      	cmp	r2, r1
 800ac96:	d100      	bne.n	800ac9a <memmove+0x2a>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aca2:	e7f7      	b.n	800ac94 <memmove+0x24>

0800aca4 <memcpy>:
 800aca4:	440a      	add	r2, r1
 800aca6:	4291      	cmp	r1, r2
 800aca8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acac:	d100      	bne.n	800acb0 <memcpy+0xc>
 800acae:	4770      	bx	lr
 800acb0:	b510      	push	{r4, lr}
 800acb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acba:	4291      	cmp	r1, r2
 800acbc:	d1f9      	bne.n	800acb2 <memcpy+0xe>
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <_realloc_r>:
 800acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc4:	4680      	mov	r8, r0
 800acc6:	4614      	mov	r4, r2
 800acc8:	460e      	mov	r6, r1
 800acca:	b921      	cbnz	r1, 800acd6 <_realloc_r+0x16>
 800accc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	4611      	mov	r1, r2
 800acd2:	f7ff bba9 	b.w	800a428 <_malloc_r>
 800acd6:	b92a      	cbnz	r2, 800ace4 <_realloc_r+0x24>
 800acd8:	f7ff fc96 	bl	800a608 <_free_r>
 800acdc:	4625      	mov	r5, r4
 800acde:	4628      	mov	r0, r5
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace4:	f000 f81b 	bl	800ad1e <_malloc_usable_size_r>
 800ace8:	4284      	cmp	r4, r0
 800acea:	4607      	mov	r7, r0
 800acec:	d802      	bhi.n	800acf4 <_realloc_r+0x34>
 800acee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acf2:	d812      	bhi.n	800ad1a <_realloc_r+0x5a>
 800acf4:	4621      	mov	r1, r4
 800acf6:	4640      	mov	r0, r8
 800acf8:	f7ff fb96 	bl	800a428 <_malloc_r>
 800acfc:	4605      	mov	r5, r0
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0ed      	beq.n	800acde <_realloc_r+0x1e>
 800ad02:	42bc      	cmp	r4, r7
 800ad04:	4622      	mov	r2, r4
 800ad06:	4631      	mov	r1, r6
 800ad08:	bf28      	it	cs
 800ad0a:	463a      	movcs	r2, r7
 800ad0c:	f7ff ffca 	bl	800aca4 <memcpy>
 800ad10:	4631      	mov	r1, r6
 800ad12:	4640      	mov	r0, r8
 800ad14:	f7ff fc78 	bl	800a608 <_free_r>
 800ad18:	e7e1      	b.n	800acde <_realloc_r+0x1e>
 800ad1a:	4635      	mov	r5, r6
 800ad1c:	e7df      	b.n	800acde <_realloc_r+0x1e>

0800ad1e <_malloc_usable_size_r>:
 800ad1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad22:	1f18      	subs	r0, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfbc      	itt	lt
 800ad28:	580b      	ldrlt	r3, [r1, r0]
 800ad2a:	18c0      	addlt	r0, r0, r3
 800ad2c:	4770      	bx	lr
	...

0800ad30 <_init>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	bf00      	nop
 800ad34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad36:	bc08      	pop	{r3}
 800ad38:	469e      	mov	lr, r3
 800ad3a:	4770      	bx	lr

0800ad3c <_fini>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	bf00      	nop
 800ad40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad42:	bc08      	pop	{r3}
 800ad44:	469e      	mov	lr, r3
 800ad46:	4770      	bx	lr
